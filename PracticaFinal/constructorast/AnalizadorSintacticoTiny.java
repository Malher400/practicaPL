
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sun Mar 31 03:20:24 CEST 2024
//----------------------------------------------------

package constructorast;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import alex.TokenValue;
import errors.GestionErroresTiny;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sun Mar 31 03:20:24 CEST 2024
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\164\000\002\002\004\000\002\002\004\000\002\057" +
    "\006\000\002\057\005\000\002\032\004\000\002\003\003" +
    "\000\002\003\002\000\002\004\004\000\002\004\003\000" +
    "\002\051\003\000\002\051\002\000\002\052\004\000\002" +
    "\052\003\000\002\054\003\000\002\054\002\000\002\055" +
    "\004\000\002\055\003\000\002\056\003\000\002\056\003" +
    "\000\002\056\003\000\002\053\003\000\002\053\003\000" +
    "\002\053\003\000\002\046\007\000\002\046\005\000\002" +
    "\047\007\000\002\047\005\000\002\050\003\000\002\033" +
    "\004\000\002\033\003\000\002\034\007\000\002\034\005" +
    "\000\002\034\003\000\002\034\003\000\002\035\003\000" +
    "\002\035\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\005\000\002\037\006\000\002\040\010\000\002\040" +
    "\011\000\002\042\013\000\002\042\006\000\002\041\016" +
    "\000\002\041\005\000\002\043\003\000\002\043\002\000" +
    "\002\044\005\000\002\044\003\000\002\045\004\000\002" +
    "\045\005\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\006\006\000" +
    "\002\007\011\000\002\010\015\000\002\010\005\000\002" +
    "\011\011\000\002\011\005\000\002\012\014\000\002\012" +
    "\005\000\002\013\007\000\002\014\005\000\002\015\010" +
    "\000\002\015\005\000\002\030\003\000\002\030\002\000" +
    "\002\031\005\000\002\031\003\000\002\016\003\000\002" +
    "\017\005\000\002\017\003\000\002\020\005\000\002\020" +
    "\003\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\003\000\002\022\005\000\002\022\005\000\002" +
    "\022\003\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\003\000\002\024\004\000\002\024\004" +
    "\000\002\024\004\000\002\024\004\000\002\024\004\000" +
    "\002\024\003\000\002\025\004\000\002\025\004\000\002" +
    "\025\004\000\002\025\004\000\002\025\003\000\002\026" +
    "\006\000\002\026\005\000\002\026\005\000\002\026\006" +
    "\000\002\026\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\364\000\014\004\013\011\016\012\ufff3\016\010\065" +
    "\015\001\002\000\014\004\ufff1\011\ufff1\012\ufff1\016\ufff1" +
    "\065\ufff1\001\002\000\064\004\uffdc\005\uffdc\006\uffdc\011" +
    "\uffdc\012\uffdc\015\uffdc\016\uffdc\017\uffdc\021\uffdc\022\uffdc" +
    "\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\031\uffdc\032" +
    "\uffdc\033\uffdc\034\uffdc\046\uffdc\047\uffdc\054\uffdc\057\uffdc" +
    "\062\uffdc\065\uffdc\001\002\000\014\004\ufff0\011\ufff0\012" +
    "\ufff0\016\ufff0\065\ufff0\001\002\000\004\012\360\001\002" +
    "\000\022\003\215\007\045\010\052\013\043\014\050\031" +
    "\044\054\053\066\213\001\002\000\064\004\uffeb\005\uffeb" +
    "\006\uffeb\011\uffeb\012\uffeb\015\uffeb\016\uffeb\017\uffeb\021" +
    "\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb" +
    "\031\uffeb\032\uffeb\033\uffeb\034\uffeb\046\uffeb\047\uffeb\054" +
    "\uffeb\057\uffeb\062\uffeb\065\uffeb\001\002\000\064\004\uffdd" +
    "\005\uffdd\006\uffdd\011\uffdd\012\uffdd\015\uffdd\016\uffdd\017" +
    "\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd" +
    "\027\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\046\uffdd\047" +
    "\uffdd\054\uffdd\057\uffdd\062\uffdd\065\uffdd\001\002\000\022" +
    "\003\176\007\045\010\052\013\043\014\050\030\177\031" +
    "\044\054\053\001\002\000\014\004\uffef\011\uffef\012\uffef" +
    "\016\uffef\065\uffef\001\002\000\006\003\040\031\041\001" +
    "\002\000\006\003\026\031\027\001\002\000\004\002\025" +
    "\001\002\000\014\004\uffee\011\uffee\012\uffee\016\uffee\065" +
    "\uffee\001\002\000\014\004\013\011\016\012\ufff4\016\010" +
    "\065\015\001\002\000\064\004\uffed\005\uffed\006\uffed\011" +
    "\uffed\012\uffed\015\uffed\016\uffed\017\uffed\021\uffed\022\uffed" +
    "\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed\031\uffed\032" +
    "\uffed\033\uffed\034\uffed\046\uffed\047\uffed\054\uffed\057\uffed" +
    "\062\uffed\065\uffed\001\002\000\064\004\uffec\005\uffec\006" +
    "\uffec\011\uffec\012\uffec\015\uffec\016\uffec\017\uffec\021\uffec" +
    "\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec\031" +
    "\uffec\032\uffec\033\uffec\034\uffec\046\uffec\047\uffec\054\uffec" +
    "\057\uffec\062\uffec\065\uffec\001\002\000\014\004\ufff2\011" +
    "\ufff2\012\ufff2\016\ufff2\065\ufff2\001\002\000\004\002\000" +
    "\001\002\000\004\057\037\001\002\000\004\056\030\001" +
    "\002\000\012\004\013\011\016\057\ufff7\065\015\001\002" +
    "\000\060\004\013\005\ufff8\006\ufff8\011\016\015\ufff8\017" +
    "\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8" +
    "\027\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\046\ufff8\047" +
    "\ufff8\054\ufff8\057\ufff8\062\ufff8\065\015\001\002\000\004" +
    "\057\035\001\002\000\004\057\uffe6\001\002\000\060\004" +
    "\ufff5\005\ufff5\006\ufff5\011\ufff5\015\ufff5\017\ufff5\021\ufff5" +
    "\022\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\031" +
    "\ufff5\032\ufff5\033\ufff5\034\ufff5\046\ufff5\047\ufff5\054\ufff5" +
    "\057\ufff5\062\ufff5\065\ufff5\001\002\000\064\004\uffe8\005" +
    "\uffe8\006\uffe8\011\uffe8\012\uffe8\015\uffe8\016\uffe8\017\uffe8" +
    "\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027" +
    "\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\046\uffe8\047\uffe8" +
    "\054\uffe8\057\uffe8\062\uffe8\065\uffe8\001\002\000\060\004" +
    "\ufff6\005\ufff6\006\ufff6\011\ufff6\015\ufff6\017\ufff6\021\ufff6" +
    "\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\031" +
    "\ufff6\032\ufff6\033\ufff6\034\ufff6\046\ufff6\047\ufff6\054\ufff6" +
    "\057\ufff6\062\ufff6\065\ufff6\001\002\000\064\004\uffe7\005" +
    "\uffe7\006\uffe7\011\uffe7\012\uffe7\015\uffe7\016\uffe7\017\uffe7" +
    "\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027" +
    "\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\046\uffe7\047\uffe7" +
    "\054\uffe7\057\uffe7\062\uffe7\065\uffe7\001\002\000\004\060" +
    "\174\001\002\000\004\061\042\001\002\000\016\007\045" +
    "\010\052\013\043\014\050\031\044\054\053\001\002\000" +
    "\014\031\uffdf\047\uffdf\050\uffdf\055\uffdf\060\uffdf\001\002" +
    "\000\014\031\uffe1\047\uffe1\050\uffe1\055\uffe1\060\uffe1\001" +
    "\002\000\014\007\045\013\043\014\050\031\044\054\053" +
    "\001\002\000\014\031\uffe0\047\uffe0\050\uffe0\055\uffe0\060" +
    "\uffe0\001\002\000\012\031\uffe4\047\uffe4\055\uffe4\060\uffe4" +
    "\001\002\000\014\031\uffde\047\uffde\050\uffde\055\uffde\060" +
    "\uffde\001\002\000\004\060\057\001\002\000\016\007\045" +
    "\010\052\013\043\014\050\031\044\054\053\001\002\000" +
    "\016\007\045\010\052\013\043\014\050\031\044\054\053" +
    "\001\002\000\004\055\055\001\002\000\014\031\uffe2\047" +
    "\uffe2\050\uffe2\055\uffe2\060\uffe2\001\002\000\012\031\uffe5" +
    "\047\uffe5\055\uffe5\060\uffe5\001\002\000\064\004\uffea\005" +
    "\uffea\006\uffea\011\uffea\012\uffea\015\uffea\016\uffea\017\uffea" +
    "\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027" +
    "\uffea\031\uffea\032\uffea\033\uffea\034\uffea\046\uffea\047\uffea" +
    "\054\uffea\057\uffea\062\uffea\065\uffea\001\002\000\004\050" +
    "\061\001\002\000\032\005\103\006\104\015\105\023\074" +
    "\026\102\031\066\032\106\033\062\034\101\046\063\047" +
    "\070\054\107\001\002\000\020\005\103\006\104\015\105" +
    "\023\074\026\102\031\066\054\107\001\002\000\020\005" +
    "\103\006\104\015\105\023\074\026\102\031\066\054\107" +
    "\001\002\000\054\032\uff93\033\uff93\034\uff93\035\uff93\036" +
    "\uff93\037\uff93\040\uff93\041\uff93\042\uff93\043\uff93\044\uff93" +
    "\045\uff93\050\uff93\051\uff93\052\uff93\053\uff93\055\uff93\060" +
    "\uff93\061\uff93\063\uff93\064\uff93\001\002\000\054\032\uff98" +
    "\033\uff98\034\uff98\035\uff98\036\uff98\037\uff98\040\uff98\041" +
    "\uff98\042\uff98\043\uff98\044\uff98\045\uff98\050\165\051\uff98" +
    "\052\164\053\163\055\uff98\060\uff98\061\uff98\063\uff98\064" +
    "\uff98\001\002\000\056\032\uff8f\033\uff8f\034\uff8f\035\uff8f" +
    "\036\uff8f\037\uff8f\040\uff8f\041\uff8f\042\uff8f\043\uff8f\044" +
    "\uff8f\045\uff8f\050\uff8f\051\uff8f\052\uff8f\053\uff8f\054\154" +
    "\055\uff8f\060\uff8f\061\uff8f\063\uff8f\064\uff8f\001\002\000" +
    "\046\032\uff9d\033\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d" +
    "\040\uff9d\041\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d\051" +
    "\uff9d\055\uff9d\060\uff9d\061\uff9d\063\uff9d\064\uff9d\001\002" +
    "\000\020\005\103\006\104\015\105\023\074\026\102\031" +
    "\066\054\107\001\002\000\046\032\uffa3\033\uffa3\034\uffa3" +
    "\035\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043" +
    "\uffa3\044\uffa3\045\uffa3\051\uffa3\055\uffa3\060\uffa3\061\uffa3" +
    "\063\uffa3\064\uffa3\001\002\000\004\051\152\001\002\000" +
    "\046\032\uffa7\033\uffa7\034\134\035\135\036\136\037\uffa7" +
    "\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\051" +
    "\uffa7\055\uffa7\060\uffa7\061\uffa7\063\uffa7\064\uffa7\001\002" +
    "\000\006\013\151\014\150\001\002\000\040\032\131\033" +
    "\132\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa" +
    "\045\uffaa\051\uffaa\055\uffaa\060\uffaa\061\uffaa\063\uffaa\064" +
    "\uffaa\001\002\000\034\037\124\040\122\041\123\042\126" +
    "\043\127\044\uffb1\045\uffb1\051\uffb1\055\uffb1\060\uffb1\061" +
    "\uffb1\063\uffb1\064\125\001\002\000\020\044\120\045\uffb3" +
    "\051\uffb3\055\uffb3\060\uffb3\061\uffb3\063\uffb3\001\002\000" +
    "\016\045\116\051\uffb5\055\uffb5\060\uffb5\061\uffb5\063\uffb5" +
    "\001\002\000\020\005\103\006\104\015\105\023\074\026" +
    "\102\031\066\054\107\001\002\000\006\013\114\014\113" +
    "\001\002\000\054\032\uff91\033\uff91\034\uff91\035\uff91\036" +
    "\uff91\037\uff91\040\uff91\041\uff91\042\uff91\043\uff91\044\uff91" +
    "\045\uff91\050\uff91\051\uff91\052\uff91\053\uff91\055\uff91\060" +
    "\uff91\061\uff91\063\uff91\064\uff91\001\002\000\054\032\uff92" +
    "\033\uff92\034\uff92\035\uff92\036\uff92\037\uff92\040\uff92\041" +
    "\uff92\042\uff92\043\uff92\044\uff92\045\uff92\050\uff92\051\uff92" +
    "\052\uff92\053\uff92\055\uff92\060\uff92\061\uff92\063\uff92\064" +
    "\uff92\001\002\000\054\032\uff90\033\uff90\034\uff90\035\uff90" +
    "\036\uff90\037\uff90\040\uff90\041\uff90\042\uff90\043\uff90\044" +
    "\uff90\045\uff90\050\uff90\051\uff90\052\uff90\053\uff90\055\uff90" +
    "\060\uff90\061\uff90\063\uff90\064\uff90\001\002\000\020\005" +
    "\103\006\104\015\105\023\074\026\102\031\066\054\107" +
    "\001\002\000\032\005\103\006\104\015\105\023\074\026" +
    "\102\031\066\032\106\033\062\034\101\046\063\047\070" +
    "\054\107\001\002\000\004\055\111\001\002\000\054\032" +
    "\uff8e\033\uff8e\034\uff8e\035\uff8e\036\uff8e\037\uff8e\040\uff8e" +
    "\041\uff8e\042\uff8e\043\uff8e\044\uff8e\045\uff8e\050\uff8e\051" +
    "\uff8e\052\uff8e\053\uff8e\055\uff8e\060\uff8e\061\uff8e\063\uff8e" +
    "\064\uff8e\001\002\000\046\032\uffa2\033\uffa2\034\uffa2\035" +
    "\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2" +
    "\044\uffa2\045\uffa2\051\uffa2\055\uffa2\060\uffa2\061\uffa2\063" +
    "\uffa2\064\uffa2\001\002\000\046\032\uff9b\033\uff9b\034\uff9b" +
    "\035\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b\043" +
    "\uff9b\044\uff9b\045\uff9b\051\uff9b\055\uff9b\060\uff9b\061\uff9b" +
    "\063\uff9b\064\uff9b\001\002\000\046\032\uff9c\033\uff9c\034" +
    "\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c\042\uff9c" +
    "\043\uff9c\044\uff9c\045\uff9c\051\uff9c\055\uff9c\060\uff9c\061" +
    "\uff9c\063\uff9c\064\uff9c\001\002\000\046\032\uffa0\033\uffa0" +
    "\034\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042" +
    "\uffa0\043\uffa0\044\uffa0\045\uffa0\051\uffa0\055\uffa0\060\uffa0" +
    "\061\uffa0\063\uffa0\064\uffa0\001\002\000\032\005\103\006" +
    "\104\015\105\023\074\026\102\031\066\032\106\033\062" +
    "\034\101\046\063\047\070\054\107\001\002\000\020\044" +
    "\120\045\uffb4\051\uffb4\055\uffb4\060\uffb4\061\uffb4\063\uffb4" +
    "\001\002\000\032\005\103\006\104\015\105\023\074\026" +
    "\102\031\066\032\106\033\062\034\101\046\063\047\070" +
    "\054\107\001\002\000\034\037\124\040\122\041\123\042" +
    "\126\043\127\044\uffb2\045\uffb2\051\uffb2\055\uffb2\060\uffb2" +
    "\061\uffb2\063\uffb2\064\125\001\002\000\032\005\103\006" +
    "\104\015\105\023\074\026\102\031\066\032\106\033\062" +
    "\034\101\046\063\047\070\054\107\001\002\000\032\005" +
    "\103\006\104\015\105\023\074\026\102\031\066\032\106" +
    "\033\062\034\101\046\063\047\070\054\107\001\002\000" +
    "\032\005\103\006\104\015\105\023\074\026\102\031\066" +
    "\032\106\033\062\034\101\046\063\047\070\054\107\001" +
    "\002\000\032\005\103\006\104\015\105\023\074\026\102" +
    "\031\066\032\106\033\062\034\101\046\063\047\070\054" +
    "\107\001\002\000\032\005\103\006\104\015\105\023\074" +
    "\026\102\031\066\032\106\033\062\034\101\046\063\047" +
    "\070\054\107\001\002\000\032\005\103\006\104\015\105" +
    "\023\074\026\102\031\066\032\106\033\062\034\101\046" +
    "\063\047\070\054\107\001\002\000\040\032\131\033\132" +
    "\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab\045" +
    "\uffab\051\uffab\055\uffab\060\uffab\061\uffab\063\uffab\064\uffab" +
    "\001\002\000\032\005\103\006\104\015\105\023\074\026" +
    "\102\031\066\032\106\033\062\034\101\046\063\047\070" +
    "\054\107\001\002\000\032\005\103\006\104\015\105\023" +
    "\074\026\102\031\066\032\106\033\062\034\101\046\063" +
    "\047\070\054\107\001\002\000\046\032\uffa8\033\uffa8\034" +
    "\134\035\135\036\136\037\uffa8\040\uffa8\041\uffa8\042\uffa8" +
    "\043\uffa8\044\uffa8\045\uffa8\051\uffa8\055\uffa8\060\uffa8\061" +
    "\uffa8\063\uffa8\064\uffa8\001\002\000\032\005\103\006\104" +
    "\015\105\023\074\026\102\031\066\032\106\033\062\034" +
    "\101\046\063\047\070\054\107\001\002\000\032\005\103" +
    "\006\104\015\105\023\074\026\102\031\066\032\106\033" +
    "\062\034\101\046\063\047\070\054\107\001\002\000\032" +
    "\005\103\006\104\015\105\023\074\026\102\031\066\032" +
    "\106\033\062\034\101\046\063\047\070\054\107\001\002" +
    "\000\046\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037" +
    "\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4" +
    "\051\uffa4\055\uffa4\060\uffa4\061\uffa4\063\uffa4\064\uffa4\001" +
    "\002\000\046\032\uffa5\033\uffa5\034\uffa5\035\uffa5\036\uffa5" +
    "\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5\045" +
    "\uffa5\051\uffa5\055\uffa5\060\uffa5\061\uffa5\063\uffa5\064\uffa5" +
    "\001\002\000\046\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036" +
    "\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6" +
    "\045\uffa6\051\uffa6\055\uffa6\060\uffa6\061\uffa6\063\uffa6\064" +
    "\uffa6\001\002\000\046\032\uffa9\033\uffa9\034\134\035\135" +
    "\036\136\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044" +
    "\uffa9\045\uffa9\051\uffa9\055\uffa9\060\uffa9\061\uffa9\063\uffa9" +
    "\064\uffa9\001\002\000\040\032\131\033\132\037\uffac\040" +
    "\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac\051\uffac" +
    "\055\uffac\060\uffac\061\uffac\063\uffac\064\uffac\001\002\000" +
    "\040\032\131\033\132\037\uffaf\040\uffaf\041\uffaf\042\uffaf" +
    "\043\uffaf\044\uffaf\045\uffaf\051\uffaf\055\uffaf\060\uffaf\061" +
    "\uffaf\063\uffaf\064\uffaf\001\002\000\040\032\131\033\132" +
    "\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045" +
    "\uffb0\051\uffb0\055\uffb0\060\uffb0\061\uffb0\063\uffb0\064\uffb0" +
    "\001\002\000\040\032\131\033\132\037\uffad\040\uffad\041" +
    "\uffad\042\uffad\043\uffad\044\uffad\045\uffad\051\uffad\055\uffad" +
    "\060\uffad\061\uffad\063\uffad\064\uffad\001\002\000\040\032" +
    "\131\033\132\037\uffae\040\uffae\041\uffae\042\uffae\043\uffae" +
    "\044\uffae\045\uffae\051\uffae\055\uffae\060\uffae\061\uffae\063" +
    "\uffae\064\uffae\001\002\000\046\032\uff99\033\uff99\034\uff99" +
    "\035\uff99\036\uff99\037\uff99\040\uff99\041\uff99\042\uff99\043" +
    "\uff99\044\uff99\045\uff99\051\uff99\055\uff99\060\uff99\061\uff99" +
    "\063\uff99\064\uff99\001\002\000\046\032\uff9a\033\uff9a\034" +
    "\uff9a\035\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a\042\uff9a" +
    "\043\uff9a\044\uff9a\045\uff9a\051\uff9a\055\uff9a\060\uff9a\061" +
    "\uff9a\063\uff9a\064\uff9a\001\002\000\014\031\uffe3\047\uffe3" +
    "\050\uffe3\055\uffe3\060\uffe3\001\002\000\046\032\uff9e\033" +
    "\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e" +
    "\042\uff9e\043\uff9e\044\uff9e\045\uff9e\051\uff9e\055\uff9e\060" +
    "\uff9e\061\uff9e\063\uff9e\064\uff9e\001\002\000\034\005\103" +
    "\006\104\015\105\023\074\026\102\031\066\032\106\033" +
    "\062\034\101\046\063\047\070\054\107\055\uffb8\001\002" +
    "\000\006\055\uffb6\063\uffb6\001\002\000\006\055\uffb9\063" +
    "\161\001\002\000\004\055\160\001\002\000\054\032\uff94" +
    "\033\uff94\034\uff94\035\uff94\036\uff94\037\uff94\040\uff94\041" +
    "\uff94\042\uff94\043\uff94\044\uff94\045\uff94\050\uff94\051\uff94" +
    "\052\uff94\053\uff94\055\uff94\060\uff94\061\uff94\063\uff94\064" +
    "\uff94\001\002\000\032\005\103\006\104\015\105\023\074" +
    "\026\102\031\066\032\106\033\062\034\101\046\063\047" +
    "\070\054\107\001\002\000\006\055\uffb7\063\uffb7\001\002" +
    "\000\004\031\171\001\002\000\004\031\170\001\002\000" +
    "\032\005\103\006\104\015\105\023\074\026\102\031\066" +
    "\032\106\033\062\034\101\046\063\047\070\054\107\001" +
    "\002\000\004\051\167\001\002\000\054\032\uff97\033\uff97" +
    "\034\uff97\035\uff97\036\uff97\037\uff97\040\uff97\041\uff97\042" +
    "\uff97\043\uff97\044\uff97\045\uff97\050\uff97\051\uff97\052\uff97" +
    "\053\uff97\055\uff97\060\uff97\061\uff97\063\uff97\064\uff97\001" +
    "\002\000\054\032\uff96\033\uff96\034\uff96\035\uff96\036\uff96" +
    "\037\uff96\040\uff96\041\uff96\042\uff96\043\uff96\044\uff96\045" +
    "\uff96\050\uff96\051\uff96\052\uff96\053\uff96\055\uff96\060\uff96" +
    "\061\uff96\063\uff96\064\uff96\001\002\000\054\032\uff95\033" +
    "\uff95\034\uff95\035\uff95\036\uff95\037\uff95\040\uff95\041\uff95" +
    "\042\uff95\043\uff95\044\uff95\045\uff95\050\uff95\051\uff95\052" +
    "\uff95\053\uff95\055\uff95\060\uff95\061\uff95\063\uff95\064\uff95" +
    "\001\002\000\046\032\uff9f\033\uff9f\034\uff9f\035\uff9f\036" +
    "\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f" +
    "\045\uff9f\051\uff9f\055\uff9f\060\uff9f\061\uff9f\063\uff9f\064" +
    "\uff9f\001\002\000\046\032\uffa1\033\uffa1\034\uffa1\035\uffa1" +
    "\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044" +
    "\uffa1\045\uffa1\051\uffa1\055\uffa1\060\uffa1\061\uffa1\063\uffa1" +
    "\064\uffa1\001\002\000\064\004\uffe9\005\uffe9\006\uffe9\011" +
    "\uffe9\012\uffe9\015\uffe9\016\uffe9\017\uffe9\021\uffe9\022\uffe9" +
    "\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\031\uffe9\032" +
    "\uffe9\033\uffe9\034\uffe9\046\uffe9\047\uffe9\054\uffe9\057\uffe9" +
    "\062\uffe9\065\uffe9\001\002\000\004\031\206\001\002\000" +
    "\004\060\205\001\002\000\016\007\045\010\052\013\043" +
    "\014\050\031\044\054\053\001\002\000\004\031\201\001" +
    "\002\000\004\061\202\001\002\000\032\005\103\006\104" +
    "\015\105\023\074\026\102\031\066\032\106\033\062\034" +
    "\101\046\063\047\070\054\107\001\002\000\004\060\204" +
    "\001\002\000\064\004\uffd8\005\uffd8\006\uffd8\011\uffd8\012" +
    "\uffd8\015\uffd8\016\uffd8\017\uffd8\021\uffd8\022\uffd8\023\uffd8" +
    "\024\uffd8\025\uffd8\026\uffd8\027\uffd8\031\uffd8\032\uffd8\033" +
    "\uffd8\034\uffd8\046\uffd8\047\uffd8\054\uffd8\057\uffd8\062\uffd8" +
    "\065\uffd8\001\002\000\064\004\uffdb\005\uffdb\006\uffdb\011" +
    "\uffdb\012\uffdb\015\uffdb\016\uffdb\017\uffdb\021\uffdb\022\uffdb" +
    "\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\031\uffdb\032" +
    "\uffdb\033\uffdb\034\uffdb\046\uffdb\047\uffdb\054\uffdb\057\uffdb" +
    "\062\uffdb\065\uffdb\001\002\000\006\060\207\061\210\001" +
    "\002\000\064\004\uffda\005\uffda\006\uffda\011\uffda\012\uffda" +
    "\015\uffda\016\uffda\017\uffda\021\uffda\022\uffda\023\uffda\024" +
    "\uffda\025\uffda\026\uffda\027\uffda\031\uffda\032\uffda\033\uffda" +
    "\034\uffda\046\uffda\047\uffda\054\uffda\057\uffda\062\uffda\065" +
    "\uffda\001\002\000\032\005\103\006\104\015\105\023\074" +
    "\026\102\031\066\032\106\033\062\034\101\046\063\047" +
    "\070\054\107\001\002\000\004\060\212\001\002\000\064" +
    "\004\uffd9\005\uffd9\006\uffd9\011\uffd9\012\uffd9\015\uffd9\016" +
    "\uffd9\017\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9" +
    "\026\uffd9\027\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\046" +
    "\uffd9\047\uffd9\054\uffd9\057\uffd9\062\uffd9\065\uffd9\001\002" +
    "\000\006\003\347\031\350\001\002\000\004\031\217\001" +
    "\002\000\004\057\216\001\002\000\014\004\uffd4\011\uffd4" +
    "\012\uffd4\016\uffd4\065\uffd4\001\002\000\004\054\220\001" +
    "\002\000\020\007\045\010\052\013\043\014\050\031\044" +
    "\054\053\055\uffd2\001\002\000\006\055\uffd0\063\uffd0\001" +
    "\002\000\006\055\uffd3\063\345\001\002\000\004\055\230" +
    "\001\002\000\006\031\226\047\225\001\002\000\004\031" +
    "\227\001\002\000\006\055\uffcf\063\uffcf\001\002\000\006" +
    "\055\uffce\063\uffce\001\002\000\004\056\231\001\002\000" +
    "\056\004\013\005\ufff7\006\ufff7\011\016\015\ufff7\017\ufff7" +
    "\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027" +
    "\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7\046\ufff7\047\ufff7" +
    "\054\ufff7\062\ufff7\065\015\001\002\000\004\062\341\001" +
    "\002\000\052\005\103\006\104\015\105\017\244\021\246" +
    "\022\251\023\074\024\240\025\243\026\102\027\235\031" +
    "\066\032\106\033\062\034\101\046\063\047\070\054\107" +
    "\057\ufffb\062\ufffb\001\002\000\052\005\uffc7\006\uffc7\015" +
    "\uffc7\017\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7" +
    "\026\uffc7\027\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\046" +
    "\uffc7\047\uffc7\054\uffc7\057\uffc7\062\uffc7\001\002\000\032" +
    "\005\103\006\104\015\105\023\074\026\102\031\066\032" +
    "\106\033\062\034\101\046\063\047\070\054\107\001\002" +
    "\000\052\005\uffc9\006\uffc9\015\uffc9\017\uffc9\021\uffc9\022" +
    "\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\031\uffc9" +
    "\032\uffc9\033\uffc9\034\uffc9\046\uffc9\047\uffc9\054\uffc9\057" +
    "\uffc9\062\uffc9\001\002\000\052\005\uffc8\006\uffc8\015\uffc8" +
    "\017\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026" +
    "\uffc8\027\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\046\uffc8" +
    "\047\uffc8\054\uffc8\057\uffc8\062\uffc8\001\002\000\004\054" +
    "\333\001\002\000\052\005\103\006\104\015\105\017\244" +
    "\021\246\022\251\023\074\024\240\025\243\026\102\027" +
    "\235\031\066\032\106\033\062\034\101\046\063\047\070" +
    "\054\107\057\ufffc\062\ufffc\001\002\000\052\005\uffc6\006" +
    "\uffc6\015\uffc6\017\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6" +
    "\025\uffc6\026\uffc6\027\uffc6\031\uffc6\032\uffc6\033\uffc6\034" +
    "\uffc6\046\uffc6\047\uffc6\054\uffc6\057\uffc6\062\uffc6\001\002" +
    "\000\006\003\323\031\324\001\002\000\006\003\307\054" +
    "\310\001\002\000\052\005\ufff9\006\ufff9\015\ufff9\017\ufff9" +
    "\021\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027" +
    "\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\046\ufff9\047\ufff9" +
    "\054\ufff9\057\ufff9\062\ufff9\001\002\000\006\003\277\054" +
    "\300\001\002\000\052\005\uffcd\006\uffcd\015\uffcd\017\uffcd" +
    "\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027" +
    "\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\046\uffcd\047\uffcd" +
    "\054\uffcd\057\uffcd\062\uffcd\001\002\000\004\061\274\001" +
    "\002\000\006\003\256\054\257\001\002\000\052\005\uffca" +
    "\006\uffca\015\uffca\017\uffca\021\uffca\022\uffca\023\uffca\024" +
    "\uffca\025\uffca\026\uffca\027\uffca\031\uffca\032\uffca\033\uffca" +
    "\034\uffca\046\uffca\047\uffca\054\uffca\057\uffca\062\uffca\001" +
    "\002\000\052\005\uffcc\006\uffcc\015\uffcc\017\uffcc\021\uffcc" +
    "\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\031" +
    "\uffcc\032\uffcc\033\uffcc\034\uffcc\046\uffcc\047\uffcc\054\uffcc" +
    "\057\uffcc\062\uffcc\001\002\000\052\005\uffcb\006\uffcb\015" +
    "\uffcb\017\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb" +
    "\026\uffcb\027\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\046" +
    "\uffcb\047\uffcb\054\uffcb\057\uffcb\062\uffcb\001\002\000\006" +
    "\057\ufffd\062\ufffd\001\002\000\004\057\273\001\002\000" +
    "\004\004\260\001\002\000\020\007\045\010\052\013\043" +
    "\014\050\030\177\031\044\054\053\001\002\000\032\005" +
    "\103\006\104\015\105\023\074\026\102\031\066\032\106" +
    "\033\062\034\101\046\063\047\070\054\107\001\002\000" +
    "\004\060\263\001\002\000\032\005\103\006\104\015\105" +
    "\023\074\026\102\031\066\032\106\033\062\034\101\046" +
    "\063\047\070\054\107\001\002\000\004\055\265\001\002" +
    "\000\004\056\266\001\002\000\056\004\013\005\ufff7\006" +
    "\ufff7\011\016\015\ufff7\017\ufff7\021\ufff7\022\ufff7\023\ufff7" +
    "\024\ufff7\025\ufff7\026\ufff7\027\ufff7\031\ufff7\032\ufff7\033" +
    "\ufff7\034\ufff7\046\ufff7\047\ufff7\054\ufff7\057\ufff7\065\015" +
    "\001\002\000\004\057\270\001\002\000\052\005\uffbf\006" +
    "\uffbf\015\uffbf\017\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf" +
    "\025\uffbf\026\uffbf\027\uffbf\031\uffbf\032\uffbf\033\uffbf\034" +
    "\uffbf\046\uffbf\047\uffbf\054\uffbf\057\uffbf\062\uffbf\001\002" +
    "\000\004\031\272\001\002\000\004\061\210\001\002\000" +
    "\052\005\uffbe\006\uffbe\015\uffbe\017\uffbe\021\uffbe\022\uffbe" +
    "\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\031\uffbe\032" +
    "\uffbe\033\uffbe\034\uffbe\046\uffbe\047\uffbe\054\uffbe\057\uffbe" +
    "\062\uffbe\001\002\000\032\005\103\006\104\015\105\023" +
    "\074\026\102\031\066\032\106\033\062\034\101\046\063" +
    "\047\070\054\107\001\002\000\004\060\276\001\002\000" +
    "\054\005\uffc5\006\uffc5\015\uffc5\017\uffc5\021\uffc5\022\uffc5" +
    "\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\031\uffc5\032" +
    "\uffc5\033\uffc5\034\uffc5\046\uffc5\047\uffc5\054\uffc5\055\uffc5" +
    "\057\uffc5\062\uffc5\001\002\000\004\057\306\001\002\000" +
    "\032\005\103\006\104\015\105\023\074\026\102\031\066" +
    "\032\106\033\062\034\101\046\063\047\070\054\107\001" +
    "\002\000\004\055\302\001\002\000\004\056\303\001\002" +
    "\000\056\004\013\005\ufff7\006\ufff7\011\016\015\ufff7\017" +
    "\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7" +
    "\027\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7\046\ufff7\047" +
    "\ufff7\054\ufff7\057\ufff7\065\015\001\002\000\004\057\305" +
    "\001\002\000\052\005\uffc1\006\uffc1\015\uffc1\017\uffc1\021" +
    "\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1" +
    "\031\uffc1\032\uffc1\033\uffc1\034\uffc1\046\uffc1\047\uffc1\054" +
    "\uffc1\057\uffc1\062\uffc1\001\002\000\052\005\uffc0\006\uffc0" +
    "\015\uffc0\017\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025" +
    "\uffc0\026\uffc0\027\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0" +
    "\046\uffc0\047\uffc0\054\uffc0\057\uffc0\062\uffc0\001\002\000" +
    "\004\057\322\001\002\000\032\005\103\006\104\015\105" +
    "\023\074\026\102\031\066\032\106\033\062\034\101\046" +
    "\063\047\070\054\107\001\002\000\004\055\312\001\002" +
    "\000\004\056\313\001\002\000\056\004\013\005\ufff7\006" +
    "\ufff7\011\016\015\ufff7\017\ufff7\021\ufff7\022\ufff7\023\ufff7" +
    "\024\ufff7\025\ufff7\026\ufff7\027\ufff7\031\ufff7\032\ufff7\033" +
    "\ufff7\034\ufff7\046\ufff7\047\ufff7\054\ufff7\057\ufff7\065\015" +
    "\001\002\000\004\057\315\001\002\000\054\005\uffc4\006" +
    "\uffc4\015\uffc4\017\uffc4\020\316\021\uffc4\022\uffc4\023\uffc4" +
    "\024\uffc4\025\uffc4\026\uffc4\027\uffc4\031\uffc4\032\uffc4\033" +
    "\uffc4\034\uffc4\046\uffc4\047\uffc4\054\uffc4\057\uffc4\062\uffc4" +
    "\001\002\000\004\056\317\001\002\000\056\004\013\005" +
    "\ufff7\006\ufff7\011\016\015\ufff7\017\ufff7\021\ufff7\022\ufff7" +
    "\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\031\ufff7\032" +
    "\ufff7\033\ufff7\034\ufff7\046\ufff7\047\ufff7\054\ufff7\057\ufff7" +
    "\065\015\001\002\000\004\057\321\001\002\000\052\005" +
    "\uffc3\006\uffc3\015\uffc3\017\uffc3\021\uffc3\022\uffc3\023\uffc3" +
    "\024\uffc3\025\uffc3\026\uffc3\027\uffc3\031\uffc3\032\uffc3\033" +
    "\uffc3\034\uffc3\046\uffc3\047\uffc3\054\uffc3\057\uffc3\062\uffc3" +
    "\001\002\000\052\005\uffc2\006\uffc2\015\uffc2\017\uffc2\021" +
    "\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2" +
    "\031\uffc2\032\uffc2\033\uffc2\034\uffc2\046\uffc2\047\uffc2\054" +
    "\uffc2\057\uffc2\062\uffc2\001\002\000\004\060\331\001\002" +
    "\000\004\054\325\001\002\000\034\005\103\006\104\015" +
    "\105\023\074\026\102\031\066\032\106\033\062\034\101" +
    "\046\063\047\070\054\107\055\uffb8\001\002\000\004\055" +
    "\327\001\002\000\004\060\330\001\002\000\052\005\uffbb" +
    "\006\uffbb\015\uffbb\017\uffbb\021\uffbb\022\uffbb\023\uffbb\024" +
    "\uffbb\025\uffbb\026\uffbb\027\uffbb\031\uffbb\032\uffbb\033\uffbb" +
    "\034\uffbb\046\uffbb\047\uffbb\054\uffbb\057\uffbb\062\uffbb\001" +
    "\002\000\052\005\uffba\006\uffba\015\uffba\017\uffba\021\uffba" +
    "\022\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba\031" +
    "\uffba\032\uffba\033\uffba\034\uffba\046\uffba\047\uffba\054\uffba" +
    "\057\uffba\062\uffba\001\002\000\052\005\ufffa\006\ufffa\015" +
    "\ufffa\017\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa" +
    "\026\ufffa\027\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa\046" +
    "\ufffa\047\ufffa\054\ufffa\057\ufffa\062\ufffa\001\002\000\032" +
    "\005\103\006\104\015\105\023\074\026\102\031\066\032" +
    "\106\033\062\034\101\046\063\047\070\054\107\001\002" +
    "\000\004\055\335\001\002\000\004\060\336\001\002\000" +
    "\052\005\uffbd\006\uffbd\015\uffbd\017\uffbd\021\uffbd\022\uffbd" +
    "\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\031\uffbd\032" +
    "\uffbd\033\uffbd\034\uffbd\046\uffbd\047\uffbd\054\uffbd\057\uffbd" +
    "\062\uffbd\001\002\000\004\060\340\001\002\000\052\005" +
    "\uffbc\006\uffbc\015\uffbc\017\uffbc\021\uffbc\022\uffbc\023\uffbc" +
    "\024\uffbc\025\uffbc\026\uffbc\027\uffbc\031\uffbc\032\uffbc\033" +
    "\uffbc\034\uffbc\046\uffbc\047\uffbc\054\uffbc\057\uffbc\062\uffbc" +
    "\001\002\000\032\005\103\006\104\015\105\023\074\026" +
    "\102\031\066\032\106\033\062\034\101\046\063\047\070" +
    "\054\107\001\002\000\004\060\343\001\002\000\004\057" +
    "\344\001\002\000\014\004\uffd5\011\uffd5\012\uffd5\016\uffd5" +
    "\065\uffd5\001\002\000\016\007\045\010\052\013\043\014" +
    "\050\031\044\054\053\001\002\000\006\055\uffd1\063\uffd1" +
    "\001\002\000\004\057\357\001\002\000\004\054\351\001" +
    "\002\000\020\007\045\010\052\013\043\014\050\031\044" +
    "\054\053\055\uffd2\001\002\000\004\055\353\001\002\000" +
    "\004\056\354\001\002\000\056\004\013\005\ufff7\006\ufff7" +
    "\011\016\015\ufff7\017\ufff7\021\ufff7\022\ufff7\023\ufff7\024" +
    "\ufff7\025\ufff7\026\ufff7\027\ufff7\031\ufff7\032\ufff7\033\ufff7" +
    "\034\ufff7\046\ufff7\047\ufff7\054\ufff7\057\ufff7\065\015\001" +
    "\002\000\004\057\356\001\002\000\014\004\uffd7\011\uffd7" +
    "\012\uffd7\016\uffd7\065\uffd7\001\002\000\014\004\uffd6\011" +
    "\uffd6\012\uffd6\016\uffd6\065\uffd6\001\002\000\006\003\362" +
    "\056\363\001\002\000\004\002\001\001\002\000\004\057" +
    "\366\001\002\000\056\004\013\005\ufff7\006\ufff7\011\016" +
    "\015\ufff7\017\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025" +
    "\ufff7\026\ufff7\027\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7" +
    "\046\ufff7\047\ufff7\054\ufff7\057\ufff7\065\015\001\002\000" +
    "\004\057\365\001\002\000\004\002\uffff\001\002\000\004" +
    "\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\364\000\032\002\016\036\010\037\011\040\004\041" +
    "\005\042\013\046\021\047\022\053\017\054\006\055\020" +
    "\056\003\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\057\360\001\001\000\010\033\213" +
    "\034\046\035\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\033\174\034\046\035\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\036\010\037\011\040\004" +
    "\041\005\042\013\046\021\047\022\053\017\056\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\036\010\037\011\040\004\046\021\047\022\050\031" +
    "\051\032\052\030\053\033\001\001\000\016\036\010\037" +
    "\011\040\004\046\021\047\022\053\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\033\050\034\046\035\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\034\057" +
    "\035\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\033\055\034\046" +
    "\035\045\001\001\000\010\033\053\034\046\035\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\016\071\017" +
    "\077\020\076\021\075\022\074\023\072\024\070\025\066" +
    "\026\064\027\063\001\001\000\010\025\172\026\064\027" +
    "\063\001\001\000\010\025\171\026\064\027\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\025\152\026\064\027\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\025\114\026\064\027" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\025\111\026\064\027" +
    "\063\001\001\000\026\016\107\017\077\020\076\021\075" +
    "\022\074\023\072\024\070\025\066\026\064\027\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\020\116\021\075\022\074\023\072\024\070\025\066" +
    "\026\064\027\063\001\001\000\002\001\001\000\020\021" +
    "\120\022\074\023\072\024\070\025\066\026\064\027\063" +
    "\001\001\000\002\001\001\000\016\022\146\023\072\024" +
    "\070\025\066\026\064\027\063\001\001\000\016\022\145" +
    "\023\072\024\070\025\066\026\064\027\063\001\001\000" +
    "\016\022\144\023\072\024\070\025\066\026\064\027\063" +
    "\001\001\000\016\022\143\023\072\024\070\025\066\026" +
    "\064\027\063\001\001\000\016\022\142\023\072\024\070" +
    "\025\066\026\064\027\063\001\001\000\016\022\127\023" +
    "\072\024\070\025\066\026\064\027\063\001\001\000\002" +
    "\001\001\000\014\023\141\024\070\025\066\026\064\027" +
    "\063\001\001\000\014\023\132\024\070\025\066\026\064" +
    "\027\063\001\001\000\002\001\001\000\012\024\140\025" +
    "\066\026\064\027\063\001\001\000\012\024\137\025\066" +
    "\026\064\027\063\001\001\000\012\024\136\025\066\026" +
    "\064\027\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\016\154\017\077\020\076" +
    "\021\075\022\074\023\072\024\070\025\066\026\064\027" +
    "\063\030\156\031\155\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\016" +
    "\161\017\077\020\076\021\075\022\074\023\072\024\070" +
    "\025\066\026\064\027\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\016\165\017\077" +
    "\020\076\021\075\022\074\023\072\024\070\025\066\026" +
    "\064\027\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\033\177\034\046\035\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\016\202\017\077" +
    "\020\076\021\075\022\074\023\072\024\070\025\066\026" +
    "\064\027\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\016\210\017\077\020\076\021\075\022\074\023\072" +
    "\024\070\025\066\026\064\027\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\033\223\034\046\035\045\043\222\044\221\045\220" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\032\231\036" +
    "\010\037\011\040\004\046\021\047\022\051\232\052\030" +
    "\053\033\001\001\000\002\001\001\000\054\003\254\004" +
    "\240\005\244\006\246\007\252\010\253\011\251\012\235" +
    "\013\236\014\233\015\241\016\247\017\077\020\076\021" +
    "\075\022\074\023\072\024\070\025\066\026\064\027\063" +
    "\001\001\000\002\001\001\000\026\016\336\017\077\020" +
    "\076\021\075\022\074\023\072\024\070\025\066\026\064" +
    "\027\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\005\331\006\246\007\252\010\253" +
    "\011\251\012\235\013\236\014\233\015\241\016\247\017" +
    "\077\020\076\021\075\022\074\023\072\024\070\025\066" +
    "\026\064\027\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\260\001\001\000" +
    "\010\033\270\034\046\035\045\001\001\000\026\016\261" +
    "\017\077\020\076\021\075\022\074\023\072\024\070\025" +
    "\066\026\064\027\063\001\001\000\002\001\001\000\030" +
    "\006\263\016\247\017\077\020\076\021\075\022\074\023" +
    "\072\024\070\025\066\026\064\027\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\032\266\036\010\037" +
    "\011\040\004\046\021\047\022\051\232\052\030\053\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\016\274" +
    "\017\077\020\076\021\075\022\074\023\072\024\070\025" +
    "\066\026\064\027\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\016\300\017\077\020" +
    "\076\021\075\022\074\023\072\024\070\025\066\026\064" +
    "\027\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\032\303\036\010\037\011\040\004\046\021\047\022" +
    "\051\232\052\030\053\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\016\310\017\077\020\076\021\075\022\074\023\072\024" +
    "\070\025\066\026\064\027\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\032\313\036\010\037\011\040" +
    "\004\046\021\047\022\051\232\052\030\053\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\032\317\036\010\037\011\040\004\046\021\047\022" +
    "\051\232\052\030\053\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\016\154\017\077\020\076\021\075\022" +
    "\074\023\072\024\070\025\066\026\064\027\063\030\325" +
    "\031\155\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\016\333\017\077\020\076\021\075\022\074\023\072\024" +
    "\070\025\066\026\064\027\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\016\341\017\077\020\076\021\075" +
    "\022\074\023\072\024\070\025\066\026\064\027\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\033\223\034\046\035\045\045\345\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\033\223\034\046\035\045\043\351\044\221\045\220\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\032\354" +
    "\036\010\037\011\040\004\046\021\047\022\051\232\052" +
    "\030\053\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\032\363\036\010\037\011\040\004" +
    "\046\021\047\022\051\232\052\030\053\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programa ::= Declaraciones_Ini_Vac Main 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Programa",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Main ::= MAIN LLABRE Bloque LLCIERRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Main",45, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Main ::= MAIN error LLCIERRA 
            {
              Object RESULT =null;
		TokenValue l = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 System.out.println("FILA " + l.fila + ", COLUMNA " + l.columna + ": Declaracion de main incorrecta."); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Main",45, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Bloque ::= Lista_Declaraciones_Vac Lista_Instrucciones_Vac 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Bloque",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Lista_Instrucciones_Vac ::= Lista_Instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Lista_Instrucciones_Vac",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Lista_Instrucciones_Vac ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Lista_Instrucciones_Vac",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Lista_Instrucciones ::= Lista_Instrucciones Instruccion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Lista_Instrucciones",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Lista_Instrucciones ::= Instruccion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Lista_Instrucciones",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Lista_Declaraciones_Vac ::= Lista_Declaraciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Lista_Declaraciones_Vac",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Lista_Declaraciones_Vac ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Lista_Declaraciones_Vac",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Lista_Declaraciones ::= Lista_Declaraciones Declaracion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Lista_Declaraciones",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Lista_Declaraciones ::= Declaracion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Lista_Declaraciones",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Declaraciones_Ini_Vac ::= Declaraciones_Ini 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaraciones_Ini_Vac",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Declaraciones_Ini_Vac ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaraciones_Ini_Vac",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Declaraciones_Ini ::= Declaraciones_Ini Iniciales 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaraciones_Ini",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Declaraciones_Ini ::= Iniciales 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaraciones_Ini",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Iniciales ::= Dec_Fun 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Iniciales",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Iniciales ::= Dec_Void 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Iniciales",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Iniciales ::= Declaracion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Iniciales",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Declaracion ::= Dec_Tipo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaracion",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Declaracion ::= Dec_Struct 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaracion",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Declaracion ::= Dec_Var 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaracion",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Dec_Tipo ::= TYPE IDEN ASIGNACION T0 PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Dec_Tipo",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Dec_Tipo ::= TYPE error PUNTOYCOMA 
            {
              Object RESULT =null;
		TokenValue p = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 System.out.println("FILA " + p.fila + ", COLUMNA " + p.columna + ": Declaracion de tipo incorrecta."); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Dec_Tipo",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Dec_Struct ::= STALINTRUCT IDEN LLABRE CuerpoStruct LLCIERRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Dec_Struct",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Dec_Struct ::= STALINTRUCT error LLCIERRA 
            {
              Object RESULT =null;
		TokenValue l = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 System.out.println("FILA " + l.fila + ", COLUMNA " + l.columna + ": Declaracion de struct incorrecta."); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Dec_Struct",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CuerpoStruct ::= Lista_Declaraciones_Vac 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CuerpoStruct",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // T0 ::= POINTER T0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("T0",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // T0 ::= T1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("T0",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // T1 ::= GUEVARRAY T1 CABRE Expr CCIERRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("T1",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // T1 ::= PABRE T0 PCIERRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("T1",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // T1 ::= IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("T1",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // T1 ::= T2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("T1",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // T2 ::= LENINT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("T2",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // T2 ::= BOOLSHEVIK 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("T2",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Dec_Var ::= Dec_Var_Vacia 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Dec_Var",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Dec_Var ::= Dec_Var_Ini 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Dec_Var",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Dec_Var ::= VAR error PUNTOYCOMA 
            {
              Object RESULT =null;
		TokenValue p = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 System.out.println("FILA " + p.fila + ", COLUMNA " + p.columna + ": Declaracion de variable incorrecta."); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Dec_Var",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Dec_Var_Vacia ::= VAR T0 IDEN PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Dec_Var_Vacia",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Dec_Var_Ini ::= VAR T0 IDEN ASIGNACION Expr PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Dec_Var_Ini",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Dec_Var_Ini ::= VAR CONST T0 IDEN ASIGNACION Expr PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Dec_Var_Ini",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Dec_Void ::= FUN VOID IDEN PABRE Lista_Argumentos_Vac PCIERRA LLABRE Bloque LLCIERRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Dec_Void",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Dec_Void ::= FUN VOID error LLCIERRA 
            {
              Object RESULT =null;
		TokenValue l = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 System.out.println("FILA " + l.fila + ", COLUMNA " + l.columna + ": Declaracion de funcion incorrecta."); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Dec_Void",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Dec_Fun ::= FUN T0 IDEN PABRE Lista_Argumentos_Vac PCIERRA LLABRE Bloque RETURN Expr PUNTOYCOMA LLCIERRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Dec_Fun",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Dec_Fun ::= FUN error LLCIERRA 
            {
              Object RESULT =null;
		TokenValue l = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 System.out.println("FILA " + l.fila + ", COLUMNA " + l.columna + ": Declaracion de funcion incorrecta."); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Dec_Fun",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Lista_Argumentos_Vac ::= Lista_Argumentos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Lista_Argumentos_Vac",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Lista_Argumentos_Vac ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Lista_Argumentos_Vac",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Lista_Argumentos ::= Lista_Argumentos COMA Argumento 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Lista_Argumentos",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Lista_Argumentos ::= Argumento 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Lista_Argumentos",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Argumento ::= T0 IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Argumento",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Argumento ::= T0 REF IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Argumento",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Instruccion ::= InsAsig 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Instruccion ::= InsIf 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Instruccion ::= InsIfElse 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Instruccion ::= InsWhile 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Instruccion ::= InsFor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Instruccion ::= InsWrite 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Instruccion ::= InsDelete 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Instruccion ::= InsCall 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // InsAsig ::= Expr ASIGNACION Expr PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsAsig",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // InsIf ::= TROTSKIF PABRE Expr PCIERRA LLABRE Bloque LLCIERRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsIf",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // InsIfElse ::= TROTSKIF PABRE Expr PCIERRA LLABRE Bloque LLCIERRA FIDELSECASTRO LLABRE Bloque LLCIERRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsIfElse",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // InsIfElse ::= TROTSKIF error LLCIERRA 
            {
              Object RESULT =null;
		TokenValue l = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 System.out.println("FILA " + l.fila + ", COLUMNA " + l.columna + ": Instruccion condicional incorrecta."); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsIfElse",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // InsWhile ::= USSWHILE PABRE Expr PCIERRA LLABRE Bloque LLCIERRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsWhile",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // InsWhile ::= USSWHILE error LLCIERRA 
            {
              Object RESULT =null;
		TokenValue l = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 System.out.println("FILA " + l.fila + ", COLUMNA " + l.columna + ": Instruccion USSWhile incorrecta."); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsWhile",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // InsFor ::= FORLETARIAT PABRE Dec_Var_Ini Expr PUNTOYCOMA InsAsig PCIERRA LLABRE Bloque LLCIERRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsFor",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // InsFor ::= FORLETARIAT error LLCIERRA 
            {
              Object RESULT =null;
		TokenValue l = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 System.out.println("FILA " + l.fila + ", COLUMNA " + l.columna + ": Instruccion forLetariat incorrecta."); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsFor",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // InsWrite ::= WRITE PABRE Expr PCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsWrite",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // InsDelete ::= DELETE Expr PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsDelete",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // InsCall ::= CALL IDEN PABRE Lista_Param_Vac PCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsCall",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // InsCall ::= CALL error PUNTOYCOMA 
            {
              Object RESULT =null;
		TokenValue p = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 System.out.println("FILA " + p.fila + ", COLUMNA " + p.columna + ": Llamada a funcion incorrecta."); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsCall",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Lista_Param_Vac ::= Lista_Param 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Lista_Param_Vac",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Lista_Param_Vac ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Lista_Param_Vac",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Lista_Param ::= Lista_Param COMA Expr 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Lista_Param",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Lista_Param ::= Expr 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Lista_Param",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Expr",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E0 ::= E0 OR E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E0 ::= E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E1 ::= E1 AND E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E1 ::= E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E2 ::= E2 IGUAL E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E2 ::= E2 DISTINTO E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E2 ::= E2 MENORIGUAL E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E2 ::= E2 MAYORIGUAL E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E2 ::= E2 MENOR E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E2 ::= E2 MAYOR E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E2 ::= E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E3 ::= E3 MAS E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E3 ::= E3 MENOS E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E3 ::= E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E4 ::= E4 ASTERISCO E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // E4 ::= E4 DIV E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // E4 ::= E4 RESTO E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // E4 ::= E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // E5 ::= MAS E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // E5 ::= MENOS E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // E5 ::= ASTERISCO E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // E5 ::= NEG E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // E5 ::= REF E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // E5 ::= E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // E6 ::= NEW LENINT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // E6 ::= NEW BOOLSHEVIK 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // E6 ::= RED LENINT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // E6 ::= RED BOOLSHEVIK 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // E6 ::= E7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // E7 ::= E7 CABRE Expr CCIERRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // E7 ::= E7 PUNTO IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // E7 ::= E7 FLECHA IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // E7 ::= IDEN PABRE Lista_Param_Vac PCIERRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // E7 ::= E8 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // E8 ::= ENTPOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // E8 ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // E8 ::= NULL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // E8 ::= IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // E8 ::= PABRE Expr PCIERRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

