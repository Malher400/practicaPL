package constructorast;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import alex.TokenValue;
import errors.GestionErroresTiny;

scan with {: return getScanner().next_token(); :};
parser code {: 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
:};
init with {: 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);
:};


terminal  TokenValue VAR, BOOL, ENTPOS, GUEVARRAY, POINTER, STALINTRUCT, MAIN, LENINT,
                      BOOLSHEVIK, NULL, FUN, TROTSKIF, FIDELSECASTRO, USSWHILE, FORLETARIAT, RED,
                      WRITE, CALL, NEW, DELETE, CONST, IDEN, MAS, MENOS, ASTERISCO, DIV, RESTO, IGUAL,
                      MENORIGUAL, MAYORIGUAL, MENOR, MAYOR, AND, OR, NEG, REF, CABRE, CCIERRA, PUNTO,
                      FLECHA, PABRE, PCIERRA, LLABRE, LLCIERRA, PUNTOYCOMA, ASIGNACION, RETURN, COMA,
                      DISTINTO, TYPE, VOID;

non terminal  Programa, Lista_Instrucciones_Vac, Lista_Instrucciones, Instruccion, 
                InsAsig, InsIf, InsIfElse, InsWhile, InsFor, InsWrite, 
                InsDelete, InsCall, Expr, E0, E1, E2, E3, E4, E5, E6, E7, E8,
                Lista_Param_Vac, Lista_Param,  Bloque, T0, T1, T2, Dec_Var, Dec_Var_Vacia, Dec_Var_Ini,
                Dec_Fun, Dec_Void, Lista_Argumentos_Vac, Lista_Argumentos, Argumento, Dec_Tipo, Dec_Struct,
                CuerpoStruct, Lista_Declaraciones_Vac, Lista_Declaraciones, Declaracion, Declaraciones_Ini_Vac,
                Declaraciones_Ini, Iniciales, Main;

Programa ::= Declaraciones_Ini_Vac Main ;

Main ::= MAIN LLABRE Bloque LLCIERRA ;
Main ::= MAIN error LLCIERRA:l
{: System.out.println("FILA " + l.fila + ", COLUMNA " + l.columna + ": Declaracion de main incorrecta."); :};


Bloque ::= Lista_Declaraciones_Vac Lista_Instrucciones_Vac ;

Lista_Instrucciones_Vac ::= Lista_Instrucciones ;
Lista_Instrucciones_Vac ::= ;
Lista_Instrucciones ::= Lista_Instrucciones Instruccion ;
Lista_Instrucciones ::= Instruccion ;

Lista_Declaraciones_Vac ::= Lista_Declaraciones ;
Lista_Declaraciones_Vac ::= ;
Lista_Declaraciones ::= Lista_Declaraciones Declaracion ;
Lista_Declaraciones ::= Declaracion ;

// Delaraciones iniciales
Declaraciones_Ini_Vac ::= Declaraciones_Ini ;
Declaraciones_Ini_Vac ::= ;
Declaraciones_Ini ::= Declaraciones_Ini Iniciales ;
Declaraciones_Ini ::= Iniciales ;
Iniciales ::= Dec_Fun ;
Iniciales ::= Dec_Void ;
Iniciales ::= Declaracion ;

// Declaraciones en bloques 
Declaracion ::= Dec_Tipo ;
Declaracion ::= Dec_Struct ;
Declaracion ::= Dec_Var ;

// Declaracion de Tipos 
Dec_Tipo ::= TYPE IDEN ASIGNACION T0 PUNTOYCOMA ;
Dec_Tipo ::= TYPE error PUNTOYCOMA:p 
{: System.out.println("FILA " + p.fila + ", COLUMNA " + p.columna + ": Declaracion de tipo incorrecta."); :};

// Declaracion de Structs
Dec_Struct ::= STALINTRUCT IDEN LLABRE CuerpoStruct LLCIERRA ;
Dec_Struct ::= STALINTRUCT error LLCIERRA:l
{: System.out.println("FILA " + l.fila + ", COLUMNA " + l.columna + ": Declaracion de struct incorrecta."); :};
CuerpoStruct ::= Lista_Declaraciones_Vac ;

// Tipos 
T0 ::= POINTER T0 ;
T0 ::= T1 ;
T1 ::= GUEVARRAY T1 CABRE Expr CCIERRA ;
T1 ::= PABRE T0 PCIERRA ;
T1 ::= IDEN ;
T1 ::= T2 ;
T2 ::= LENINT ;
T2 ::= BOOLSHEVIK ;

// Declaracion de variables
Dec_Var ::= Dec_Var_Vacia ;
Dec_Var ::= Dec_Var_Ini ;
Dec_Var ::= VAR error PUNTOYCOMA:p
{: System.out.println("FILA " + p.fila + ", COLUMNA " + p.columna + ": Declaracion de variable incorrecta."); :};
Dec_Var_Vacia ::= VAR T0 IDEN PUNTOYCOMA ;
Dec_Var_Ini ::= VAR T0 IDEN ASIGNACION Expr PUNTOYCOMA ;
Dec_Var_Ini ::= VAR CONST T0 IDEN ASIGNACION Expr PUNTOYCOMA ;

// Declaracion de funciones tipo void
Dec_Void ::= FUN VOID IDEN PABRE Lista_Argumentos_Vac PCIERRA LLABRE Bloque LLCIERRA ;
Dec_Void ::= FUN VOID error LLCIERRA:l
{: System.out.println("FILA " + l.fila + ", COLUMNA " + l.columna + ": Declaracion de funcion incorrecta."); :};

// Declaracion de funciones 
Dec_Fun ::= FUN T0 IDEN PABRE Lista_Argumentos_Vac PCIERRA LLABRE Bloque RETURN Expr PUNTOYCOMA LLCIERRA ;
Dec_Fun ::= FUN error LLCIERRA:l 
{: System.out.println("FILA " + l.fila + ", COLUMNA " + l.columna + ": Declaracion de funcion incorrecta."); :};

Lista_Argumentos_Vac ::= Lista_Argumentos ;
Lista_Argumentos_Vac ::= ;
Lista_Argumentos ::= Lista_Argumentos COMA Argumento ;
Lista_Argumentos ::= Argumento ;
Argumento ::= T0 IDEN ;
Argumento ::= T0 REF IDEN ;


// Instrucciones
Instruccion ::= InsAsig ;
Instruccion ::= InsIf ;
Instruccion ::= InsIfElse ;
Instruccion ::= InsWhile ;
Instruccion ::= InsFor ;
Instruccion ::= InsWrite ;
Instruccion ::= InsDelete ;
Instruccion ::= InsCall ;

InsAsig ::= Expr ASIGNACION Expr PUNTOYCOMA ;
InsIf ::= TROTSKIF PABRE Expr PCIERRA LLABRE Bloque LLCIERRA ;
InsIfElse ::= TROTSKIF PABRE Expr PCIERRA LLABRE Bloque LLCIERRA FIDELSECASTRO LLABRE Bloque LLCIERRA ;
InsIfElse ::= TROTSKIF error LLCIERRA:l
{: System.out.println("FILA " + l.fila + ", COLUMNA " + l.columna + ": Instruccion condicional incorrecta."); :};
InsWhile ::= USSWHILE PABRE Expr PCIERRA LLABRE Bloque LLCIERRA ;
InsWhile ::= USSWHILE error LLCIERRA:l 
{: System.out.println("FILA " + l.fila + ", COLUMNA " + l.columna + ": Instruccion USSWhile incorrecta."); :};
InsFor ::= FORLETARIAT PABRE Dec_Var_Ini Expr PUNTOYCOMA InsAsig PCIERRA LLABRE Bloque LLCIERRA ;
InsFor ::= FORLETARIAT error LLCIERRA:l 
{: System.out.println("FILA " + l.fila + ", COLUMNA " + l.columna + ": Instruccion forLetariat incorrecta."); :};
InsWrite ::= WRITE PABRE Expr PCIERRA PUNTOYCOMA ;
InsDelete ::= DELETE Expr PUNTOYCOMA ;
InsCall ::= CALL IDEN PABRE Lista_Param_Vac PCIERRA PUNTOYCOMA ;
InsCall ::= CALL error PUNTOYCOMA:p
{: System.out.println("FILA " + p.fila + ", COLUMNA " + p.columna + ": Llamada a funcion incorrecta."); :};

// Parametros al llamar una funcion
Lista_Param_Vac ::= Lista_Param:list_params ;
   {: RESULT = list_params; :};
Lista_Param_Vac ::= ;
   {: RESULT = new ArrayList<Exp>(); :};
Lista_Param::= Lista_Param:list_params COMA Expr:expr ;
   {: list_params.add(expr); RESULT = list_params; :};
Lista_Param ::= Expr:expr ;
   {: ArrayList<Exp> list_params = new ArrayList<Exp>(); list_params.add(expr);  RESULT = params; :};


// Expresiones 
Expr ::= E0:e0 ;
   {: RESULT = e0; :};

E0 ::= E0:e0 OR E1:e1 ;
   {: RESULT = new ExpOr(e0.getFila(), e0.getColumna(), e0, e1); :};
E0 ::= E1:e1 ;
   {: RESULT = e1; :};

E1 ::= E1:e1 AND E2:e2 ;
   {: RESULT = new ExpAnd(e1.getFila(), e1.getColumna(), e1, e2); :};
E1 ::= E2:e2 ;
   {: RESULT = e2; :};

E2 ::= E2:e2 IGUAL E3:e3 ;
   {: RESULT = new ExpIgual(e2.getFila(), e2.getColumna(), e2, e3); :};
E2 ::= E2:e2 DISTINTO E3:e3 ;
   {: RESULT = new ExpDistinto(e2.getFila(), e2.getColumna(), e2, e3); :};
E2 ::= E2:e2 MENORIGUAL E3:e3 ;
   {: RESULT = new ExpMenIg(e2.getFila(), e2.getColumna(), e2, e3); :};
E2 ::= E2:e2 MAYORIGUAL E3:e3 ;
   {: RESULT = new ExpMayIg(e2.getFila(), e2.getColumna(), e2, e3); :};
E2 ::= E2:e2 MENOR E3:e3 ;
   {: RESULT = new ExpMenor(e2.getFila(), e2.getColumna(), e2, e3); :};
E2 ::= E2:e2 MAYOR E3:e3 ;
   {: RESULT = new ExpMayor(e2.getFila(), e2.getColumna(), e2, e3); :};
E2 ::= E3:e3 ;
   {: RESULT = e3; :};

E3 ::= E3:e3 MAS E4:e4 ;
   {: RESULT = new ExpSuma(e3.getFila(), e3.getColumna(), e3, e4); :};
E3 ::= E3:e3 MENOS E4:e4 ;
   {: RESULT = new ExpResta(e3.getFila(), e3.getColumna(), e3, e4); :};
E3 ::= E4:e4 ;
   {: RESULT = e4; :};

E4 ::= E4:e4 ASTERISCO E5:e5 ;
   {: RESULT = new ExpMult(e4.getFila(), e4.getColumna(), e4, e5); :};
E4 ::= E4:e4 DIV E5:e5 ;
   {: RESULT = new ExpDiv(e4.getFila(), e4.getColumna(), e4, e5); :};
E4 ::= E4:e4 RESTO E5:e5 ;
   {: RESULT = new ExpMod(e4.getFila(), e4.getColumna(), e4, e5); :};
E4 ::= E5:e5 ;
   {: RESULT = e5; :};

E5 ::= MAS E6:e6 ;
   {: RESULT = new ExpPos(e6.getFila(), e6.getColumna(), e6); :};
E5 ::= MENOS E6:e6 ;
   {: RESULT = new ExpNeg(e6.getFila(), e6.getColumna(), e6); :};
E5 ::= ASTERISCO E6:e6 ;
   {: RESULT = new ExpValor(e6.getFila(), e6.getColumna(), e6); :};
E5 ::= NEG E6:e6 ;
   {: RESULT = new ExpNot(e6.getFila(), e6.getColumna(), e6); :};
E5 ::= REF E6:e6 ;
   {: RESULT = new ExpRef(e6.getFila(), e6.getColumna(), e6); :};
E5 ::= E6:e6 ;
   {: RESULT = e6; :};

E6 ::= NEW LENINT ;
E6 ::= NEW BOOLSHEVIK:b ;
E6 ::= RED LENINT ;
E6 ::= RED BOOLSHEVIK ;
E6 ::= E7:e7;
   {: RESULT = e7; :};

E7 ::= E7:e7 CABRE Expr:expr CCIERRA ;
   {: RESULT = new ExpCorchete(e7.getFila(), e7.getColumna(), e7, expr) :};
E7 ::= E7:e7 PUNTO IDEN:iden ;
   {: RESULT = new ExpPunto(e7.getFila(), e7.getColumna(), e7, iden.lexema) :};
E7 ::= E7:e7 FLECHA IDEN:iden ;
   {: RESULT = new ExpFlecha(e7.getFila(), e7.getColumna(), e7, iden.lexema);  :};
E7 ::= E7:e7 PABRE Lista_Param_Vac:params PCIERRA ;
   {: RESULT = new ExpFun(e7.getFila(), e7.getColumna(), e7, params) :};

E7 ::= E8:e8 ; 
   {: RESULT = e8; :};

E8 ::= ENTPOS:ent ;
   {: RESULT = new ExpEntero(ent.fila, ent.columna, ent.lexema); :};
E8 ::= BOOL:bool ;
   {: RESULT = new ExpBooleano(bool.fila, bool.columna, bool.lexema); :};
E8 ::= NULL ;
   {: RESULT = new ExpNull(); :};
E8 ::= IDEN:iden ;
   {: RESULT = new ExpIden(iden.fila, iden.columna, iden.lexema); :};
E8 ::= PABRE Expr:exp PCIERRA ;
   {: RESULT = exp; :};


