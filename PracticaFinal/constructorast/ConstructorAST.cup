package constructorast;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import alex.TokenValue;
import errors.GestionErroresTiny;
import ast.*;
import java.util.*;

scan with {: return getScanner().next_token(); :};
parser code {: 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
:};
init with {: 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);
:};


terminal  TokenValue VAR, BOOL, ENTPOS, GUEVARRAY, POINTER, STALINTRUCT, MAIN, LENINT,
                      BOOLSHEVIK, NULL, FUN, TROTSKIF, FIDELSECASTRO, USSWHILE, FORLETARIAT, RED,
                      WRITE, CALL, NEW, DELETE, CONST, IDEN, MAS, MENOS, ASTERISCO, DIV, RESTO, IGUAL,
                      MENORIGUAL, MAYORIGUAL, MENOR, MAYOR, AND, OR, NEG, REF, CABRE, CCIERRA, PUNTO,
                      FLECHA, PABRE, PCIERRA, LLABRE, LLCIERRA, PUNTOYCOMA, ASIGNACION, RETURN, COMA,
                      DISTINTO, TYPE, VOID;

non terminal  Programa, Lista_Instrucciones_Vac, Lista_Instrucciones, Instruccion, 
                InsAsig, InsIf, InsIfElse, InsWhile, InsFor, InsWrite, 
                InsDelete, InsCall, Expr, E0, E1, E2, E3, E4, E5, E6, E7, E8,
                Lista_Param_Vac, Lista_Param,  Bloque, T0, T1, T2, Dec_Var, Dec_Var_Vacia, Dec_Var_Ini,
                Dec_Fun, Dec_Void, Lista_Argumentos_Vac, Lista_Argumentos, Argumento, Dec_Tipo, Dec_Struct,
                CuerpoStruct, Lista_Declaraciones_Vac, Lista_Declaraciones, Declaracion, Declaraciones_Ini_Vac,
                Declaraciones_Ini, Inicial, Main;

Programa ::= Declaraciones_Ini_Vac:decs Main:m ;
   {: RESULT = new Program(m.fila(), m.columna(), decs, m); :};

Main ::= MAIN LLABRE Bloque:b LLCIERRA ; // Gestionamos el main como una funcion void sin argumentos
   {: RESULT = new DecMain(b.fila(), b.columna(), "main", new TypeFunVoid(new ArrayList<Dec> ()), new ArrayList<Dec> (), b); :};
Main ::= MAIN error LLCIERRA:l
   {: System.out.println("FILA " + l.fila + ", COLUMNA " + l.columna + ": Declaracion de main incorrecta."); :};


Bloque ::= Lista_Declaraciones_Vac:decs Lista_Instrucciones_Vac:ins ;
   {: RESULT = new Bloque(decs,ins); :}; 

Lista_Instrucciones_Vac ::= Lista_Instrucciones:ins ;
   {: RESULT = ins; :};
Lista_Instrucciones_Vac ::= ;
   {: RESULT = new ArrayList<Ins>(); :};
Lista_Instrucciones ::= Lista_Instrucciones:ins Instruccion:i ;
   {: ins.add(i); RESULT = ins; :};
Lista_Instrucciones ::= Instruccion:i ;
   {: ArrayList<Ins> ins = new ArrayList<Ins>(); ins.add(i); RESULT = ins; :};

Lista_Declaraciones_Vac ::= Lista_Declaraciones:decs ;
   {: RESULT = decs; :};
Lista_Declaraciones_Vac ::= ;
   {: RESULT = new ArrayList<Dec>(); :};
Lista_Declaraciones ::= Lista_Declaraciones:decs Declaracion:d ;
   {: decs.add(d); RESULT = decs; :};
Lista_Declaraciones ::= Declaracion:d ;
   {: ArrayList<Dec> decs = new ArrayList<Dec>(); decs.add(d); RESULT = decs; :};

// Delaraciones iniciales
Declaraciones_Ini_Vac ::= Declaraciones_Ini:decs ;
   {: RESULT = decs; :};
Declaraciones_Ini_Vac ::= ;
   {: RESULT = new ArrayList<Dec> (); :};
Declaraciones_Ini ::= Declaraciones_Ini:decs Inicial:ini ;
   {: decs.add(ini); RESULT = decs; :};
Declaraciones_Ini ::= Inicial:ini ;
   {: ArrayList<Dec> decs = new ArrayList<Dec>(); decs.add(ini); RESULT = decs; :};
Inicial ::= Dec_Fun:d ;
    {: RESULT = d; :};
Inicial ::= Dec_Void:d ;
    {: RESULT = d; :};
Inicial ::= Declaracion:d ;
    {: RESULT = d; :};

// Declaraciones en bloques 
Declaracion ::= Dec_Tipo:d ;
   {: RESULT = d; :};
Declaracion ::= Dec_Struct:d ;
   {: RESULT = d; :};
Declaracion ::= Dec_Var:d ;
   {: RESULT = d; :};

// Declaracion de Tipos 
Dec_Tipo ::= TYPE IDEN:iden ASIGNACION T0:t0 PUNTOYCOMA ;
   {: RESULT = new DecType(iden.fila, iden.columna, iden.lexema, t0); :};
Dec_Tipo ::= TYPE error PUNTOYCOMA:p 
   {: System.out.println("FILA " + p.fila + ", COLUMNA " + p.columna + ": Declaracion de tipo incorrecta."); :};

// Declaracion de Structs
Dec_Struct ::= STALINTRUCT IDEN:iden LLABRE CuerpoStruct:decs LLCIERRA ;
    {: RESULT = new DecStruct(iden.fila, iden.columna, iden.lexema, new TypeStruct(decs), decs); :};
Dec_Struct ::= STALINTRUCT error LLCIERRA:l
   {: System.out.println("FILA " + l.fila + ", COLUMNA " + l.columna + ": Declaracion de struct incorrecta."); :};
CuerpoStruct ::= Lista_Declaraciones_Vac:decs ;
   {: RESULT = decs; :};

// Tipos 
T0 ::= POINTER T0:t0 ;
   {: RESULT = new TypePointer(t0); :};
T0 ::= T1:t1 ;
    {: RESULT = t1; :};
T1 ::= GUEVARRAY T1:t1 CABRE Expr:e CCIERRA ;
   {: RESULT = new TypeArray(t1.fila(), t1.columna(), t1, e); :};
T1 ::= PABRE T0:t0 PCIERRA ;
    {: RESULT = t0; :};
T1 ::= IDEN:iden ;
    {: RESULT = new TypeIden(iden.fila, iden.columna, iden.lexema); :};
T1 ::= T2:t2 ;
    {: RESULT = t2; :};
T2 ::= LENINT ;
    {: RESULT = new TypeEnt(); :};
T2 ::= BOOLSHEVIK ;
    {: RESULT = new TypeBool(); :};

// Declaracion de variables
Dec_Var ::= Dec_Var_Vacia:d ;
   {: RESULT = d; :};
Dec_Var ::= Dec_Var_Ini:d ;
   {: RESULT = d; :};
Dec_Var ::= VAR error PUNTOYCOMA:p
   {: System.out.println("FILA " + p.fila + ", COLUMNA " + p.columna + ": Declaracion de variable incorrecta."); :};
Dec_Var_Vacia ::= VAR T0:t0 IDEN:iden PUNTOYCOMA ;
   {: RESULT = new DecVar(t0.fila(), t0.columna(), iden.lexema, t0); :};
Dec_Var_Ini ::= VAR T0:t0 IDEN:iden ASIGNACION Expr:e PUNTOYCOMA ;
   {: RESULT = new DecVarIni(t0.fila(), t0.columna(), iden.lexema, t0, 
   new InsAsig(iden.fila, iden.columna, new ExpIden(iden.fila, iden.columna, iden.lexema), e)); :};
Dec_Var_Ini ::= VAR CONST T0:t0 IDEN:iden ASIGNACION Expr:e PUNTOYCOMA ;
   {: RESULT = new DecVarConst(t0.fila(), t0.columna(), iden.lexema, t0, 
   new InsAsig(iden.fila, iden.columna, new ExpIden(iden.fila, iden.columna, iden.lexema), e)); :};

// Declaracion de funciones tipo void
Dec_Void ::= FUN VOID IDEN:iden PABRE Lista_Argumentos_Vac:list_args PCIERRA LLABRE Bloque:b LLCIERRA ;
   {: RESULT = new DecFunVoid(iden.fila, iden.columna, iden.lexema, new TypeFunVoid(list_args), list_args, b); :};
Dec_Void ::= FUN VOID error LLCIERRA:l
   {: System.out.println("FILA " + l.fila + ", COLUMNA " + l.columna + ": Declaracion de funcion incorrecta."); :};

// Declaracion de funciones 
Dec_Fun ::= FUN T0:t0 IDEN:iden PABRE Lista_Argumentos_Vac:list_args PCIERRA LLABRE Bloque:b RETURN Expr:e PUNTOYCOMA LLCIERRA ;
   {: RESULT = new DecFun(t0.fila(), t0.columna(), iden.lexema, new TypeFun(t0, list_args), t0, list_args, b, e); :};
Dec_Fun ::= FUN error LLCIERRA:l 
   {: System.out.println("FILA " + l.fila + ", COLUMNA " + l.columna + ": Declaracion de funcion incorrecta."); :};

Lista_Argumentos_Vac ::= Lista_Argumentos:list_args ;
   {: RESULT = list_args; :};
Lista_Argumentos_Vac ::= ;
   {: RESULT = new ArrayList<Dec> (); :};
Lista_Argumentos ::= Lista_Argumentos:list_args COMA Argumento:arg ;
   {: list_args.add(arg); RESULT = list_args; :};
Lista_Argumentos ::= Argumento:arg ;
   {: ArrayList<Dec> list_args (); list_args.add(arg); RESULT = list_args; :};
Argumento ::= T0:t0 IDEN:iden ;
   {: RESULT = new DecArg(t0.fila(), t0.columna(), iden.lexema, t0); :};
Argumento ::= T0:t0 REF IDEN:iden ;
   {: RESULT = new DecArg(t0.fila(), t0.columna(), iden.lexema, new TypeRef(t0)); :};


// Instrucciones
Instruccion ::= InsAsig:i ;
   {: RESULT = i; :}; 
Instruccion ::= InsIf:i ;
   {: RESULT = i; :}; 
Instruccion ::= InsIfElse:i ;
   {: RESULT = i; :}; 
Instruccion ::= InsWhile:i ;
   {: RESULT = i; :}; 
Instruccion ::= InsFor:i ;
   {: RESULT = i; :}; 
Instruccion ::= InsWrite:i ;
   {: RESULT = i; :}; 
Instruccion ::= InsDelete:i ;
   {: RESULT = i; :}; 
Instruccion ::= InsCall:i ;
   {: RESULT = i; :}; 

InsAsig ::= Expr:e1 ASIGNACION Expr:e2 PUNTOYCOMA ;
   {: RESULT = new InsAsig(e1.getFila(),e1.getColumna(),e1,e2); :};
InsIf ::= TROTSKIF PABRE Expr:e PCIERRA LLABRE Bloque:b LLCIERRA ;
   {: RESULT = new InsIf(e.getFila(),e.getColumna(),e,b); :};
InsIfElse ::= TROTSKIF PABRE Expr:e PCIERRA LLABRE Bloque:b1 LLCIERRA FIDELSECASTRO LLABRE Bloque:b2 LLCIERRA ;
   {: RESULT = new InsIf_Else(e.getFila(),e.getColumna(),e,b1,b2); :};
InsIfElse ::= TROTSKIF error LLCIERRA:l
   {: System.out.println("FILA " + l.fila + ", COLUMNA " + l.columna + ": Instruccion condicional incorrecta."); :};
InsWhile ::= USSWHILE PABRE Expr:e PCIERRA LLABRE Bloque:b LLCIERRA ;
   {: RESULT = new InsWhile(e.getFila(),e.getColumna(),e,b); :};
InsWhile ::= USSWHILE error LLCIERRA:l 
   {: System.out.println("FILA " + l.fila + ", COLUMNA " + l.columna + ": Instruccion USSWhile incorrecta."); :};
InsFor ::= FORLETARIAT PABRE Dec_Var_Ini:dec Expr:e PUNTOYCOMA InsAsig:asig PCIERRA LLABRE Bloque:b LLCIERRA ;
    {: RESULT = new InsFor(dec.getFila(),dec.getColumna(),dec,e,asig,b); :};
InsFor ::= FORLETARIAT error LLCIERRA:l 
   {: System.out.println("FILA " + l.fila + ", COLUMNA " + l.columna + ": Instruccion forLetariat incorrecta."); :};
InsWrite ::= WRITE PABRE Expr:e PCIERRA PUNTOYCOMA ;
   {: RESULT = new InsWrite(e.getFila(),e.getColumna(),e); :};
InsDelete ::= DELETE Expr:e PUNTOYCOMA ;
   {: RESULT = new InsDelete(e.getFila(),e.getColumna(),e); :};
InsCall ::= CALL E7:e7 PABRE Lista_Param_Vac:list_params PCIERRA PUNTOYCOMA ;
   {: RESULT = new InsCall(e7.getFila(),e7.getColumna(), new ExpFun(e7.getFila(), e7.getColumna(), e7, list_params)); :};
InsCall ::= CALL error PUNTOYCOMA:p
   {: System.out.println("FILA " + p.fila + ", COLUMNA " + p.columna + ": Llamada a funcion incorrecta."); :};

// Parametros al llamar una funcion
Lista_Param_Vac ::= Lista_Param:list_params ;
   {: RESULT = list_params; :};
Lista_Param_Vac ::= ;
   {: RESULT = new ArrayList<Exp>(); :};
Lista_Param::= Lista_Param:list_params COMA Expr:expr ;
   {: list_params.add(expr); RESULT = list_params; :};
Lista_Param ::= Expr:expr ;
   {: ArrayList<Exp> list_params = new ArrayList<Exp>(); list_params.add(expr);  RESULT = list_params; :};


// Expresiones 
Expr ::= E0:e0 ;
   {: RESULT = e0; :};

E0 ::= E0:e0 OR E1:e1 ;
   {: RESULT = new ExpOr(e0.getFila(), e0.getColumna(), e0, e1); :};
E0 ::= E1:e1 ;
   {: RESULT = e1; :};

E1 ::= E1:e1 AND E2:e2 ;
   {: RESULT = new ExpAnd(e1.getFila(), e1.getColumna(), e1, e2); :};
E1 ::= E2:e2 ;
   {: RESULT = e2; :};

E2 ::= E2:e2 IGUAL E3:e3 ;
   {: RESULT = new ExpIgual(e2.getFila(), e2.getColumna(), e2, e3); :};
E2 ::= E2:e2 DISTINTO E3:e3 ;
   {: RESULT = new ExpDistinto(e2.getFila(), e2.getColumna(), e2, e3); :};
E2 ::= E2:e2 MENORIGUAL E3:e3 ;
   {: RESULT = new ExpMenIg(e2.getFila(), e2.getColumna(), e2, e3); :};
E2 ::= E2:e2 MAYORIGUAL E3:e3 ;
   {: RESULT = new ExpMayIg(e2.getFila(), e2.getColumna(), e2, e3); :};
E2 ::= E2:e2 MENOR E3:e3 ;
   {: RESULT = new ExpMenor(e2.getFila(), e2.getColumna(), e2, e3); :};
E2 ::= E2:e2 MAYOR E3:e3 ;
   {: RESULT = new ExpMayor(e2.getFila(), e2.getColumna(), e2, e3); :};
E2 ::= E3:e3 ;
   {: RESULT = e3; :};

E3 ::= E3:e3 MAS E4:e4 ;
   {: RESULT = new ExpSuma(e3.getFila(), e3.getColumna(), e3, e4); :};
E3 ::= E3:e3 MENOS E4:e4 ;
   {: RESULT = new ExpResta(e3.getFila(), e3.getColumna(), e3, e4); :};
E3 ::= E4:e4 ;
   {: RESULT = e4; :};

E4 ::= E4:e4 ASTERISCO E5:e5 ;
   {: RESULT = new ExpMult(e4.getFila(), e4.getColumna(), e4, e5); :};
E4 ::= E4:e4 DIV E5:e5 ;
   {: RESULT = new ExpDiv(e4.getFila(), e4.getColumna(), e4, e5); :};
E4 ::= E4:e4 RESTO E5:e5 ;
   {: RESULT = new ExpMod(e4.getFila(), e4.getColumna(), e4, e5); :};
E4 ::= E5:e5 ;
   {: RESULT = e5; :};

E5 ::= MAS E6:e6 ;
   {: RESULT = new ExpPos(e6.getFila(), e6.getColumna(), e6); :};
E5 ::= MENOS E6:e6 ;
   {: RESULT = new ExpNeg(e6.getFila(), e6.getColumna(), e6); :};
E5 ::= ASTERISCO E6:e6 ;
   {: RESULT = new ExpValor(e6.getFila(), e6.getColumna(), e6); :};
E5 ::= NEG E6:e6 ;
   {: RESULT = new ExpNot(e6.getFila(), e6.getColumna(), e6); :};
E5 ::= REF E6:e6 ;
   {: RESULT = new ExpRef(e6.getFila(), e6.getColumna(), e6); :};
E5 ::= E6:e6 ;
   {: RESULT = e6; :};

E6 ::= NEW:n T0:tipo ;
   {: RESULT = new ExpNew(n.getFila(), n.getColumna(), tipo); :};
E6 ::= RED:r T0:tipo ;
   {: RESULT = new ExpRead(r.getFila(), r.getColumna(), tipo); :};
E6 ::= E7:e7;
   {: RESULT = e7; :};

E7 ::= E7:e7 CABRE Expr:expr CCIERRA ;
   {: RESULT = new ExpCorchete(e7.getFila(), e7.getColumna(), e7, expr) :};
E7 ::= E7:e7 PUNTO IDEN:iden ;
   {: RESULT = new ExpPunto(e7.getFila(), e7.getColumna(), e7, iden.lexema) :};
E7 ::= E7:e7 FLECHA IDEN:iden ;
   {: RESULT = new ExpFlecha(e7.getFila(), e7.getColumna(), e7, iden.lexema);  :};
E7 ::= E7:e7 PABRE Lista_Param_Vac:params PCIERRA ;
   {: RESULT = new ExpFun(e7.getFila(), e7.getColumna(), e7, params) :};

E7 ::= E8:e8 ; 
   {: RESULT = e8; :};

E8 ::= ENTPOS:ent ;
   {: RESULT = new ExpEntero(ent.fila, ent.columna, ent.lexema); :};
E8 ::= BOOL:bool ;
   {: RESULT = new ExpBooleano(bool.fila, bool.columna, bool.lexema); :};
E8 ::= NULL ;
   {: RESULT = new ExpNull(); :};
E8 ::= IDEN:iden ;
   {: RESULT = new ExpIden(iden.fila, iden.columna, iden.lexema); :};
E8 ::= PABRE Expr:exp PCIERRA ;
   {: RESULT = exp; :};


