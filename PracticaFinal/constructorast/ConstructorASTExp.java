
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Wed Jan 08 09:13:03 CET 2025
//----------------------------------------------------

package constructorast;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import alex.TokenValue;
import errors.GestionErroresTiny;
import ast.*;
import java.util.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Wed Jan 08 09:13:03 CET 2025
  */
public class ConstructorASTExp extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConstructorASTExp() {super();}

  /** Constructor which sets the default scanner. */
  public ConstructorASTExp(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructorASTExp(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\173\000\002\002\004\000\002\002\004\000\002\016" +
    "\006\000\002\016\005\000\002\017\004\000\002\013\003" +
    "\000\002\013\002\000\002\012\004\000\002\012\003\000" +
    "\002\003\003\000\002\003\002\000\002\004\004\000\002" +
    "\004\003\000\002\005\003\000\002\005\002\000\002\006" +
    "\004\000\002\006\003\000\002\050\003\000\002\050\003" +
    "\000\002\050\003\000\002\047\003\000\002\047\003\000" +
    "\002\047\003\000\002\056\007\000\002\056\005\000\002" +
    "\057\007\000\002\057\005\000\002\011\003\000\002\044" +
    "\004\000\002\044\003\000\002\045\007\000\002\045\005" +
    "\000\002\045\003\000\002\045\003\000\002\046\003\000" +
    "\002\046\003\000\002\051\003\000\002\051\003\000\002" +
    "\051\005\000\002\052\006\000\002\053\010\000\002\053" +
    "\011\000\002\055\012\000\002\055\005\000\002\054\016" +
    "\000\002\054\005\000\002\007\003\000\002\007\002\000" +
    "\002\010\005\000\002\010\003\000\002\060\004\000\002" +
    "\060\005\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\021\006\000\002\022\011\000\002\023\015\000\002" +
    "\023\005\000\002\024\011\000\002\024\005\000\002\025" +
    "\014\000\002\025\005\000\002\026\007\000\002\027\005" +
    "\000\002\030\010\000\002\030\005\000\002\031\011\000" +
    "\002\031\005\000\002\014\003\000\002\014\002\000\002" +
    "\015\005\000\002\015\003\000\002\061\004\000\002\061" +
    "\005\000\002\061\003\000\002\062\006\000\002\062\007" +
    "\000\002\062\007\000\002\032\003\000\002\033\005\000" +
    "\002\033\003\000\002\034\005\000\002\034\003\000\002" +
    "\035\005\000\002\035\005\000\002\035\005\000\002\035" +
    "\005\000\002\035\005\000\002\035\005\000\002\035\003" +
    "\000\002\036\005\000\002\036\005\000\002\036\003\000" +
    "\002\037\005\000\002\037\005\000\002\037\005\000\002" +
    "\037\003\000\002\040\004\000\002\040\004\000\002\040" +
    "\004\000\002\040\004\000\002\040\004\000\002\040\003" +
    "\000\002\041\004\000\002\041\004\000\002\041\003\000" +
    "\002\042\006\000\002\042\005\000\002\042\005\000\002" +
    "\042\006\000\002\042\003\000\002\043\003\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010e\000\016\004\013\011\016\012\ufff3\016\007\065" +
    "\015\066\010\001\002\000\074\004\uffdc\005\uffdc\006\uffdc" +
    "\011\uffdc\012\uffdc\015\uffdc\016\uffdc\017\uffdc\021\uffdc\022" +
    "\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\031\uffdc" +
    "\032\uffdc\033\uffdc\034\uffdc\046\uffdc\047\uffdc\054\uffdc\057" +
    "\uffdc\062\uffdc\065\uffdc\066\uffdc\067\uffdc\070\uffdc\071\uffdc" +
    "\001\002\000\016\004\ufff0\011\ufff0\012\ufff0\016\ufff0\065" +
    "\ufff0\066\ufff0\001\002\000\004\012\u010a\001\002\000\020" +
    "\003\376\007\046\010\053\013\044\014\051\031\045\054" +
    "\054\001\002\000\006\003\212\031\213\001\002\000\074" +
    "\004\uffeb\005\uffeb\006\uffeb\011\uffeb\012\uffeb\015\uffeb\016" +
    "\uffeb\017\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb" +
    "\026\uffeb\027\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\046" +
    "\uffeb\047\uffeb\054\uffeb\057\uffeb\062\uffeb\065\uffeb\066\uffeb" +
    "\067\uffeb\070\uffeb\071\uffeb\001\002\000\074\004\uffdd\005" +
    "\uffdd\006\uffdd\011\uffdd\012\uffdd\015\uffdd\016\uffdd\017\uffdd" +
    "\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027" +
    "\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\046\uffdd\047\uffdd" +
    "\054\uffdd\057\uffdd\062\uffdd\065\uffdd\066\uffdd\067\uffdd\070" +
    "\uffdd\071\uffdd\001\002\000\022\003\067\007\046\010\053" +
    "\013\044\014\051\030\070\031\045\054\054\001\002\000" +
    "\016\004\uffef\011\uffef\012\uffef\016\uffef\065\uffef\066\uffef" +
    "\001\002\000\006\003\041\031\042\001\002\000\006\003" +
    "\027\031\030\001\002\000\016\004\ufff1\011\ufff1\012\ufff1" +
    "\016\ufff1\065\ufff1\066\ufff1\001\002\000\004\002\026\001" +
    "\002\000\016\004\uffee\011\uffee\012\uffee\016\uffee\065\uffee" +
    "\066\uffee\001\002\000\016\004\013\011\016\012\ufff4\016" +
    "\007\065\015\066\010\001\002\000\074\004\uffed\005\uffed" +
    "\006\uffed\011\uffed\012\uffed\015\uffed\016\uffed\017\uffed\021" +
    "\uffed\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed" +
    "\031\uffed\032\uffed\033\uffed\034\uffed\046\uffed\047\uffed\054" +
    "\uffed\057\uffed\062\uffed\065\uffed\066\uffed\067\uffed\070\uffed" +
    "\071\uffed\001\002\000\074\004\uffec\005\uffec\006\uffec\011" +
    "\uffec\012\uffec\015\uffec\016\uffec\017\uffec\021\uffec\022\uffec" +
    "\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec\031\uffec\032" +
    "\uffec\033\uffec\034\uffec\046\uffec\047\uffec\054\uffec\057\uffec" +
    "\062\uffec\065\uffec\066\uffec\067\uffec\070\uffec\071\uffec\001" +
    "\002\000\016\004\ufff2\011\ufff2\012\ufff2\016\ufff2\065\ufff2" +
    "\066\ufff2\001\002\000\004\002\000\001\002\000\004\057" +
    "\040\001\002\000\004\056\031\001\002\000\012\004\013" +
    "\011\016\057\ufff7\065\015\001\002\000\066\004\013\005" +
    "\ufff8\006\ufff8\011\016\015\ufff8\017\ufff8\021\ufff8\022\ufff8" +
    "\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\031\ufff8\032" +
    "\ufff8\033\ufff8\034\ufff8\046\ufff8\047\ufff8\054\ufff8\057\ufff8" +
    "\062\ufff8\065\015\067\ufff8\070\ufff8\071\ufff8\001\002\000" +
    "\004\057\036\001\002\000\004\057\uffe6\001\002\000\066" +
    "\004\ufff5\005\ufff5\006\ufff5\011\ufff5\015\ufff5\017\ufff5\021" +
    "\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5" +
    "\031\ufff5\032\ufff5\033\ufff5\034\ufff5\046\ufff5\047\ufff5\054" +
    "\ufff5\057\ufff5\062\ufff5\065\ufff5\067\ufff5\070\ufff5\071\ufff5" +
    "\001\002\000\074\004\uffe8\005\uffe8\006\uffe8\011\uffe8\012" +
    "\uffe8\015\uffe8\016\uffe8\017\uffe8\021\uffe8\022\uffe8\023\uffe8" +
    "\024\uffe8\025\uffe8\026\uffe8\027\uffe8\031\uffe8\032\uffe8\033" +
    "\uffe8\034\uffe8\046\uffe8\047\uffe8\054\uffe8\057\uffe8\062\uffe8" +
    "\065\uffe8\066\uffe8\067\uffe8\070\uffe8\071\uffe8\001\002\000" +
    "\066\004\ufff6\005\ufff6\006\ufff6\011\ufff6\015\ufff6\017\ufff6" +
    "\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6\027" +
    "\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6\046\ufff6\047\ufff6" +
    "\054\ufff6\057\ufff6\062\ufff6\065\ufff6\067\ufff6\070\ufff6\071" +
    "\ufff6\001\002\000\074\004\uffe7\005\uffe7\006\uffe7\011\uffe7" +
    "\012\uffe7\015\uffe7\016\uffe7\017\uffe7\021\uffe7\022\uffe7\023" +
    "\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\031\uffe7\032\uffe7" +
    "\033\uffe7\034\uffe7\046\uffe7\047\uffe7\054\uffe7\057\uffe7\062" +
    "\uffe7\065\uffe7\066\uffe7\067\uffe7\070\uffe7\071\uffe7\001\002" +
    "\000\004\060\065\001\002\000\004\061\043\001\002\000" +
    "\016\007\046\010\053\013\044\014\051\031\045\054\054" +
    "\001\002\000\054\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035" +
    "\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf" +
    "\044\uffdf\045\uffdf\047\uffdf\050\uffdf\051\uffdf\055\uffdf\060" +
    "\uffdf\061\uffdf\063\uffdf\064\uffdf\001\002\000\054\031\uffe1" +
    "\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040" +
    "\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1\047\uffe1" +
    "\050\uffe1\051\uffe1\055\uffe1\060\uffe1\061\uffe1\063\uffe1\064" +
    "\uffe1\001\002\000\014\007\046\013\044\014\051\031\045" +
    "\054\054\001\002\000\054\031\uffe0\032\uffe0\033\uffe0\034" +
    "\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0" +
    "\043\uffe0\044\uffe0\045\uffe0\047\uffe0\050\uffe0\051\uffe0\055" +
    "\uffe0\060\uffe0\061\uffe0\063\uffe0\064\uffe0\001\002\000\052" +
    "\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037" +
    "\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4" +
    "\047\uffe4\051\uffe4\055\uffe4\060\uffe4\061\uffe4\063\uffe4\064" +
    "\uffe4\001\002\000\054\031\uffde\032\uffde\033\uffde\034\uffde" +
    "\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde\043" +
    "\uffde\044\uffde\045\uffde\047\uffde\050\uffde\051\uffde\055\uffde" +
    "\060\uffde\061\uffde\063\uffde\064\uffde\001\002\000\004\060" +
    "\060\001\002\000\016\007\046\010\053\013\044\014\051" +
    "\031\045\054\054\001\002\000\016\007\046\010\053\013" +
    "\044\014\051\031\045\054\054\001\002\000\004\055\056" +
    "\001\002\000\054\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035" +
    "\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2" +
    "\044\uffe2\045\uffe2\047\uffe2\050\uffe2\051\uffe2\055\uffe2\060" +
    "\uffe2\061\uffe2\063\uffe2\064\uffe2\001\002\000\052\031\uffe5" +
    "\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040" +
    "\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\047\uffe5" +
    "\051\uffe5\055\uffe5\060\uffe5\061\uffe5\063\uffe5\064\uffe5\001" +
    "\002\000\074\004\uffea\005\uffea\006\uffea\011\uffea\012\uffea" +
    "\015\uffea\016\uffea\017\uffea\021\uffea\022\uffea\023\uffea\024" +
    "\uffea\025\uffea\026\uffea\027\uffea\031\uffea\032\uffea\033\uffea" +
    "\034\uffea\046\uffea\047\uffea\054\uffea\057\uffea\062\uffea\065" +
    "\uffea\066\uffea\067\uffea\070\uffea\071\uffea\001\002\000\004" +
    "\050\062\001\002\000\004\006\063\001\002\000\004\051" +
    "\064\001\002\000\054\031\uffe3\032\uffe3\033\uffe3\034\uffe3" +
    "\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043" +
    "\uffe3\044\uffe3\045\uffe3\047\uffe3\050\uffe3\051\uffe3\055\uffe3" +
    "\060\uffe3\061\uffe3\063\uffe3\064\uffe3\001\002\000\074\004" +
    "\uffe9\005\uffe9\006\uffe9\011\uffe9\012\uffe9\015\uffe9\016\uffe9" +
    "\017\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026" +
    "\uffe9\027\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\046\uffe9" +
    "\047\uffe9\054\uffe9\057\uffe9\062\uffe9\065\uffe9\066\uffe9\067" +
    "\uffe9\070\uffe9\071\uffe9\001\002\000\004\031\205\001\002" +
    "\000\004\060\204\001\002\000\016\007\046\010\053\013" +
    "\044\014\051\031\045\054\054\001\002\000\004\031\072" +
    "\001\002\000\004\061\073\001\002\000\032\005\115\006" +
    "\116\015\117\023\106\026\114\031\100\032\120\033\074" +
    "\034\113\046\075\047\102\054\121\001\002\000\020\005" +
    "\115\006\116\015\117\023\106\026\114\031\100\054\121" +
    "\001\002\000\020\005\115\006\116\015\117\023\106\026" +
    "\114\031\100\054\121\001\002\000\056\032\uff8c\033\uff8c" +
    "\034\uff8c\035\uff8c\036\uff8c\037\uff8c\040\uff8c\041\uff8c\042" +
    "\uff8c\043\uff8c\044\uff8c\045\uff8c\050\uff8c\051\uff8c\052\uff8c" +
    "\053\uff8c\054\uff8c\055\uff8c\060\uff8c\061\uff8c\063\uff8c\064" +
    "\uff8c\001\002\000\056\032\uff91\033\uff91\034\uff91\035\uff91" +
    "\036\uff91\037\uff91\040\uff91\041\uff91\042\uff91\043\uff91\044" +
    "\uff91\045\uff91\050\166\051\uff91\052\165\053\164\054\167" +
    "\055\uff91\060\uff91\061\uff91\063\uff91\064\uff91\001\002\000" +
    "\056\032\uff88\033\uff88\034\uff88\035\uff88\036\uff88\037\uff88" +
    "\040\uff88\041\uff88\042\uff88\043\uff88\044\uff88\045\uff88\050" +
    "\uff88\051\uff88\052\uff88\053\uff88\054\uff88\055\uff88\060\uff88" +
    "\061\uff88\063\uff88\064\uff88\001\002\000\046\032\uff94\033" +
    "\uff94\034\uff94\035\uff94\036\uff94\037\uff94\040\uff94\041\uff94" +
    "\042\uff94\043\uff94\044\uff94\045\uff94\051\uff94\055\uff94\060" +
    "\uff94\061\uff94\063\uff94\064\uff94\001\002\000\020\005\115" +
    "\006\116\015\117\023\106\026\114\031\100\054\121\001" +
    "\002\000\046\032\uff9a\033\uff9a\034\uff9a\035\uff9a\036\uff9a" +
    "\037\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045" +
    "\uff9a\051\uff9a\055\uff9a\060\uff9a\061\uff9a\063\uff9a\064\uff9a" +
    "\001\002\000\004\060\162\001\002\000\046\032\uff9e\033" +
    "\uff9e\034\145\035\146\036\147\037\uff9e\040\uff9e\041\uff9e" +
    "\042\uff9e\043\uff9e\044\uff9e\045\uff9e\051\uff9e\055\uff9e\060" +
    "\uff9e\061\uff9e\063\uff9e\064\uff9e\001\002\000\016\007\046" +
    "\010\053\013\044\014\051\031\045\054\054\001\002\000" +
    "\040\032\142\033\143\037\uffa1\040\uffa1\041\uffa1\042\uffa1" +
    "\043\uffa1\044\uffa1\045\uffa1\051\uffa1\055\uffa1\060\uffa1\061" +
    "\uffa1\063\uffa1\064\uffa1\001\002\000\034\037\135\040\133" +
    "\041\134\042\137\043\140\044\uffa8\045\uffa8\051\uffa8\055" +
    "\uffa8\060\uffa8\061\uffa8\063\uffa8\064\136\001\002\000\020" +
    "\044\131\045\uffaa\051\uffaa\055\uffaa\060\uffaa\061\uffaa\063" +
    "\uffaa\001\002\000\016\045\127\051\uffac\055\uffac\060\uffac" +
    "\061\uffac\063\uffac\001\002\000\020\005\115\006\116\015" +
    "\117\023\106\026\114\031\100\054\121\001\002\000\016" +
    "\007\046\010\053\013\044\014\051\031\045\054\054\001" +
    "\002\000\056\032\uff8a\033\uff8a\034\uff8a\035\uff8a\036\uff8a" +
    "\037\uff8a\040\uff8a\041\uff8a\042\uff8a\043\uff8a\044\uff8a\045" +
    "\uff8a\050\uff8a\051\uff8a\052\uff8a\053\uff8a\054\uff8a\055\uff8a" +
    "\060\uff8a\061\uff8a\063\uff8a\064\uff8a\001\002\000\056\032" +
    "\uff8b\033\uff8b\034\uff8b\035\uff8b\036\uff8b\037\uff8b\040\uff8b" +
    "\041\uff8b\042\uff8b\043\uff8b\044\uff8b\045\uff8b\050\uff8b\051" +
    "\uff8b\052\uff8b\053\uff8b\054\uff8b\055\uff8b\060\uff8b\061\uff8b" +
    "\063\uff8b\064\uff8b\001\002\000\056\032\uff89\033\uff89\034" +
    "\uff89\035\uff89\036\uff89\037\uff89\040\uff89\041\uff89\042\uff89" +
    "\043\uff89\044\uff89\045\uff89\050\uff89\051\uff89\052\uff89\053" +
    "\uff89\054\uff89\055\uff89\060\uff89\061\uff89\063\uff89\064\uff89" +
    "\001\002\000\020\005\115\006\116\015\117\023\106\026" +
    "\114\031\100\054\121\001\002\000\032\005\115\006\116" +
    "\015\117\023\106\026\114\031\100\032\120\033\074\034" +
    "\113\046\075\047\102\054\121\001\002\000\004\055\123" +
    "\001\002\000\056\032\uff87\033\uff87\034\uff87\035\uff87\036" +
    "\uff87\037\uff87\040\uff87\041\uff87\042\uff87\043\uff87\044\uff87" +
    "\045\uff87\050\uff87\051\uff87\052\uff87\053\uff87\054\uff87\055" +
    "\uff87\060\uff87\061\uff87\063\uff87\064\uff87\001\002\000\046" +
    "\032\uff99\033\uff99\034\uff99\035\uff99\036\uff99\037\uff99\040" +
    "\uff99\041\uff99\042\uff99\043\uff99\044\uff99\045\uff99\051\uff99" +
    "\055\uff99\060\uff99\061\uff99\063\uff99\064\uff99\001\002\000" +
    "\046\032\uff93\033\uff93\034\uff93\035\uff93\036\uff93\037\uff93" +
    "\040\uff93\041\uff93\042\uff93\043\uff93\044\uff93\045\uff93\051" +
    "\uff93\055\uff93\060\uff93\061\uff93\063\uff93\064\uff93\001\002" +
    "\000\046\032\uff97\033\uff97\034\uff97\035\uff97\036\uff97\037" +
    "\uff97\040\uff97\041\uff97\042\uff97\043\uff97\044\uff97\045\uff97" +
    "\051\uff97\055\uff97\060\uff97\061\uff97\063\uff97\064\uff97\001" +
    "\002\000\032\005\115\006\116\015\117\023\106\026\114" +
    "\031\100\032\120\033\074\034\113\046\075\047\102\054" +
    "\121\001\002\000\020\044\131\045\uffab\051\uffab\055\uffab" +
    "\060\uffab\061\uffab\063\uffab\001\002\000\032\005\115\006" +
    "\116\015\117\023\106\026\114\031\100\032\120\033\074" +
    "\034\113\046\075\047\102\054\121\001\002\000\034\037" +
    "\135\040\133\041\134\042\137\043\140\044\uffa9\045\uffa9" +
    "\051\uffa9\055\uffa9\060\uffa9\061\uffa9\063\uffa9\064\136\001" +
    "\002\000\032\005\115\006\116\015\117\023\106\026\114" +
    "\031\100\032\120\033\074\034\113\046\075\047\102\054" +
    "\121\001\002\000\032\005\115\006\116\015\117\023\106" +
    "\026\114\031\100\032\120\033\074\034\113\046\075\047" +
    "\102\054\121\001\002\000\032\005\115\006\116\015\117" +
    "\023\106\026\114\031\100\032\120\033\074\034\113\046" +
    "\075\047\102\054\121\001\002\000\032\005\115\006\116" +
    "\015\117\023\106\026\114\031\100\032\120\033\074\034" +
    "\113\046\075\047\102\054\121\001\002\000\032\005\115" +
    "\006\116\015\117\023\106\026\114\031\100\032\120\033" +
    "\074\034\113\046\075\047\102\054\121\001\002\000\032" +
    "\005\115\006\116\015\117\023\106\026\114\031\100\032" +
    "\120\033\074\034\113\046\075\047\102\054\121\001\002" +
    "\000\040\032\142\033\143\037\uffa2\040\uffa2\041\uffa2\042" +
    "\uffa2\043\uffa2\044\uffa2\045\uffa2\051\uffa2\055\uffa2\060\uffa2" +
    "\061\uffa2\063\uffa2\064\uffa2\001\002\000\032\005\115\006" +
    "\116\015\117\023\106\026\114\031\100\032\120\033\074" +
    "\034\113\046\075\047\102\054\121\001\002\000\032\005" +
    "\115\006\116\015\117\023\106\026\114\031\100\032\120" +
    "\033\074\034\113\046\075\047\102\054\121\001\002\000" +
    "\046\032\uff9f\033\uff9f\034\145\035\146\036\147\037\uff9f" +
    "\040\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\051" +
    "\uff9f\055\uff9f\060\uff9f\061\uff9f\063\uff9f\064\uff9f\001\002" +
    "\000\032\005\115\006\116\015\117\023\106\026\114\031" +
    "\100\032\120\033\074\034\113\046\075\047\102\054\121" +
    "\001\002\000\032\005\115\006\116\015\117\023\106\026" +
    "\114\031\100\032\120\033\074\034\113\046\075\047\102" +
    "\054\121\001\002\000\032\005\115\006\116\015\117\023" +
    "\106\026\114\031\100\032\120\033\074\034\113\046\075" +
    "\047\102\054\121\001\002\000\046\032\uff9b\033\uff9b\034" +
    "\uff9b\035\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b" +
    "\043\uff9b\044\uff9b\045\uff9b\051\uff9b\055\uff9b\060\uff9b\061" +
    "\uff9b\063\uff9b\064\uff9b\001\002\000\046\032\uff9c\033\uff9c" +
    "\034\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c\042" +
    "\uff9c\043\uff9c\044\uff9c\045\uff9c\051\uff9c\055\uff9c\060\uff9c" +
    "\061\uff9c\063\uff9c\064\uff9c\001\002\000\046\032\uff9d\033" +
    "\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d" +
    "\042\uff9d\043\uff9d\044\uff9d\045\uff9d\051\uff9d\055\uff9d\060" +
    "\uff9d\061\uff9d\063\uff9d\064\uff9d\001\002\000\046\032\uffa0" +
    "\033\uffa0\034\145\035\146\036\147\037\uffa0\040\uffa0\041" +
    "\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0\051\uffa0\055\uffa0" +
    "\060\uffa0\061\uffa0\063\uffa0\064\uffa0\001\002\000\040\032" +
    "\142\033\143\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3" +
    "\044\uffa3\045\uffa3\051\uffa3\055\uffa3\060\uffa3\061\uffa3\063" +
    "\uffa3\064\uffa3\001\002\000\040\032\142\033\143\037\uffa6" +
    "\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\051" +
    "\uffa6\055\uffa6\060\uffa6\061\uffa6\063\uffa6\064\uffa6\001\002" +
    "\000\040\032\142\033\143\037\uffa7\040\uffa7\041\uffa7\042" +
    "\uffa7\043\uffa7\044\uffa7\045\uffa7\051\uffa7\055\uffa7\060\uffa7" +
    "\061\uffa7\063\uffa7\064\uffa7\001\002\000\040\032\142\033" +
    "\143\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4" +
    "\045\uffa4\051\uffa4\055\uffa4\060\uffa4\061\uffa4\063\uffa4\064" +
    "\uffa4\001\002\000\040\032\142\033\143\037\uffa5\040\uffa5" +
    "\041\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5\051\uffa5\055" +
    "\uffa5\060\uffa5\061\uffa5\063\uffa5\064\uffa5\001\002\000\046" +
    "\032\uff92\033\uff92\034\uff92\035\uff92\036\uff92\037\uff92\040" +
    "\uff92\041\uff92\042\uff92\043\uff92\044\uff92\045\uff92\051\uff92" +
    "\055\uff92\060\uff92\061\uff92\063\uff92\064\uff92\001\002\000" +
    "\074\004\uffd8\005\uffd8\006\uffd8\011\uffd8\012\uffd8\015\uffd8" +
    "\016\uffd8\017\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025" +
    "\uffd8\026\uffd8\027\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8" +
    "\046\uffd8\047\uffd8\054\uffd8\057\uffd8\062\uffd8\065\uffd8\066" +
    "\uffd8\067\uffd8\070\uffd8\071\uffd8\001\002\000\046\032\uff95" +
    "\033\uff95\034\uff95\035\uff95\036\uff95\037\uff95\040\uff95\041" +
    "\uff95\042\uff95\043\uff95\044\uff95\045\uff95\051\uff95\055\uff95" +
    "\060\uff95\061\uff95\063\uff95\064\uff95\001\002\000\004\031" +
    "\201\001\002\000\004\031\200\001\002\000\032\005\115" +
    "\006\116\015\117\023\106\026\114\031\100\032\120\033" +
    "\074\034\113\046\075\047\102\054\121\001\002\000\034" +
    "\005\115\006\116\015\117\023\106\026\114\031\100\032" +
    "\120\033\074\034\113\046\075\047\102\054\121\055\uffb5" +
    "\001\002\000\006\055\uffb3\063\uffb3\001\002\000\006\055" +
    "\uffb6\063\174\001\002\000\004\055\173\001\002\000\056" +
    "\032\uff8d\033\uff8d\034\uff8d\035\uff8d\036\uff8d\037\uff8d\040" +
    "\uff8d\041\uff8d\042\uff8d\043\uff8d\044\uff8d\045\uff8d\050\uff8d" +
    "\051\uff8d\052\uff8d\053\uff8d\054\uff8d\055\uff8d\060\uff8d\061" +
    "\uff8d\063\uff8d\064\uff8d\001\002\000\032\005\115\006\116" +
    "\015\117\023\106\026\114\031\100\032\120\033\074\034" +
    "\113\046\075\047\102\054\121\001\002\000\006\055\uffb4" +
    "\063\uffb4\001\002\000\004\051\177\001\002\000\056\032" +
    "\uff90\033\uff90\034\uff90\035\uff90\036\uff90\037\uff90\040\uff90" +
    "\041\uff90\042\uff90\043\uff90\044\uff90\045\uff90\050\uff90\051" +
    "\uff90\052\uff90\053\uff90\054\uff90\055\uff90\060\uff90\061\uff90" +
    "\063\uff90\064\uff90\001\002\000\056\032\uff8f\033\uff8f\034" +
    "\uff8f\035\uff8f\036\uff8f\037\uff8f\040\uff8f\041\uff8f\042\uff8f" +
    "\043\uff8f\044\uff8f\045\uff8f\050\uff8f\051\uff8f\052\uff8f\053" +
    "\uff8f\054\uff8f\055\uff8f\060\uff8f\061\uff8f\063\uff8f\064\uff8f" +
    "\001\002\000\056\032\uff8e\033\uff8e\034\uff8e\035\uff8e\036" +
    "\uff8e\037\uff8e\040\uff8e\041\uff8e\042\uff8e\043\uff8e\044\uff8e" +
    "\045\uff8e\050\uff8e\051\uff8e\052\uff8e\053\uff8e\054\uff8e\055" +
    "\uff8e\060\uff8e\061\uff8e\063\uff8e\064\uff8e\001\002\000\046" +
    "\032\uff96\033\uff96\034\uff96\035\uff96\036\uff96\037\uff96\040" +
    "\uff96\041\uff96\042\uff96\043\uff96\044\uff96\045\uff96\051\uff96" +
    "\055\uff96\060\uff96\061\uff96\063\uff96\064\uff96\001\002\000" +
    "\046\032\uff98\033\uff98\034\uff98\035\uff98\036\uff98\037\uff98" +
    "\040\uff98\041\uff98\042\uff98\043\uff98\044\uff98\045\uff98\051" +
    "\uff98\055\uff98\060\uff98\061\uff98\063\uff98\064\uff98\001\002" +
    "\000\074\004\uffdb\005\uffdb\006\uffdb\011\uffdb\012\uffdb\015" +
    "\uffdb\016\uffdb\017\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb" +
    "\025\uffdb\026\uffdb\027\uffdb\031\uffdb\032\uffdb\033\uffdb\034" +
    "\uffdb\046\uffdb\047\uffdb\054\uffdb\057\uffdb\062\uffdb\065\uffdb" +
    "\066\uffdb\067\uffdb\070\uffdb\071\uffdb\001\002\000\006\060" +
    "\206\061\207\001\002\000\074\004\uffda\005\uffda\006\uffda" +
    "\011\uffda\012\uffda\015\uffda\016\uffda\017\uffda\021\uffda\022" +
    "\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\031\uffda" +
    "\032\uffda\033\uffda\034\uffda\046\uffda\047\uffda\054\uffda\057" +
    "\uffda\062\uffda\065\uffda\066\uffda\067\uffda\070\uffda\071\uffda" +
    "\001\002\000\032\005\115\006\116\015\117\023\106\026" +
    "\114\031\100\032\120\033\074\034\113\046\075\047\102" +
    "\054\121\001\002\000\004\060\211\001\002\000\074\004" +
    "\uffd9\005\uffd9\006\uffd9\011\uffd9\012\uffd9\015\uffd9\016\uffd9" +
    "\017\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026" +
    "\uffd9\027\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\046\uffd9" +
    "\047\uffd9\054\uffd9\057\uffd9\062\uffd9\065\uffd9\066\uffd9\067" +
    "\uffd9\070\uffd9\071\uffd9\001\002\000\004\057\374\001\002" +
    "\000\004\054\214\001\002\000\020\007\046\010\053\013" +
    "\044\014\051\031\045\054\054\055\uffd2\001\002\000\006" +
    "\055\uffd0\063\uffd0\001\002\000\006\055\uffd3\063\372\001" +
    "\002\000\004\055\224\001\002\000\006\031\222\047\221" +
    "\001\002\000\004\031\223\001\002\000\006\055\uffcf\063" +
    "\uffcf\001\002\000\006\055\uffce\063\uffce\001\002\000\004" +
    "\056\225\001\002\000\060\004\013\005\ufff7\006\ufff7\011" +
    "\016\015\ufff7\017\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7" +
    "\025\ufff7\026\ufff7\027\ufff7\031\ufff7\032\ufff7\033\ufff7\034" +
    "\ufff7\046\ufff7\047\ufff7\054\ufff7\057\ufff7\065\015\067\ufff7" +
    "\001\002\000\004\057\371\001\002\000\060\005\115\006" +
    "\116\015\117\017\240\021\242\022\246\023\106\024\234" +
    "\025\237\026\114\027\231\031\100\032\120\033\074\034" +
    "\113\046\075\047\102\054\121\057\ufffb\062\ufffb\067\247" +
    "\070\ufffb\071\ufffb\001\002\000\060\005\uffc7\006\uffc7\015" +
    "\uffc7\017\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7" +
    "\026\uffc7\027\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\046" +
    "\uffc7\047\uffc7\054\uffc7\057\uffc7\062\uffc7\067\uffc7\070\uffc7" +
    "\071\uffc7\001\002\000\032\005\115\006\116\015\117\023" +
    "\106\026\114\031\100\032\120\033\074\034\113\046\075" +
    "\047\102\054\121\001\002\000\060\005\uffc9\006\uffc9\015" +
    "\uffc9\017\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9" +
    "\026\uffc9\027\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\046" +
    "\uffc9\047\uffc9\054\uffc9\057\uffc9\062\uffc9\067\uffc9\070\uffc9" +
    "\071\uffc9\001\002\000\060\005\uffc8\006\uffc8\015\uffc8\017" +
    "\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8" +
    "\027\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\046\uffc8\047" +
    "\uffc8\054\uffc8\057\uffc8\062\uffc8\067\uffc8\070\uffc8\071\uffc8" +
    "\001\002\000\004\054\363\001\002\000\060\005\115\006" +
    "\116\015\117\017\240\021\242\022\246\023\106\024\234" +
    "\025\237\026\114\027\231\031\100\032\120\033\074\034" +
    "\113\046\075\047\102\054\121\057\ufffc\062\ufffc\067\247" +
    "\070\ufffc\071\ufffc\001\002\000\060\005\uffc6\006\uffc6\015" +
    "\uffc6\017\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6" +
    "\026\uffc6\027\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\046" +
    "\uffc6\047\uffc6\054\uffc6\057\uffc6\062\uffc6\067\uffc6\070\uffc6" +
    "\071\uffc6\001\002\000\016\003\353\005\115\006\116\015" +
    "\117\031\100\054\121\001\002\000\006\003\337\054\340" +
    "\001\002\000\060\005\ufff9\006\ufff9\015\ufff9\017\ufff9\021" +
    "\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9" +
    "\031\ufff9\032\ufff9\033\ufff9\034\ufff9\046\ufff9\047\ufff9\054" +
    "\ufff9\057\ufff9\062\ufff9\067\ufff9\070\ufff9\071\ufff9\001\002" +
    "\000\006\003\327\054\330\001\002\000\060\005\uffcd\006" +
    "\uffcd\015\uffcd\017\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd" +
    "\025\uffcd\026\uffcd\027\uffcd\031\uffcd\032\uffcd\033\uffcd\034" +
    "\uffcd\046\uffcd\047\uffcd\054\uffcd\057\uffcd\062\uffcd\067\uffcd" +
    "\070\uffcd\071\uffcd\001\002\000\060\005\uffc5\006\uffc5\015" +
    "\uffc5\017\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5" +
    "\026\uffc5\027\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\046" +
    "\uffc5\047\uffc5\054\uffc5\057\uffc5\062\uffc5\067\uffc5\070\uffc5" +
    "\071\uffc5\001\002\000\004\061\324\001\002\000\006\003" +
    "\306\054\307\001\002\000\006\003\254\054\255\001\002" +
    "\000\060\005\uffca\006\uffca\015\uffca\017\uffca\021\uffca\022" +
    "\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\031\uffca" +
    "\032\uffca\033\uffca\034\uffca\046\uffca\047\uffca\054\uffca\057" +
    "\uffca\062\uffca\067\uffca\070\uffca\071\uffca\001\002\000\060" +
    "\005\uffcc\006\uffcc\015\uffcc\017\uffcc\021\uffcc\022\uffcc\023" +
    "\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\031\uffcc\032\uffcc" +
    "\033\uffcc\034\uffcc\046\uffcc\047\uffcc\054\uffcc\057\uffcc\062" +
    "\uffcc\067\uffcc\070\uffcc\071\uffcc\001\002\000\060\005\uffcb" +
    "\006\uffcb\015\uffcb\017\uffcb\021\uffcb\022\uffcb\023\uffcb\024" +
    "\uffcb\025\uffcb\026\uffcb\027\uffcb\031\uffcb\032\uffcb\033\uffcb" +
    "\034\uffcb\046\uffcb\047\uffcb\054\uffcb\057\uffcb\062\uffcb\067" +
    "\uffcb\070\uffcb\071\uffcb\001\002\000\012\057\ufffd\062\ufffd" +
    "\070\ufffd\071\ufffd\001\002\000\004\057\305\001\002\000" +
    "\032\005\115\006\116\015\117\023\106\026\114\031\100" +
    "\032\120\033\074\034\113\046\075\047\102\054\121\001" +
    "\002\000\004\055\257\001\002\000\004\056\260\001\002" +
    "\000\010\003\264\070\265\071\261\001\002\000\060\004" +
    "\013\005\ufff7\006\ufff7\011\016\015\ufff7\017\ufff7\021\ufff7" +
    "\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\031" +
    "\ufff7\032\ufff7\033\ufff7\034\ufff7\046\ufff7\047\ufff7\054\ufff7" +
    "\057\ufff7\065\015\067\ufff7\001\002\000\010\057\uffb0\070" +
    "\277\071\276\001\002\000\004\057\275\001\002\000\004" +
    "\070\271\001\002\000\004\072\266\001\002\000\004\073" +
    "\267\001\002\000\064\004\013\005\ufff7\006\ufff7\011\016" +
    "\015\ufff7\017\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025" +
    "\ufff7\026\ufff7\027\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7" +
    "\046\ufff7\047\ufff7\054\ufff7\057\ufff7\065\015\067\ufff7\070" +
    "\ufff7\071\ufff7\001\002\000\010\057\uffaf\070\uffaf\071\uffaf" +
    "\001\002\000\004\072\272\001\002\000\004\073\273\001" +
    "\002\000\064\004\013\005\ufff7\006\ufff7\011\016\015\ufff7" +
    "\017\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026" +
    "\ufff7\027\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7\046\ufff7" +
    "\047\ufff7\054\ufff7\057\ufff7\065\015\067\ufff7\070\ufff7\071" +
    "\ufff7\001\002\000\010\057\uffad\070\uffad\071\uffad\001\002" +
    "\000\060\005\uffb8\006\uffb8\015\uffb8\017\uffb8\021\uffb8\022" +
    "\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\031\uffb8" +
    "\032\uffb8\033\uffb8\034\uffb8\046\uffb8\047\uffb8\054\uffb8\057" +
    "\uffb8\062\uffb8\067\uffb8\070\uffb8\071\uffb8\001\002\000\060" +
    "\004\013\005\ufff7\006\ufff7\011\016\015\ufff7\017\ufff7\021" +
    "\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7" +
    "\031\ufff7\032\ufff7\033\ufff7\034\ufff7\046\ufff7\047\ufff7\054" +
    "\ufff7\057\ufff7\065\015\067\ufff7\001\002\000\004\072\300" +
    "\001\002\000\004\073\301\001\002\000\064\004\013\005" +
    "\ufff7\006\ufff7\011\016\015\ufff7\017\ufff7\021\ufff7\022\ufff7" +
    "\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\031\ufff7\032" +
    "\ufff7\033\ufff7\034\ufff7\046\ufff7\047\ufff7\054\ufff7\057\ufff7" +
    "\065\015\067\ufff7\070\ufff7\071\ufff7\001\002\000\010\057" +
    "\uffae\070\uffae\071\uffae\001\002\000\004\057\uffb1\001\002" +
    "\000\004\057\uffb2\001\002\000\060\005\uffb7\006\uffb7\015" +
    "\uffb7\017\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7" +
    "\026\uffb7\027\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\046" +
    "\uffb7\047\uffb7\054\uffb7\057\uffb7\062\uffb7\067\uffb7\070\uffb7" +
    "\071\uffb7\001\002\000\004\057\323\001\002\000\004\004" +
    "\310\001\002\000\020\007\046\010\053\013\044\014\051" +
    "\030\070\031\045\054\054\001\002\000\032\005\115\006" +
    "\116\015\117\023\106\026\114\031\100\032\120\033\074" +
    "\034\113\046\075\047\102\054\121\001\002\000\004\060" +
    "\313\001\002\000\032\005\115\006\116\015\117\023\106" +
    "\026\114\031\100\032\120\033\074\034\113\046\075\047" +
    "\102\054\121\001\002\000\004\055\315\001\002\000\004" +
    "\056\316\001\002\000\060\004\013\005\ufff7\006\ufff7\011" +
    "\016\015\ufff7\017\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7" +
    "\025\ufff7\026\ufff7\027\ufff7\031\ufff7\032\ufff7\033\ufff7\034" +
    "\ufff7\046\ufff7\047\ufff7\054\ufff7\057\ufff7\065\015\067\ufff7" +
    "\001\002\000\004\057\320\001\002\000\060\005\uffbe\006" +
    "\uffbe\015\uffbe\017\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe" +
    "\025\uffbe\026\uffbe\027\uffbe\031\uffbe\032\uffbe\033\uffbe\034" +
    "\uffbe\046\uffbe\047\uffbe\054\uffbe\057\uffbe\062\uffbe\067\uffbe" +
    "\070\uffbe\071\uffbe\001\002\000\004\031\322\001\002\000" +
    "\004\061\207\001\002\000\060\005\uffbd\006\uffbd\015\uffbd" +
    "\017\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026" +
    "\uffbd\027\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\046\uffbd" +
    "\047\uffbd\054\uffbd\057\uffbd\062\uffbd\067\uffbd\070\uffbd\071" +
    "\uffbd\001\002\000\032\005\115\006\116\015\117\023\106" +
    "\026\114\031\100\032\120\033\074\034\113\046\075\047" +
    "\102\054\121\001\002\000\004\060\326\001\002\000\062" +
    "\005\uffc4\006\uffc4\015\uffc4\017\uffc4\021\uffc4\022\uffc4\023" +
    "\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\031\uffc4\032\uffc4" +
    "\033\uffc4\034\uffc4\046\uffc4\047\uffc4\054\uffc4\055\uffc4\057" +
    "\uffc4\062\uffc4\067\uffc4\070\uffc4\071\uffc4\001\002\000\004" +
    "\057\336\001\002\000\032\005\115\006\116\015\117\023" +
    "\106\026\114\031\100\032\120\033\074\034\113\046\075" +
    "\047\102\054\121\001\002\000\004\055\332\001\002\000" +
    "\004\056\333\001\002\000\060\004\013\005\ufff7\006\ufff7" +
    "\011\016\015\ufff7\017\ufff7\021\ufff7\022\ufff7\023\ufff7\024" +
    "\ufff7\025\ufff7\026\ufff7\027\ufff7\031\ufff7\032\ufff7\033\ufff7" +
    "\034\ufff7\046\ufff7\047\ufff7\054\ufff7\057\ufff7\065\015\067" +
    "\ufff7\001\002\000\004\057\335\001\002\000\060\005\uffc0" +
    "\006\uffc0\015\uffc0\017\uffc0\021\uffc0\022\uffc0\023\uffc0\024" +
    "\uffc0\025\uffc0\026\uffc0\027\uffc0\031\uffc0\032\uffc0\033\uffc0" +
    "\034\uffc0\046\uffc0\047\uffc0\054\uffc0\057\uffc0\062\uffc0\067" +
    "\uffc0\070\uffc0\071\uffc0\001\002\000\060\005\uffbf\006\uffbf" +
    "\015\uffbf\017\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025" +
    "\uffbf\026\uffbf\027\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf" +
    "\046\uffbf\047\uffbf\054\uffbf\057\uffbf\062\uffbf\067\uffbf\070" +
    "\uffbf\071\uffbf\001\002\000\004\057\352\001\002\000\032" +
    "\005\115\006\116\015\117\023\106\026\114\031\100\032" +
    "\120\033\074\034\113\046\075\047\102\054\121\001\002" +
    "\000\004\055\342\001\002\000\004\056\343\001\002\000" +
    "\060\004\013\005\ufff7\006\ufff7\011\016\015\ufff7\017\ufff7" +
    "\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027" +
    "\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7\046\ufff7\047\ufff7" +
    "\054\ufff7\057\ufff7\065\015\067\ufff7\001\002\000\004\057" +
    "\345\001\002\000\062\005\uffc3\006\uffc3\015\uffc3\017\uffc3" +
    "\020\346\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026" +
    "\uffc3\027\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\046\uffc3" +
    "\047\uffc3\054\uffc3\057\uffc3\062\uffc3\067\uffc3\070\uffc3\071" +
    "\uffc3\001\002\000\004\056\347\001\002\000\060\004\013" +
    "\005\ufff7\006\ufff7\011\016\015\ufff7\017\ufff7\021\ufff7\022" +
    "\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\031\ufff7" +
    "\032\ufff7\033\ufff7\034\ufff7\046\ufff7\047\ufff7\054\ufff7\057" +
    "\ufff7\065\015\067\ufff7\001\002\000\004\057\351\001\002" +
    "\000\060\005\uffc2\006\uffc2\015\uffc2\017\uffc2\021\uffc2\022" +
    "\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\031\uffc2" +
    "\032\uffc2\033\uffc2\034\uffc2\046\uffc2\047\uffc2\054\uffc2\057" +
    "\uffc2\062\uffc2\067\uffc2\070\uffc2\071\uffc2\001\002\000\060" +
    "\005\uffc1\006\uffc1\015\uffc1\017\uffc1\021\uffc1\022\uffc1\023" +
    "\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\031\uffc1\032\uffc1" +
    "\033\uffc1\034\uffc1\046\uffc1\047\uffc1\054\uffc1\057\uffc1\062" +
    "\uffc1\067\uffc1\070\uffc1\071\uffc1\001\002\000\004\060\361" +
    "\001\002\000\012\050\166\052\165\053\164\054\355\001" +
    "\002\000\034\005\115\006\116\015\117\023\106\026\114" +
    "\031\100\032\120\033\074\034\113\046\075\047\102\054" +
    "\121\055\uffb5\001\002\000\004\055\357\001\002\000\014" +
    "\050\uff8d\052\uff8d\053\uff8d\054\uff8d\060\360\001\002\000" +
    "\060\005\uffba\006\uffba\015\uffba\017\uffba\021\uffba\022\uffba" +
    "\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba\031\uffba\032" +
    "\uffba\033\uffba\034\uffba\046\uffba\047\uffba\054\uffba\057\uffba" +
    "\062\uffba\067\uffba\070\uffba\071\uffba\001\002\000\060\005" +
    "\uffb9\006\uffb9\015\uffb9\017\uffb9\021\uffb9\022\uffb9\023\uffb9" +
    "\024\uffb9\025\uffb9\026\uffb9\027\uffb9\031\uffb9\032\uffb9\033" +
    "\uffb9\034\uffb9\046\uffb9\047\uffb9\054\uffb9\057\uffb9\062\uffb9" +
    "\067\uffb9\070\uffb9\071\uffb9\001\002\000\060\005\ufffa\006" +
    "\ufffa\015\ufffa\017\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa" +
    "\025\ufffa\026\ufffa\027\ufffa\031\ufffa\032\ufffa\033\ufffa\034" +
    "\ufffa\046\ufffa\047\ufffa\054\ufffa\057\ufffa\062\ufffa\067\ufffa" +
    "\070\ufffa\071\ufffa\001\002\000\032\005\115\006\116\015" +
    "\117\023\106\026\114\031\100\032\120\033\074\034\113" +
    "\046\075\047\102\054\121\001\002\000\004\055\365\001" +
    "\002\000\004\060\366\001\002\000\060\005\uffbc\006\uffbc" +
    "\015\uffbc\017\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025" +
    "\uffbc\026\uffbc\027\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc" +
    "\046\uffbc\047\uffbc\054\uffbc\057\uffbc\062\uffbc\067\uffbc\070" +
    "\uffbc\071\uffbc\001\002\000\004\060\370\001\002\000\060" +
    "\005\uffbb\006\uffbb\015\uffbb\017\uffbb\021\uffbb\022\uffbb\023" +
    "\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\031\uffbb\032\uffbb" +
    "\033\uffbb\034\uffbb\046\uffbb\047\uffbb\054\uffbb\057\uffbb\062" +
    "\uffbb\067\uffbb\070\uffbb\071\uffbb\001\002\000\016\004\uffd7" +
    "\011\uffd7\012\uffd7\016\uffd7\065\uffd7\066\uffd7\001\002\000" +
    "\016\007\046\010\053\013\044\014\051\031\045\054\054" +
    "\001\002\000\006\055\uffd1\063\uffd1\001\002\000\016\004" +
    "\uffd6\011\uffd6\012\uffd6\016\uffd6\065\uffd6\066\uffd6\001\002" +
    "\000\004\031\u0100\001\002\000\004\057\377\001\002\000" +
    "\016\004\uffd4\011\uffd4\012\uffd4\016\uffd4\065\uffd4\066\uffd4" +
    "\001\002\000\004\054\u0101\001\002\000\020\007\046\010" +
    "\053\013\044\014\051\031\045\054\054\055\uffd2\001\002" +
    "\000\004\055\u0103\001\002\000\004\056\u0104\001\002\000" +
    "\060\004\013\005\ufff7\006\ufff7\011\016\015\ufff7\017\ufff7" +
    "\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027" +
    "\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7\046\ufff7\047\ufff7" +
    "\054\ufff7\062\ufff7\065\015\067\ufff7\001\002\000\004\062" +
    "\u0106\001\002\000\032\005\115\006\116\015\117\023\106" +
    "\026\114\031\100\032\120\033\074\034\113\046\075\047" +
    "\102\054\121\001\002\000\004\060\u0108\001\002\000\004" +
    "\057\u0109\001\002\000\016\004\uffd5\011\uffd5\012\uffd5\016" +
    "\uffd5\065\uffd5\066\uffd5\001\002\000\006\003\u010c\056\u010d" +
    "\001\002\000\004\002\001\001\002\000\004\057\u0110\001" +
    "\002\000\060\004\013\005\ufff7\006\ufff7\011\016\015\ufff7" +
    "\017\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026" +
    "\ufff7\027\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7\046\ufff7" +
    "\047\ufff7\054\ufff7\057\ufff7\065\015\067\ufff7\001\002\000" +
    "\004\057\u010f\001\002\000\004\002\uffff\001\002\000\004" +
    "\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010e\000\032\002\017\005\005\006\021\047\020\050" +
    "\016\051\010\052\011\053\003\054\004\055\013\056\022" +
    "\057\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\u010a\001\001\000\010\044\374\045\047\046\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\044\065\045\047\046\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\047\020" +
    "\050\024\051\010\052\011\053\003\054\004\055\013\056" +
    "\022\057\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\003\033\004\031\011\032\047\034" +
    "\051\010\052\011\053\003\056\022\057\023\001\001\000" +
    "\016\047\036\051\010\052\011\053\003\056\022\057\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\044\051\045" +
    "\047\046\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\045\060\046\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\044\056\045\047\046\046\001\001\000\010\044\054\045" +
    "\047\046\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\044" +
    "\070\045\047\046\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\032\103\033\111\034\110\035\107\036" +
    "\106\037\104\040\102\041\100\042\076\043\075\001\001" +
    "\000\010\041\202\042\076\043\075\001\001\000\010\041" +
    "\201\042\076\043\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\041" +
    "\162\042\076\043\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\044\160\045\047\046" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\041\125\042\076\043" +
    "\075\001\001\000\010\044\124\045\047\046\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\041\123\042\076\043\075\001\001\000\026\032\121" +
    "\033\111\034\110\035\107\036\106\037\104\040\102\041" +
    "\100\042\076\043\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\034\127\035\107\036\106\037\104\040\102" +
    "\041\100\042\076\043\075\001\001\000\002\001\001\000" +
    "\020\035\131\036\106\037\104\040\102\041\100\042\076" +
    "\043\075\001\001\000\002\001\001\000\016\036\157\037" +
    "\104\040\102\041\100\042\076\043\075\001\001\000\016" +
    "\036\156\037\104\040\102\041\100\042\076\043\075\001" +
    "\001\000\016\036\155\037\104\040\102\041\100\042\076" +
    "\043\075\001\001\000\016\036\154\037\104\040\102\041" +
    "\100\042\076\043\075\001\001\000\016\036\153\037\104" +
    "\040\102\041\100\042\076\043\075\001\001\000\016\036" +
    "\140\037\104\040\102\041\100\042\076\043\075\001\001" +
    "\000\002\001\001\000\014\037\152\040\102\041\100\042" +
    "\076\043\075\001\001\000\014\037\143\040\102\041\100" +
    "\042\076\043\075\001\001\000\002\001\001\000\012\040" +
    "\151\041\100\042\076\043\075\001\001\000\012\040\150" +
    "\041\100\042\076\043\075\001\001\000\012\040\147\041" +
    "\100\042\076\043\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\032\175\033\111\034\110\035\107\036\106\037\104\040" +
    "\102\041\100\042\076\043\075\001\001\000\032\014\171" +
    "\015\170\032\167\033\111\034\110\035\107\036\106\037" +
    "\104\040\102\041\100\042\076\043\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\032\174\033\111\034\110\035\107\036\106" +
    "\037\104\040\102\041\100\042\076\043\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\032\207\033\111\034\110\035\107\036\106\037" +
    "\104\040\102\041\100\042\076\043\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\007\216\010\215\044\217\045\047\046\046" +
    "\060\214\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\003" +
    "\226\004\031\017\225\047\034\051\010\052\011\053\003" +
    "\056\022\057\023\001\001\000\002\001\001\000\056\012" +
    "\234\013\252\020\240\021\242\022\250\023\251\024\247" +
    "\025\231\026\232\027\227\030\235\031\243\032\244\033" +
    "\111\034\110\035\107\036\106\037\104\040\102\041\100" +
    "\042\076\043\075\001\001\000\002\001\001\000\026\032" +
    "\366\033\111\034\110\035\107\036\106\037\104\040\102" +
    "\041\100\042\076\043\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\020\361\021\242" +
    "\022\250\023\251\024\247\025\231\026\232\027\227\030" +
    "\235\031\243\032\244\033\111\034\110\035\107\036\106" +
    "\037\104\040\102\041\100\042\076\043\075\001\001\000" +
    "\002\001\001\000\006\042\353\043\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\032\255\033\111\034\110\035\107\036\106\037\104\040" +
    "\102\041\100\042\076\043\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\061\262\062\261\001\001\000" +
    "\024\003\226\004\031\017\303\047\034\051\010\052\011" +
    "\053\003\056\022\057\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\003\226\004\031\017\267\047\034\051" +
    "\010\052\011\053\003\056\022\057\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\003" +
    "\226\004\031\017\273\047\034\051\010\052\011\053\003" +
    "\056\022\057\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\003\226\004\031\017\302\047\034\051\010" +
    "\052\011\053\003\056\022\057\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\003\226\004\031\017\301" +
    "\047\034\051\010\052\011\053\003\056\022\057\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\053\310\001" +
    "\001\000\010\044\320\045\047\046\046\001\001\000\026" +
    "\032\311\033\111\034\110\035\107\036\106\037\104\040" +
    "\102\041\100\042\076\043\075\001\001\000\002\001\001" +
    "\000\030\021\313\032\244\033\111\034\110\035\107\036" +
    "\106\037\104\040\102\041\100\042\076\043\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\003\226\004" +
    "\031\017\316\047\034\051\010\052\011\053\003\056\022" +
    "\057\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\032\324\033\111\034\110\035\107\036\106\037\104\040" +
    "\102\041\100\042\076\043\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\032\330\033" +
    "\111\034\110\035\107\036\106\037\104\040\102\041\100" +
    "\042\076\043\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\003\226\004\031\017\333\047\034\051\010" +
    "\052\011\053\003\056\022\057\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\032\340\033\111\034\110\035\107\036\106\037" +
    "\104\040\102\041\100\042\076\043\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\003\226\004\031\017" +
    "\343\047\034\051\010\052\011\053\003\056\022\057\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\003\226\004\031\017\347\047\034\051\010" +
    "\052\011\053\003\056\022\057\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\014\355\015\170\032\167\033" +
    "\111\034\110\035\107\036\106\037\104\040\102\041\100" +
    "\042\076\043\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\032\363\033\111\034\110\035\107\036\106\037" +
    "\104\040\102\041\100\042\076\043\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\044\217" +
    "\045\047\046\046\060\372\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\007\u0101\010\215\044" +
    "\217\045\047\046\046\060\214\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\003\226\004\031\017\u0104\047" +
    "\034\051\010\052\011\053\003\056\022\057\023\001\001" +
    "\000\002\001\001\000\026\032\u0106\033\111\034\110\035" +
    "\107\036\106\037\104\040\102\041\100\042\076\043\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\003\226\004\031\017\u010d\047\034\051\010\052" +
    "\011\053\003\056\022\057\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructorASTExp$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructorASTExp$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructorASTExp$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConstructorASTExp$actions {
  private final ConstructorASTExp parser;

  /** Constructor */
  CUP$ConstructorASTExp$actions(ConstructorASTExp parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTExp$do_action_part00000000(
    int                        CUP$ConstructorASTExp$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTExp$parser,
    java.util.Stack            CUP$ConstructorASTExp$stack,
    int                        CUP$ConstructorASTExp$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructorASTExp$result;

      /* select the action based on the action number */
      switch (CUP$ConstructorASTExp$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programa ::= Declaraciones_Ini_Vac Main 
            {
              Program RESULT =null;
		ArrayList<Dec> decs = (ArrayList<Dec>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		DecMain m = (DecMain)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new Program(m.getFila(), m.getColumna(), decs, m); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Programa",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		RESULT = start_val;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ConstructorASTExp$parser.done_parsing();
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Main ::= MAIN LLABRE Bloque LLCIERRA 
            {
              DecMain RESULT =null;
		Ins b = (Ins)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new DecMain(b.getFila(), b.getColumna(), "main", new TypeFunVoid(new ArrayList<Dec> (), "main"), new ArrayList<Dec> (), b); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Main",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Main ::= MAIN error LLCIERRA 
            {
              DecMain RESULT =null;
		TokenValue l = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 System.out.println("FILA " + l.fila + ", COLUMNA " + l.columna + ": Declaracion de main incorrecta."); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Main",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Bloque ::= Lista_Declaraciones_Vac Lista_Instrucciones_Vac 
            {
              Ins RESULT =null;
		ArrayList<Dec> decs = (ArrayList<Dec>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		ArrayList<Ins> ins = (ArrayList<Ins>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new Bloque(decs,ins); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Bloque",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Lista_Instrucciones_Vac ::= Lista_Instrucciones 
            {
              ArrayList<Ins> RESULT =null;
		ArrayList<Ins> ins = (ArrayList<Ins>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = ins; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Lista_Instrucciones_Vac",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Lista_Instrucciones_Vac ::= 
            {
              ArrayList<Ins> RESULT =null;
		 RESULT = new ArrayList<Ins>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Lista_Instrucciones_Vac",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Lista_Instrucciones ::= Lista_Instrucciones Instruccion 
            {
              ArrayList<Ins> RESULT =null;
		ArrayList<Ins> ins = (ArrayList<Ins>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Ins i = (Ins)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 ins.add(i); RESULT = ins; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Lista_Instrucciones",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Lista_Instrucciones ::= Instruccion 
            {
              ArrayList<Ins> RESULT =null;
		Ins i = (Ins)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 ArrayList<Ins> ins = new ArrayList<Ins>(); ins.add(i); RESULT = ins; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Lista_Instrucciones",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Lista_Declaraciones_Vac ::= Lista_Declaraciones 
            {
              ArrayList<Dec> RESULT =null;
		ArrayList<Dec> decs = (ArrayList<Dec>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = decs; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Lista_Declaraciones_Vac",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Lista_Declaraciones_Vac ::= 
            {
              ArrayList<Dec> RESULT =null;
		 RESULT = new ArrayList<Dec>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Lista_Declaraciones_Vac",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Lista_Declaraciones ::= Lista_Declaraciones Declaracion 
            {
              ArrayList<Dec> RESULT =null;
		ArrayList<Dec> decs = (ArrayList<Dec>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 decs.add(d); RESULT = decs; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Lista_Declaraciones",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Lista_Declaraciones ::= Declaracion 
            {
              ArrayList<Dec> RESULT =null;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 ArrayList<Dec> decs = new ArrayList<Dec>(); decs.add(d); RESULT = decs; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Lista_Declaraciones",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Declaraciones_Ini_Vac ::= Declaraciones_Ini 
            {
              ArrayList<Dec> RESULT =null;
		ArrayList<Dec> decs = (ArrayList<Dec>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = decs; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Declaraciones_Ini_Vac",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Declaraciones_Ini_Vac ::= 
            {
              ArrayList<Dec> RESULT =null;
		 RESULT = new ArrayList<Dec> (); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Declaraciones_Ini_Vac",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Declaraciones_Ini ::= Declaraciones_Ini Inicial 
            {
              ArrayList<Dec> RESULT =null;
		ArrayList<Dec> decs = (ArrayList<Dec>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Dec ini = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 decs.add(ini); RESULT = decs; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Declaraciones_Ini",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Declaraciones_Ini ::= Inicial 
            {
              ArrayList<Dec> RESULT =null;
		Dec ini = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 ArrayList<Dec> decs = new ArrayList<Dec>(); decs.add(ini); RESULT = decs; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Declaraciones_Ini",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Inicial ::= Dec_Fun 
            {
              Dec RESULT =null;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = d; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Inicial",38, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Inicial ::= Dec_Void 
            {
              Dec RESULT =null;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = d; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Inicial",38, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Inicial ::= Declaracion 
            {
              Dec RESULT =null;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = d; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Inicial",38, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Declaracion ::= Dec_Tipo 
            {
              Dec RESULT =null;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = d; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Declaracion",37, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Declaracion ::= Dec_Struct 
            {
              Dec RESULT =null;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = d; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Declaracion",37, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Declaracion ::= Dec_Var 
            {
              Dec RESULT =null;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = d; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Declaracion",37, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Dec_Tipo ::= TYPE IDEN ASIGNACION T0 PUNTOYCOMA 
            {
              Dec RESULT =null;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		Type t0 = (Type)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new DecType(iden.fila, iden.columna, iden.lexema, t0); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Dec_Tipo",44, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Dec_Tipo ::= TYPE error PUNTOYCOMA 
            {
              Dec RESULT =null;
		TokenValue p = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 System.out.println("FILA " + p.fila + ", COLUMNA " + p.columna + ": Declaracion de tipo incorrecta."); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Dec_Tipo",44, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Dec_Struct ::= STALINTRUCT IDEN LLABRE CuerpoStruct LLCIERRA 
            {
              Dec RESULT =null;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		ArrayList<Dec> decs = (ArrayList<Dec>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new DecStruct(iden.fila, iden.columna, iden.lexema, new TypeStruct(decs), decs); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Dec_Struct",45, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Dec_Struct ::= STALINTRUCT error LLCIERRA 
            {
              Dec RESULT =null;
		TokenValue l = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 System.out.println("FILA " + l.fila + ", COLUMNA " + l.columna + ": Declaracion de struct incorrecta."); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Dec_Struct",45, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CuerpoStruct ::= Lista_Declaraciones_Vac 
            {
              ArrayList<Dec> RESULT =null;
		ArrayList<Dec> decs = (ArrayList<Dec>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = decs; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("CuerpoStruct",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // T0 ::= POINTER T0 
            {
              Type RESULT =null;
		Type t0 = (Type)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new TypePointer(t0); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("T0",34, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // T0 ::= T1 
            {
              Type RESULT =null;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = t1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("T0",34, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // T1 ::= GUEVARRAY T1 CABRE ENTPOS CCIERRA 
            {
              Type RESULT =null;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		TokenValue tam = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new TypeArray(t1, tam.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("T1",35, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // T1 ::= PABRE T0 PCIERRA 
            {
              Type RESULT =null;
		Type t0 = (Type)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = t0; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("T1",35, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // T1 ::= IDEN 
            {
              Type RESULT =null;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new TypeIden(iden.fila, iden.columna, iden.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("T1",35, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // T1 ::= T2 
            {
              Type RESULT =null;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = t2; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("T1",35, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // T2 ::= LENINT 
            {
              Type RESULT =null;
		 RESULT = new TypeEnt(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("T2",36, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // T2 ::= BOOLSHEVIK 
            {
              Type RESULT =null;
		 RESULT = new TypeBool(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("T2",36, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Dec_Var ::= Dec_Var_Vacia 
            {
              Dec RESULT =null;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = d; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Dec_Var",39, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Dec_Var ::= Dec_Var_Ini 
            {
              Dec RESULT =null;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = d; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Dec_Var",39, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Dec_Var ::= VAR error PUNTOYCOMA 
            {
              Dec RESULT =null;
		TokenValue p = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 System.out.println("FILA " + p.fila + ", COLUMNA " + p.columna + ": Declaracion de variable incorrecta."); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Dec_Var",39, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Dec_Var_Vacia ::= VAR T0 IDEN PUNTOYCOMA 
            {
              Dec RESULT =null;
		Type t0 = (Type)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new DecVar(t0.getFila(), t0.getColumna(), iden.lexema, t0); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Dec_Var_Vacia",40, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Dec_Var_Ini ::= VAR T0 IDEN ASIGNACION Expr PUNTOYCOMA 
            {
              Dec RESULT =null;
		Type t0 = (Type)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new DecVarIni(t0.getFila(), t0.getColumna(), iden.lexema, t0, 
   new InsAsig(iden.fila, iden.columna, new ExpIden(iden.fila, iden.columna, iden.lexema), e,true)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Dec_Var_Ini",41, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Dec_Var_Ini ::= VAR CONST T0 IDEN ASIGNACION Expr PUNTOYCOMA 
            {
              Dec RESULT =null;
		Type t0 = (Type)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new DecVarConst(t0.getFila(), t0.getColumna(), iden.lexema, t0, 
   new InsAsig(iden.fila, iden.columna, new ExpIden(iden.fila, iden.columna, iden.lexema), e, true)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Dec_Var_Ini",41, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Dec_Void ::= VOID IDEN PABRE Lista_Argumentos_Vac PCIERRA LLABRE Bloque LLCIERRA 
            {
              Dec RESULT =null;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		ArrayList<Dec> list_args = (ArrayList<Dec>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Ins b = (Ins)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new DecFunVoid(iden.fila, iden.columna, iden.lexema, new TypeFunVoid(list_args, iden.lexema), list_args, b); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Dec_Void",43, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Dec_Void ::= VOID error LLCIERRA 
            {
              Dec RESULT =null;
		TokenValue l = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 System.out.println("FILA " + l.fila + ", COLUMNA " + l.columna + ": Declaracion de funcion incorrecta."); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Dec_Void",43, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Dec_Fun ::= FUN T0 IDEN PABRE Lista_Argumentos_Vac PCIERRA LLABRE Bloque RETURN Expr PUNTOYCOMA LLCIERRA 
            {
              Dec RESULT =null;
		Type t0 = (Type)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-10)).value;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-9)).value;
		ArrayList<Dec> list_args = (ArrayList<Dec>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-7)).value;
		Ins b = (Ins)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT = new DecFun(t0.getFila(), t0.getColumna(), iden.lexema, new TypeFun(t0, list_args, iden.lexema), t0, list_args, b, e); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Dec_Fun",42, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Dec_Fun ::= FUN error LLCIERRA 
            {
              Dec RESULT =null;
		TokenValue l = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 System.out.println("FILA " + l.fila + ", COLUMNA " + l.columna + ": Declaracion de funcion incorrecta."); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Dec_Fun",42, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Lista_Argumentos_Vac ::= Lista_Argumentos 
            {
              ArrayList<Dec> RESULT =null;
		ArrayList<Dec> list_args = (ArrayList<Dec>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = list_args; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Lista_Argumentos_Vac",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Lista_Argumentos_Vac ::= 
            {
              ArrayList<Dec> RESULT =null;
		 RESULT = new ArrayList<Dec> (); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Lista_Argumentos_Vac",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Lista_Argumentos ::= Lista_Argumentos COMA Argumento 
            {
              ArrayList<Dec> RESULT =null;
		ArrayList<Dec> list_args = (ArrayList<Dec>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Dec arg = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 list_args.add(arg); RESULT = list_args; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Lista_Argumentos",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Lista_Argumentos ::= Argumento 
            {
              ArrayList<Dec> RESULT =null;
		Dec arg = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 ArrayList<Dec> list_args = new ArrayList<Dec> (); list_args.add(arg); RESULT = list_args; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Lista_Argumentos",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Argumento ::= T0 IDEN 
            {
              Dec RESULT =null;
		Type t0 = (Type)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new DecArg(t0.getFila(), t0.getColumna(), iden.lexema, t0); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Argumento",46, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Argumento ::= T0 REF IDEN 
            {
              Dec RESULT =null;
		Type t0 = (Type)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new DecArg(t0.getFila(), t0.getColumna(), iden.lexema, new TypeRef(t0)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Argumento",46, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Instruccion ::= InsAsig 
            {
              Ins RESULT =null;
		Ins i = (Ins)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = i; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instruccion",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Instruccion ::= InsIf 
            {
              Ins RESULT =null;
		Ins i = (Ins)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = i; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instruccion",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Instruccion ::= InsIfElse 
            {
              Ins RESULT =null;
		Ins i = (Ins)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = i; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instruccion",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Instruccion ::= InsWhile 
            {
              Ins RESULT =null;
		Ins i = (Ins)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = i; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instruccion",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Instruccion ::= InsFor 
            {
              Ins RESULT =null;
		Ins i = (Ins)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = i; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instruccion",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Instruccion ::= InsWrite 
            {
              Ins RESULT =null;
		Ins i = (Ins)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = i; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instruccion",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Instruccion ::= InsDelete 
            {
              Ins RESULT =null;
		Ins i = (Ins)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = i; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instruccion",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Instruccion ::= InsCall 
            {
              Ins RESULT =null;
		Ins i = (Ins)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = i; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instruccion",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Instruccion ::= InsSwitch 
            {
              Ins RESULT =null;
		Ins i = (Ins)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = i; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instruccion",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // InsAsig ::= Expr ASIGNACION Expr PUNTOYCOMA 
            {
              Ins RESULT =null;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new InsAsig(e1.getFila(),e1.getColumna(),e1,e2,false); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsAsig",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // InsIf ::= TROTSKIF PABRE Expr PCIERRA LLABRE Bloque LLCIERRA 
            {
              Ins RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Ins b = (Ins)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new InsIf(e.getFila(),e.getColumna(),e,b); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsIf",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // InsIfElse ::= TROTSKIF PABRE Expr PCIERRA LLABRE Bloque LLCIERRA FIDELSECASTRO LLABRE Bloque LLCIERRA 
            {
              Ins RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-8)).value;
		Ins b1 = (Ins)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		Ins b2 = (Ins)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new InsIf_Else(e.getFila(),e.getColumna(),e,b1,b2); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsIfElse",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // InsIfElse ::= TROTSKIF error LLCIERRA 
            {
              Ins RESULT =null;
		TokenValue l = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 System.out.println("FILA " + l.fila + ", COLUMNA " + l.columna + ": Instruccion condicional incorrecta."); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsIfElse",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // InsWhile ::= USSWHILE PABRE Expr PCIERRA LLABRE Bloque LLCIERRA 
            {
              Ins RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Ins b = (Ins)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new InsWhile(e.getFila(),e.getColumna(),e,b); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsWhile",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // InsWhile ::= USSWHILE error LLCIERRA 
            {
              Ins RESULT =null;
		TokenValue l = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 System.out.println("FILA " + l.fila + ", COLUMNA " + l.columna + ": Instruccion USSWhile incorrecta."); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsWhile",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // InsFor ::= FORLETARIAT PABRE Dec_Var_Ini Expr PUNTOYCOMA InsAsig PCIERRA LLABRE Bloque LLCIERRA 
            {
              Ins RESULT =null;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-7)).value;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		Ins asig = (Ins)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Ins b = (Ins)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new InsFor(dec.getFila(),dec.getColumna(),dec,e,asig,b); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsFor",19, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // InsFor ::= FORLETARIAT error LLCIERRA 
            {
              Ins RESULT =null;
		TokenValue l = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 System.out.println("FILA " + l.fila + ", COLUMNA " + l.columna + ": Instruccion forLetariat incorrecta."); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsFor",19, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // InsWrite ::= WRITE PABRE Expr PCIERRA PUNTOYCOMA 
            {
              Ins RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT = new InsWrite(e.getFila(),e.getColumna(),e); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsWrite",20, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // InsDelete ::= DELETE Expr PUNTOYCOMA 
            {
              Ins RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new InsDelete(e.getFila(),e.getColumna(),e); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsDelete",21, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // InsCall ::= CALL E7 PABRE Lista_Param_Vac PCIERRA PUNTOYCOMA 
            {
              Ins RESULT =null;
		Exp e7 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		ArrayList<Exp> list_params = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT = new InsCall(e7.getFila(),e7.getColumna(), new ExpFun(e7.getFila(), e7.getColumna(), e7, list_params)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsCall",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // InsCall ::= CALL error PUNTOYCOMA 
            {
              Ins RESULT =null;
		TokenValue p = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 System.out.println("FILA " + p.fila + ", COLUMNA " + p.columna + ": Llamada a funcion incorrecta."); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsCall",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // InsSwitch ::= CASOVIETS PABRE Expr PCIERRA LLABRE ListaCasos LLCIERRA 
            {
              Ins RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		HashMap<String,Ins> casos = (HashMap<String,Ins>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new InsSwitch(e.getFila(), e.getColumna(), e, casos); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsSwitch",23, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // InsSwitch ::= CASOVIETS error LLCIERRA 
            {
              Ins RESULT =null;
		TokenValue l = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 System.out.println("FILA " + f.fila + ", COLUMNA " + f.columna + ": Instruccion caSoviets incorrecta."); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsSwitch",23, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Lista_Param_Vac ::= Lista_Param 
            {
              ArrayList<Exp> RESULT =null;
		ArrayList<Exp> list_params = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = list_params; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Lista_Param_Vac",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Lista_Param_Vac ::= 
            {
              ArrayList<Exp> RESULT =null;
		 RESULT = new ArrayList<Exp>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Lista_Param_Vac",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Lista_Param ::= Lista_Param COMA Expr 
            {
              ArrayList<Exp> RESULT =null;
		ArrayList<Exp> list_params = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 list_params.add(expr); RESULT = list_params; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Lista_Param",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Lista_Param ::= Expr 
            {
              ArrayList<Exp> RESULT =null;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 ArrayList<Exp> list_params = new ArrayList<Exp>(); list_params.add(expr);  RESULT = list_params; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Lista_Param",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ListaCasos ::= DEFAULT Bloque 
            {
              HashMap<String,Ins> RESULT =null;
		Ins b = (Ins)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 HashMap<String,Ins> c = new HashMap<String,Ins>(); 
      c.put("default",new Bloque(b)); 
      RESULT = c; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("ListaCasos",47, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ListaCasos ::= ListaCasos1 DEFAULT Bloque 
            {
              HashMap<String,Ins> RESULT =null;
		HashMap<String,Ins> l = (HashMap<String,Ins>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Ins bloque = (Ins)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 l.put("default",new Bloque(b)); 
      RESULT = l; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("ListaCasos",47, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ListaCasos ::= ListaCasos1 
            {
              HashMap<String,Ins> RESULT =null;
		HashMap<String,Ins> l = (HashMap<String,Ins>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = l; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("ListaCasos",47, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ListaCasos1 ::= CASE POSICION DOSPUNTOS Bloque 
            {
              HashMap<String,Ins> RESULT =null;
		TokenValue num = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Ins bloque = (Ins)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 HashMap<String,Ins> c = new HashMap<String,Ins>(); 
      c.put(num.lexema,new Bloque(bloque)); 
      RESULT = c; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("ListaCasos1",48, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ListaCasos1 ::= ListaCasos1 CASE POSICION DOSPUNTOS Bloque 
            {
              HashMap<String,Ins> RESULT =null;
		HashMap<String,Ins> l = (HashMap<String,Ins>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		TokenValue num = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Ins bloque = (Ins)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 l.put(num.lexema,new Bloque(bloque)); 
      RESULT = l; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("ListaCasos1",48, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ListaCasos1 ::= error CASE POSICION DOSPUNTOS Bloque 
            {
              HashMap<String,Ins> RESULT =null;
		TokenValue c = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		TokenValue num = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Ins bloque = (Ins)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 System.out.println("FILA " + c.fila + ", COLUMNA " + c.columna + ": Caso incorrecto."); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("ListaCasos1",48, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= E0 
            {
              Exp RESULT =null;
		Exp e0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = e0; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Expr",24, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E0 ::= E0 OR E1 
            {
              Exp RESULT =null;
		Exp e0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ExpOr(e0.getFila(), e0.getColumna(), e0, e1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E0",25, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E0 ::= E1 
            {
              Exp RESULT =null;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = e1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E0",25, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E1 ::= E1 AND E2 
            {
              Exp RESULT =null;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ExpAnd(e1.getFila(), e1.getColumna(), e1, e2); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E1",26, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E1 ::= E2 
            {
              Exp RESULT =null;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = e2; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E1",26, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E2 ::= E2 IGUAL E3 
            {
              Exp RESULT =null;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ExpIgual(e2.getFila(), e2.getColumna(), e2, e3); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E2",27, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E2 ::= E2 DISTINTO E3 
            {
              Exp RESULT =null;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ExpDistinto(e2.getFila(), e2.getColumna(), e2, e3); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E2",27, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // E2 ::= E2 MENORIGUAL E3 
            {
              Exp RESULT =null;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ExpMenIg(e2.getFila(), e2.getColumna(), e2, e3); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E2",27, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // E2 ::= E2 MAYORIGUAL E3 
            {
              Exp RESULT =null;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ExpMayIg(e2.getFila(), e2.getColumna(), e2, e3); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E2",27, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // E2 ::= E2 MENOR E3 
            {
              Exp RESULT =null;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ExpMenor(e2.getFila(), e2.getColumna(), e2, e3); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E2",27, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // E2 ::= E2 MAYOR E3 
            {
              Exp RESULT =null;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ExpMayor(e2.getFila(), e2.getColumna(), e2, e3); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E2",27, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // E2 ::= E3 
            {
              Exp RESULT =null;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = e3; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E2",27, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // E3 ::= E3 MAS E4 
            {
              Exp RESULT =null;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Exp e4 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ExpSuma(e3.getFila(), e3.getColumna(), e3, e4); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E3",28, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // E3 ::= E3 MENOS E4 
            {
              Exp RESULT =null;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Exp e4 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ExpResta(e3.getFila(), e3.getColumna(), e3, e4); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E3",28, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // E3 ::= E4 
            {
              Exp RESULT =null;
		Exp e4 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = e4; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E3",28, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // E4 ::= E4 ASTERISCO E5 
            {
              Exp RESULT =null;
		Exp e4 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Exp e5 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ExpMult(e4.getFila(), e4.getColumna(), e4, e5); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E4",29, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // E4 ::= E4 DIV E5 
            {
              Exp RESULT =null;
		Exp e4 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Exp e5 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ExpDiv(e4.getFila(), e4.getColumna(), e4, e5); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E4",29, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // E4 ::= E4 RESTO E5 
            {
              Exp RESULT =null;
		Exp e4 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Exp e5 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ExpMod(e4.getFila(), e4.getColumna(), e4, e5); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E4",29, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // E4 ::= E5 
            {
              Exp RESULT =null;
		Exp e5 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = e5; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E4",29, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // E5 ::= MAS E6 
            {
              Exp RESULT =null;
		Exp e6 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ExpPos(e6.getFila(), e6.getColumna(), e6); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E5",30, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // E5 ::= MENOS E6 
            {
              Exp RESULT =null;
		Exp e6 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ExpNeg(e6.getFila(), e6.getColumna(), e6); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E5",30, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // E5 ::= ASTERISCO E6 
            {
              Exp RESULT =null;
		Exp e6 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ExpValor(e6.getFila(), e6.getColumna(), e6); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E5",30, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // E5 ::= NEG E6 
            {
              Exp RESULT =null;
		Exp e6 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ExpNot(e6.getFila(), e6.getColumna(), e6); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E5",30, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // E5 ::= REF E6 
            {
              Exp RESULT =null;
		Exp e6 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ExpRef(e6.getFila(), e6.getColumna(), e6); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E5",30, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // E5 ::= E6 
            {
              Exp RESULT =null;
		Exp e6 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = e6; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E5",30, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // E6 ::= NEW T0 
            {
              Exp RESULT =null;
		TokenValue n = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Type t0 = (Type)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ExpNew(n.fila, n.columna, t0); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E6",31, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // E6 ::= RED T0 
            {
              Exp RESULT =null;
		TokenValue r = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Type t0 = (Type)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ExpRead(r.fila, r.columna, t0); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E6",31, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // E6 ::= E7 
            {
              Exp RESULT =null;
		Exp e7 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = e7; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E6",31, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // E7 ::= E7 CABRE Expr CCIERRA 
            {
              Exp RESULT =null;
		Exp e7 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new ExpCorchete(e7.getFila(), e7.getColumna(), e7, expr); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E7",32, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // E7 ::= E7 PUNTO IDEN 
            {
              Exp RESULT =null;
		Exp e7 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ExpPunto(e7.getFila(), e7.getColumna(), e7, iden.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E7",32, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // E7 ::= E7 FLECHA IDEN 
            {
              Exp RESULT =null;
		Exp e7 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ExpFlecha(e7.getFila(), e7.getColumna(), e7, iden.lexema);  
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E7",32, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // E7 ::= E7 PABRE Lista_Param_Vac PCIERRA 
            {
              Exp RESULT =null;
		Exp e7 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		ArrayList<Exp> params = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new ExpFun(e7.getFila(), e7.getColumna(), e7, params); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E7",32, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // E7 ::= E8 
            {
              Exp RESULT =null;
		Exp e8 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = e8; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E7",32, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // E8 ::= ENTPOS 
            {
              Exp RESULT =null;
		TokenValue ent = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ExpEntero(ent.fila, ent.columna, ent.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E8",33, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // E8 ::= BOOL 
            {
              Exp RESULT =null;
		TokenValue bool = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ExpBooleano(bool.fila, bool.columna, bool.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E8",33, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // E8 ::= NULL 
            {
              Exp RESULT =null;
		 RESULT = new ExpNull(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E8",33, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // E8 ::= IDEN 
            {
              Exp RESULT =null;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ExpIden(iden.fila, iden.columna, iden.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E8",33, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // E8 ::= PABRE Expr PCIERRA 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = exp; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E8",33, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructorASTExp$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTExp$do_action(
    int                        CUP$ConstructorASTExp$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTExp$parser,
    java.util.Stack            CUP$ConstructorASTExp$stack,
    int                        CUP$ConstructorASTExp$top)
    throws java.lang.Exception
    {
              return CUP$ConstructorASTExp$do_action_part00000000(
                               CUP$ConstructorASTExp$act_num,
                               CUP$ConstructorASTExp$parser,
                               CUP$ConstructorASTExp$stack,
                               CUP$ConstructorASTExp$top);
    }
}

