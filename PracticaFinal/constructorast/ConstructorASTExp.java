
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sun Apr 14 20:34:58 CEST 2024
//----------------------------------------------------

package constructorast;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import alex.TokenValue;
import errors.GestionErroresTiny;
import ast.*;
import java.util.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sun Apr 14 20:34:58 CEST 2024
  */
public class ConstructorASTExp extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConstructorASTExp() {super();}

  /** Constructor which sets the default scanner. */
  public ConstructorASTExp(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructorASTExp(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\160\000\002\002\004\000\002\002\004\000\002\004" +
    "\006\000\002\004\005\000\002\034\004\000\002\005\003" +
    "\000\002\005\002\000\002\006\004\000\002\006\003\000" +
    "\002\053\003\000\002\053\002\000\002\054\004\000\002" +
    "\054\003\000\002\056\004\000\002\056\003\000\002\057" +
    "\003\000\002\057\003\000\002\057\003\000\002\055\003" +
    "\000\002\055\003\000\002\055\003\000\002\050\007\000" +
    "\002\050\005\000\002\051\007\000\002\051\005\000\002" +
    "\052\003\000\002\035\004\000\002\035\003\000\002\036" +
    "\007\000\002\036\005\000\002\036\003\000\002\036\003" +
    "\000\002\037\003\000\002\037\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\005\000\002\041\006\000\002" +
    "\042\010\000\002\042\011\000\002\044\013\000\002\044" +
    "\006\000\002\043\016\000\002\043\005\000\002\045\003" +
    "\000\002\045\002\000\002\046\005\000\002\046\003\000" +
    "\002\047\004\000\002\047\005\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\010\006\000\002\011\011\000\002\012\015\000" +
    "\002\012\005\000\002\013\011\000\002\013\005\000\002" +
    "\014\014\000\002\014\005\000\002\015\007\000\002\016" +
    "\005\000\002\017\010\000\002\017\005\000\002\032\003" +
    "\000\002\032\002\000\002\033\005\000\002\033\003\000" +
    "\002\020\003\000\002\021\005\000\002\021\003\000\002" +
    "\022\005\000\002\022\003\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\003\000\002\024\005\000" +
    "\002\024\005\000\002\024\003\000\002\025\005\000\002" +
    "\025\005\000\002\025\005\000\002\025\003\000\002\026" +
    "\004\000\002\026\004\000\002\026\004\000\002\026\004" +
    "\000\002\026\004\000\002\026\003\000\002\027\004\000" +
    "\002\027\004\000\002\027\003\000\002\030\006\000\002" +
    "\030\005\000\002\030\005\000\002\030\006\000\002\030" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\314\000\002\001\002\000\004\012\007\001\002\000" +
    "\004\002\006\001\002\000\004\002\000\001\002\000\006" +
    "\003\011\056\012\001\002\000\004\002\001\001\002\000" +
    "\004\057\316\001\002\000\056\004\021\005\ufff7\006\ufff7" +
    "\011\023\015\ufff7\017\ufff7\021\ufff7\022\ufff7\023\ufff7\024" +
    "\ufff7\025\ufff7\026\ufff7\027\ufff7\031\ufff7\032\ufff7\033\ufff7" +
    "\034\ufff7\046\ufff7\047\ufff7\054\ufff7\057\ufff7\065\022\001" +
    "\002\000\056\004\021\005\ufff8\006\ufff8\011\023\015\ufff8" +
    "\017\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\026" +
    "\ufff8\027\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\046\ufff8" +
    "\047\ufff8\054\ufff8\057\ufff8\065\022\001\002\000\004\057" +
    "\314\001\002\000\056\004\uffde\005\uffde\006\uffde\011\uffde" +
    "\015\uffde\017\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025" +
    "\uffde\026\uffde\027\uffde\031\uffde\032\uffde\033\uffde\034\uffde" +
    "\046\uffde\047\uffde\054\uffde\057\uffde\065\uffde\001\002\000" +
    "\050\005\101\006\102\015\103\017\217\021\221\022\224" +
    "\023\072\024\213\025\216\026\100\027\211\031\064\032" +
    "\104\033\060\034\077\046\061\047\066\054\105\057\ufffb" +
    "\001\002\000\056\004\uffed\005\uffed\006\uffed\011\uffed\015" +
    "\uffed\017\uffed\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed" +
    "\026\uffed\027\uffed\031\uffed\032\uffed\033\uffed\034\uffed\046" +
    "\uffed\047\uffed\054\uffed\057\uffed\065\uffed\001\002\000\056" +
    "\004\uffdf\005\uffdf\006\uffdf\011\uffdf\015\uffdf\017\uffdf\021" +
    "\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf" +
    "\031\uffdf\032\uffdf\033\uffdf\034\uffdf\046\uffdf\047\uffdf\054" +
    "\uffdf\057\uffdf\065\uffdf\001\002\000\022\003\172\007\043" +
    "\010\047\013\041\014\046\030\173\031\042\054\051\001" +
    "\002\000\006\003\036\031\037\001\002\000\006\003\027" +
    "\031\030\001\002\000\056\004\ufff5\005\ufff5\006\ufff5\011" +
    "\ufff5\015\ufff5\017\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5" +
    "\025\ufff5\026\ufff5\027\ufff5\031\ufff5\032\ufff5\033\ufff5\034" +
    "\ufff5\046\ufff5\047\ufff5\054\ufff5\057\ufff5\065\ufff5\001\002" +
    "\000\056\004\uffef\005\uffef\006\uffef\011\uffef\015\uffef\017" +
    "\uffef\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef" +
    "\027\uffef\031\uffef\032\uffef\033\uffef\034\uffef\046\uffef\047" +
    "\uffef\054\uffef\057\uffef\065\uffef\001\002\000\056\004\uffee" +
    "\005\uffee\006\uffee\011\uffee\015\uffee\017\uffee\021\uffee\022" +
    "\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee\031\uffee" +
    "\032\uffee\033\uffee\034\uffee\046\uffee\047\uffee\054\uffee\057" +
    "\uffee\065\uffee\001\002\000\004\057\035\001\002\000\004" +
    "\056\031\001\002\000\012\004\021\011\023\057\ufff7\065" +
    "\022\001\002\000\004\057\034\001\002\000\004\057\uffe8" +
    "\001\002\000\056\004\uffea\005\uffea\006\uffea\011\uffea\015" +
    "\uffea\017\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea" +
    "\026\uffea\027\uffea\031\uffea\032\uffea\033\uffea\034\uffea\046" +
    "\uffea\047\uffea\054\uffea\057\uffea\065\uffea\001\002\000\056" +
    "\004\uffe9\005\uffe9\006\uffe9\011\uffe9\015\uffe9\017\uffe9\021" +
    "\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9" +
    "\031\uffe9\032\uffe9\033\uffe9\034\uffe9\046\uffe9\047\uffe9\054" +
    "\uffe9\057\uffe9\065\uffe9\001\002\000\004\060\170\001\002" +
    "\000\004\061\040\001\002\000\016\007\043\010\047\013" +
    "\041\014\046\031\042\054\051\001\002\000\052\031\uffe1" +
    "\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040" +
    "\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1\050\uffe1" +
    "\051\uffe1\055\uffe1\060\uffe1\061\uffe1\063\uffe1\064\uffe1\001" +
    "\002\000\052\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3" +
    "\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\044" +
    "\uffe3\045\uffe3\050\uffe3\051\uffe3\055\uffe3\060\uffe3\061\uffe3" +
    "\063\uffe3\064\uffe3\001\002\000\014\007\043\013\041\014" +
    "\046\031\042\054\051\001\002\000\052\031\uffe2\032\uffe2" +
    "\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041" +
    "\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2\050\uffe2\051\uffe2" +
    "\055\uffe2\060\uffe2\061\uffe2\063\uffe2\064\uffe2\001\002\000" +
    "\050\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6" +
    "\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\045" +
    "\uffe6\051\uffe6\055\uffe6\060\uffe6\061\uffe6\063\uffe6\064\uffe6" +
    "\001\002\000\052\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035" +
    "\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0" +
    "\044\uffe0\045\uffe0\050\uffe0\051\uffe0\055\uffe0\060\uffe0\061" +
    "\uffe0\063\uffe0\064\uffe0\001\002\000\016\007\043\010\047" +
    "\013\041\014\046\031\042\054\051\001\002\000\004\060" +
    "\054\001\002\000\016\007\043\010\047\013\041\014\046" +
    "\031\042\054\051\001\002\000\004\055\053\001\002\000" +
    "\052\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4" +
    "\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4\045" +
    "\uffe4\050\uffe4\051\uffe4\055\uffe4\060\uffe4\061\uffe4\063\uffe4" +
    "\064\uffe4\001\002\000\056\004\uffec\005\uffec\006\uffec\011" +
    "\uffec\015\uffec\017\uffec\021\uffec\022\uffec\023\uffec\024\uffec" +
    "\025\uffec\026\uffec\027\uffec\031\uffec\032\uffec\033\uffec\034" +
    "\uffec\046\uffec\047\uffec\054\uffec\057\uffec\065\uffec\001\002" +
    "\000\050\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036" +
    "\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7" +
    "\045\uffe7\051\uffe7\055\uffe7\060\uffe7\061\uffe7\063\uffe7\064" +
    "\uffe7\001\002\000\004\050\057\001\002\000\032\005\101" +
    "\006\102\015\103\023\072\026\100\031\064\032\104\033" +
    "\060\034\077\046\061\047\066\054\105\001\002\000\020" +
    "\005\101\006\102\015\103\023\072\026\100\031\064\054" +
    "\105\001\002\000\020\005\101\006\102\015\103\023\072" +
    "\026\100\031\064\054\105\001\002\000\056\032\uff97\033" +
    "\uff97\034\uff97\035\uff97\036\uff97\037\uff97\040\uff97\041\uff97" +
    "\042\uff97\043\uff97\044\uff97\045\uff97\050\uff97\051\uff97\052" +
    "\uff97\053\uff97\054\uff97\055\uff97\060\uff97\061\uff97\063\uff97" +
    "\064\uff97\001\002\000\056\032\uff9c\033\uff9c\034\uff9c\035" +
    "\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c" +
    "\044\uff9c\045\uff9c\050\152\051\uff9c\052\151\053\150\054" +
    "\153\055\uff9c\060\uff9c\061\uff9c\063\uff9c\064\uff9c\001\002" +
    "\000\056\032\uff93\033\uff93\034\uff93\035\uff93\036\uff93\037" +
    "\uff93\040\uff93\041\uff93\042\uff93\043\uff93\044\uff93\045\uff93" +
    "\050\uff93\051\uff93\052\uff93\053\uff93\054\uff93\055\uff93\060" +
    "\uff93\061\uff93\063\uff93\064\uff93\001\002\000\046\032\uff9f" +
    "\033\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f\041" +
    "\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\051\uff9f\055\uff9f" +
    "\060\uff9f\061\uff9f\063\uff9f\064\uff9f\001\002\000\020\005" +
    "\101\006\102\015\103\023\072\026\100\031\064\054\105" +
    "\001\002\000\046\032\uffa5\033\uffa5\034\uffa5\035\uffa5\036" +
    "\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5" +
    "\045\uffa5\051\uffa5\055\uffa5\060\uffa5\061\uffa5\063\uffa5\064" +
    "\uffa5\001\002\000\004\051\146\001\002\000\046\032\uffa9" +
    "\033\uffa9\034\131\035\132\036\133\037\uffa9\040\uffa9\041" +
    "\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9\051\uffa9\055\uffa9" +
    "\060\uffa9\061\uffa9\063\uffa9\064\uffa9\001\002\000\016\007" +
    "\043\010\047\013\041\014\046\031\042\054\051\001\002" +
    "\000\040\032\126\033\127\037\uffac\040\uffac\041\uffac\042" +
    "\uffac\043\uffac\044\uffac\045\uffac\051\uffac\055\uffac\060\uffac" +
    "\061\uffac\063\uffac\064\uffac\001\002\000\034\037\121\040" +
    "\117\041\120\042\123\043\124\044\uffb3\045\uffb3\051\uffb3" +
    "\055\uffb3\060\uffb3\061\uffb3\063\uffb3\064\122\001\002\000" +
    "\020\044\115\045\uffb5\051\uffb5\055\uffb5\060\uffb5\061\uffb5" +
    "\063\uffb5\001\002\000\016\045\113\051\uffb7\055\uffb7\060" +
    "\uffb7\061\uffb7\063\uffb7\001\002\000\020\005\101\006\102" +
    "\015\103\023\072\026\100\031\064\054\105\001\002\000" +
    "\016\007\043\010\047\013\041\014\046\031\042\054\051" +
    "\001\002\000\056\032\uff95\033\uff95\034\uff95\035\uff95\036" +
    "\uff95\037\uff95\040\uff95\041\uff95\042\uff95\043\uff95\044\uff95" +
    "\045\uff95\050\uff95\051\uff95\052\uff95\053\uff95\054\uff95\055" +
    "\uff95\060\uff95\061\uff95\063\uff95\064\uff95\001\002\000\056" +
    "\032\uff96\033\uff96\034\uff96\035\uff96\036\uff96\037\uff96\040" +
    "\uff96\041\uff96\042\uff96\043\uff96\044\uff96\045\uff96\050\uff96" +
    "\051\uff96\052\uff96\053\uff96\054\uff96\055\uff96\060\uff96\061" +
    "\uff96\063\uff96\064\uff96\001\002\000\056\032\uff94\033\uff94" +
    "\034\uff94\035\uff94\036\uff94\037\uff94\040\uff94\041\uff94\042" +
    "\uff94\043\uff94\044\uff94\045\uff94\050\uff94\051\uff94\052\uff94" +
    "\053\uff94\054\uff94\055\uff94\060\uff94\061\uff94\063\uff94\064" +
    "\uff94\001\002\000\020\005\101\006\102\015\103\023\072" +
    "\026\100\031\064\054\105\001\002\000\032\005\101\006" +
    "\102\015\103\023\072\026\100\031\064\032\104\033\060" +
    "\034\077\046\061\047\066\054\105\001\002\000\004\055" +
    "\107\001\002\000\056\032\uff92\033\uff92\034\uff92\035\uff92" +
    "\036\uff92\037\uff92\040\uff92\041\uff92\042\uff92\043\uff92\044" +
    "\uff92\045\uff92\050\uff92\051\uff92\052\uff92\053\uff92\054\uff92" +
    "\055\uff92\060\uff92\061\uff92\063\uff92\064\uff92\001\002\000" +
    "\046\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4" +
    "\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4\051" +
    "\uffa4\055\uffa4\060\uffa4\061\uffa4\063\uffa4\064\uffa4\001\002" +
    "\000\046\032\uff9e\033\uff9e\034\uff9e\035\uff9e\036\uff9e\037" +
    "\uff9e\040\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e" +
    "\051\uff9e\055\uff9e\060\uff9e\061\uff9e\063\uff9e\064\uff9e\001" +
    "\002\000\046\032\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2" +
    "\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045" +
    "\uffa2\051\uffa2\055\uffa2\060\uffa2\061\uffa2\063\uffa2\064\uffa2" +
    "\001\002\000\032\005\101\006\102\015\103\023\072\026" +
    "\100\031\064\032\104\033\060\034\077\046\061\047\066" +
    "\054\105\001\002\000\020\044\115\045\uffb6\051\uffb6\055" +
    "\uffb6\060\uffb6\061\uffb6\063\uffb6\001\002\000\032\005\101" +
    "\006\102\015\103\023\072\026\100\031\064\032\104\033" +
    "\060\034\077\046\061\047\066\054\105\001\002\000\034" +
    "\037\121\040\117\041\120\042\123\043\124\044\uffb4\045" +
    "\uffb4\051\uffb4\055\uffb4\060\uffb4\061\uffb4\063\uffb4\064\122" +
    "\001\002\000\032\005\101\006\102\015\103\023\072\026" +
    "\100\031\064\032\104\033\060\034\077\046\061\047\066" +
    "\054\105\001\002\000\032\005\101\006\102\015\103\023" +
    "\072\026\100\031\064\032\104\033\060\034\077\046\061" +
    "\047\066\054\105\001\002\000\032\005\101\006\102\015" +
    "\103\023\072\026\100\031\064\032\104\033\060\034\077" +
    "\046\061\047\066\054\105\001\002\000\032\005\101\006" +
    "\102\015\103\023\072\026\100\031\064\032\104\033\060" +
    "\034\077\046\061\047\066\054\105\001\002\000\032\005" +
    "\101\006\102\015\103\023\072\026\100\031\064\032\104" +
    "\033\060\034\077\046\061\047\066\054\105\001\002\000" +
    "\032\005\101\006\102\015\103\023\072\026\100\031\064" +
    "\032\104\033\060\034\077\046\061\047\066\054\105\001" +
    "\002\000\040\032\126\033\127\037\uffad\040\uffad\041\uffad" +
    "\042\uffad\043\uffad\044\uffad\045\uffad\051\uffad\055\uffad\060" +
    "\uffad\061\uffad\063\uffad\064\uffad\001\002\000\032\005\101" +
    "\006\102\015\103\023\072\026\100\031\064\032\104\033" +
    "\060\034\077\046\061\047\066\054\105\001\002\000\032" +
    "\005\101\006\102\015\103\023\072\026\100\031\064\032" +
    "\104\033\060\034\077\046\061\047\066\054\105\001\002" +
    "\000\046\032\uffaa\033\uffaa\034\131\035\132\036\133\037" +
    "\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa" +
    "\051\uffaa\055\uffaa\060\uffaa\061\uffaa\063\uffaa\064\uffaa\001" +
    "\002\000\032\005\101\006\102\015\103\023\072\026\100" +
    "\031\064\032\104\033\060\034\077\046\061\047\066\054" +
    "\105\001\002\000\032\005\101\006\102\015\103\023\072" +
    "\026\100\031\064\032\104\033\060\034\077\046\061\047" +
    "\066\054\105\001\002\000\032\005\101\006\102\015\103" +
    "\023\072\026\100\031\064\032\104\033\060\034\077\046" +
    "\061\047\066\054\105\001\002\000\046\032\uffa6\033\uffa6" +
    "\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042" +
    "\uffa6\043\uffa6\044\uffa6\045\uffa6\051\uffa6\055\uffa6\060\uffa6" +
    "\061\uffa6\063\uffa6\064\uffa6\001\002\000\046\032\uffa7\033" +
    "\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7" +
    "\042\uffa7\043\uffa7\044\uffa7\045\uffa7\051\uffa7\055\uffa7\060" +
    "\uffa7\061\uffa7\063\uffa7\064\uffa7\001\002\000\046\032\uffa8" +
    "\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8\041" +
    "\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\051\uffa8\055\uffa8" +
    "\060\uffa8\061\uffa8\063\uffa8\064\uffa8\001\002\000\046\032" +
    "\uffab\033\uffab\034\131\035\132\036\133\037\uffab\040\uffab" +
    "\041\uffab\042\uffab\043\uffab\044\uffab\045\uffab\051\uffab\055" +
    "\uffab\060\uffab\061\uffab\063\uffab\064\uffab\001\002\000\040" +
    "\032\126\033\127\037\uffae\040\uffae\041\uffae\042\uffae\043" +
    "\uffae\044\uffae\045\uffae\051\uffae\055\uffae\060\uffae\061\uffae" +
    "\063\uffae\064\uffae\001\002\000\040\032\126\033\127\037" +
    "\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1" +
    "\051\uffb1\055\uffb1\060\uffb1\061\uffb1\063\uffb1\064\uffb1\001" +
    "\002\000\040\032\126\033\127\037\uffb2\040\uffb2\041\uffb2" +
    "\042\uffb2\043\uffb2\044\uffb2\045\uffb2\051\uffb2\055\uffb2\060" +
    "\uffb2\061\uffb2\063\uffb2\064\uffb2\001\002\000\040\032\126" +
    "\033\127\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044" +
    "\uffaf\045\uffaf\051\uffaf\055\uffaf\060\uffaf\061\uffaf\063\uffaf" +
    "\064\uffaf\001\002\000\040\032\126\033\127\037\uffb0\040" +
    "\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\051\uffb0" +
    "\055\uffb0\060\uffb0\061\uffb0\063\uffb0\064\uffb0\001\002\000" +
    "\046\032\uff9d\033\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d" +
    "\040\uff9d\041\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d\051" +
    "\uff9d\055\uff9d\060\uff9d\061\uff9d\063\uff9d\064\uff9d\001\002" +
    "\000\052\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036" +
    "\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5" +
    "\045\uffe5\050\uffe5\051\uffe5\055\uffe5\060\uffe5\061\uffe5\063" +
    "\uffe5\064\uffe5\001\002\000\046\032\uffa0\033\uffa0\034\uffa0" +
    "\035\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043" +
    "\uffa0\044\uffa0\045\uffa0\051\uffa0\055\uffa0\060\uffa0\061\uffa0" +
    "\063\uffa0\064\uffa0\001\002\000\004\031\165\001\002\000" +
    "\004\031\164\001\002\000\032\005\101\006\102\015\103" +
    "\023\072\026\100\031\064\032\104\033\060\034\077\046" +
    "\061\047\066\054\105\001\002\000\034\005\101\006\102" +
    "\015\103\023\072\026\100\031\064\032\104\033\060\034" +
    "\077\046\061\047\066\054\105\055\uffba\001\002\000\006" +
    "\055\uffb8\063\uffb8\001\002\000\006\055\uffbb\063\160\001" +
    "\002\000\004\055\157\001\002\000\056\032\uff98\033\uff98" +
    "\034\uff98\035\uff98\036\uff98\037\uff98\040\uff98\041\uff98\042" +
    "\uff98\043\uff98\044\uff98\045\uff98\050\uff98\051\uff98\052\uff98" +
    "\053\uff98\054\uff98\055\uff98\060\uff98\061\uff98\063\uff98\064" +
    "\uff98\001\002\000\032\005\101\006\102\015\103\023\072" +
    "\026\100\031\064\032\104\033\060\034\077\046\061\047" +
    "\066\054\105\001\002\000\006\055\uffb9\063\uffb9\001\002" +
    "\000\004\051\163\001\002\000\056\032\uff9b\033\uff9b\034" +
    "\uff9b\035\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b" +
    "\043\uff9b\044\uff9b\045\uff9b\050\uff9b\051\uff9b\052\uff9b\053" +
    "\uff9b\054\uff9b\055\uff9b\060\uff9b\061\uff9b\063\uff9b\064\uff9b" +
    "\001\002\000\056\032\uff9a\033\uff9a\034\uff9a\035\uff9a\036" +
    "\uff9a\037\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a" +
    "\045\uff9a\050\uff9a\051\uff9a\052\uff9a\053\uff9a\054\uff9a\055" +
    "\uff9a\060\uff9a\061\uff9a\063\uff9a\064\uff9a\001\002\000\056" +
    "\032\uff99\033\uff99\034\uff99\035\uff99\036\uff99\037\uff99\040" +
    "\uff99\041\uff99\042\uff99\043\uff99\044\uff99\045\uff99\050\uff99" +
    "\051\uff99\052\uff99\053\uff99\054\uff99\055\uff99\060\uff99\061" +
    "\uff99\063\uff99\064\uff99\001\002\000\046\032\uffa1\033\uffa1" +
    "\034\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042" +
    "\uffa1\043\uffa1\044\uffa1\045\uffa1\051\uffa1\055\uffa1\060\uffa1" +
    "\061\uffa1\063\uffa1\064\uffa1\001\002\000\046\032\uffa3\033" +
    "\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3" +
    "\042\uffa3\043\uffa3\044\uffa3\045\uffa3\051\uffa3\055\uffa3\060" +
    "\uffa3\061\uffa3\063\uffa3\064\uffa3\001\002\000\056\004\uffeb" +
    "\005\uffeb\006\uffeb\011\uffeb\015\uffeb\017\uffeb\021\uffeb\022" +
    "\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\031\uffeb" +
    "\032\uffeb\033\uffeb\034\uffeb\046\uffeb\047\uffeb\054\uffeb\057" +
    "\uffeb\065\uffeb\001\002\000\004\031\202\001\002\000\004" +
    "\060\201\001\002\000\016\007\043\010\047\013\041\014" +
    "\046\031\042\054\051\001\002\000\004\031\175\001\002" +
    "\000\004\061\176\001\002\000\032\005\101\006\102\015" +
    "\103\023\072\026\100\031\064\032\104\033\060\034\077" +
    "\046\061\047\066\054\105\001\002\000\004\060\200\001" +
    "\002\000\056\004\uffda\005\uffda\006\uffda\011\uffda\015\uffda" +
    "\017\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026" +
    "\uffda\027\uffda\031\uffda\032\uffda\033\uffda\034\uffda\046\uffda" +
    "\047\uffda\054\uffda\057\uffda\065\uffda\001\002\000\056\004" +
    "\uffdd\005\uffdd\006\uffdd\011\uffdd\015\uffdd\017\uffdd\021\uffdd" +
    "\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\031" +
    "\uffdd\032\uffdd\033\uffdd\034\uffdd\046\uffdd\047\uffdd\054\uffdd" +
    "\057\uffdd\065\uffdd\001\002\000\006\060\203\061\204\001" +
    "\002\000\056\004\uffdc\005\uffdc\006\uffdc\011\uffdc\015\uffdc" +
    "\017\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026" +
    "\uffdc\027\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\046\uffdc" +
    "\047\uffdc\054\uffdc\057\uffdc\065\uffdc\001\002\000\032\005" +
    "\101\006\102\015\103\023\072\026\100\031\064\032\104" +
    "\033\060\034\077\046\061\047\066\054\105\001\002\000" +
    "\004\060\206\001\002\000\056\004\uffdb\005\uffdb\006\uffdb" +
    "\011\uffdb\015\uffdb\017\uffdb\021\uffdb\022\uffdb\023\uffdb\024" +
    "\uffdb\025\uffdb\026\uffdb\027\uffdb\031\uffdb\032\uffdb\033\uffdb" +
    "\034\uffdb\046\uffdb\047\uffdb\054\uffdb\057\uffdb\065\uffdb\001" +
    "\002\000\050\005\uffc9\006\uffc9\015\uffc9\017\uffc9\021\uffc9" +
    "\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\031" +
    "\uffc9\032\uffc9\033\uffc9\034\uffc9\046\uffc9\047\uffc9\054\uffc9" +
    "\057\uffc9\001\002\000\050\005\uffcb\006\uffcb\015\uffcb\017" +
    "\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb" +
    "\027\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\046\uffcb\047" +
    "\uffcb\054\uffcb\057\uffcb\001\002\000\032\005\101\006\102" +
    "\015\103\023\072\026\100\031\064\032\104\033\060\034" +
    "\077\046\061\047\066\054\105\001\002\000\050\005\uffca" +
    "\006\uffca\015\uffca\017\uffca\021\uffca\022\uffca\023\uffca\024" +
    "\uffca\025\uffca\026\uffca\027\uffca\031\uffca\032\uffca\033\uffca" +
    "\034\uffca\046\uffca\047\uffca\054\uffca\057\uffca\001\002\000" +
    "\004\054\306\001\002\000\050\005\101\006\102\015\103" +
    "\017\217\021\221\022\224\023\072\024\213\025\216\026" +
    "\100\027\211\031\064\032\104\033\060\034\077\046\061" +
    "\047\066\054\105\057\ufffc\001\002\000\050\005\uffc8\006" +
    "\uffc8\015\uffc8\017\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8" +
    "\025\uffc8\026\uffc8\027\uffc8\031\uffc8\032\uffc8\033\uffc8\034" +
    "\uffc8\046\uffc8\047\uffc8\054\uffc8\057\uffc8\001\002\000\016" +
    "\003\276\005\101\006\102\015\103\031\064\054\105\001" +
    "\002\000\006\003\262\054\263\001\002\000\050\005\ufff9" +
    "\006\ufff9\015\ufff9\017\ufff9\021\ufff9\022\ufff9\023\ufff9\024" +
    "\ufff9\025\ufff9\026\ufff9\027\ufff9\031\ufff9\032\ufff9\033\ufff9" +
    "\034\ufff9\046\ufff9\047\ufff9\054\ufff9\057\ufff9\001\002\000" +
    "\006\003\252\054\253\001\002\000\050\005\uffcf\006\uffcf" +
    "\015\uffcf\017\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025" +
    "\uffcf\026\uffcf\027\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf" +
    "\046\uffcf\047\uffcf\054\uffcf\057\uffcf\001\002\000\004\061" +
    "\247\001\002\000\006\003\231\054\232\001\002\000\050" +
    "\005\uffcc\006\uffcc\015\uffcc\017\uffcc\021\uffcc\022\uffcc\023" +
    "\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\031\uffcc\032\uffcc" +
    "\033\uffcc\034\uffcc\046\uffcc\047\uffcc\054\uffcc\057\uffcc\001" +
    "\002\000\050\005\uffce\006\uffce\015\uffce\017\uffce\021\uffce" +
    "\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce\031" +
    "\uffce\032\uffce\033\uffce\034\uffce\046\uffce\047\uffce\054\uffce" +
    "\057\uffce\001\002\000\004\057\ufffd\001\002\000\050\005" +
    "\uffcd\006\uffcd\015\uffcd\017\uffcd\021\uffcd\022\uffcd\023\uffcd" +
    "\024\uffcd\025\uffcd\026\uffcd\027\uffcd\031\uffcd\032\uffcd\033" +
    "\uffcd\034\uffcd\046\uffcd\047\uffcd\054\uffcd\057\uffcd\001\002" +
    "\000\004\057\246\001\002\000\004\004\233\001\002\000" +
    "\020\007\043\010\047\013\041\014\046\030\173\031\042" +
    "\054\051\001\002\000\032\005\101\006\102\015\103\023" +
    "\072\026\100\031\064\032\104\033\060\034\077\046\061" +
    "\047\066\054\105\001\002\000\004\060\236\001\002\000" +
    "\032\005\101\006\102\015\103\023\072\026\100\031\064" +
    "\032\104\033\060\034\077\046\061\047\066\054\105\001" +
    "\002\000\004\055\240\001\002\000\004\056\241\001\002" +
    "\000\056\004\021\005\ufff7\006\ufff7\011\023\015\ufff7\017" +
    "\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7" +
    "\027\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7\046\ufff7\047" +
    "\ufff7\054\ufff7\057\ufff7\065\022\001\002\000\004\057\243" +
    "\001\002\000\050\005\uffc1\006\uffc1\015\uffc1\017\uffc1\021" +
    "\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1" +
    "\031\uffc1\032\uffc1\033\uffc1\034\uffc1\046\uffc1\047\uffc1\054" +
    "\uffc1\057\uffc1\001\002\000\004\031\245\001\002\000\004" +
    "\061\204\001\002\000\050\005\uffc0\006\uffc0\015\uffc0\017" +
    "\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0" +
    "\027\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\046\uffc0\047" +
    "\uffc0\054\uffc0\057\uffc0\001\002\000\032\005\101\006\102" +
    "\015\103\023\072\026\100\031\064\032\104\033\060\034" +
    "\077\046\061\047\066\054\105\001\002\000\004\060\251" +
    "\001\002\000\052\005\uffc7\006\uffc7\015\uffc7\017\uffc7\021" +
    "\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7" +
    "\031\uffc7\032\uffc7\033\uffc7\034\uffc7\046\uffc7\047\uffc7\054" +
    "\uffc7\055\uffc7\057\uffc7\001\002\000\004\057\261\001\002" +
    "\000\032\005\101\006\102\015\103\023\072\026\100\031" +
    "\064\032\104\033\060\034\077\046\061\047\066\054\105" +
    "\001\002\000\004\055\255\001\002\000\004\056\256\001" +
    "\002\000\056\004\021\005\ufff7\006\ufff7\011\023\015\ufff7" +
    "\017\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026" +
    "\ufff7\027\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7\046\ufff7" +
    "\047\ufff7\054\ufff7\057\ufff7\065\022\001\002\000\004\057" +
    "\260\001\002\000\050\005\uffc3\006\uffc3\015\uffc3\017\uffc3" +
    "\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027" +
    "\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\046\uffc3\047\uffc3" +
    "\054\uffc3\057\uffc3\001\002\000\050\005\uffc2\006\uffc2\015" +
    "\uffc2\017\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2" +
    "\026\uffc2\027\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\046" +
    "\uffc2\047\uffc2\054\uffc2\057\uffc2\001\002\000\004\057\275" +
    "\001\002\000\032\005\101\006\102\015\103\023\072\026" +
    "\100\031\064\032\104\033\060\034\077\046\061\047\066" +
    "\054\105\001\002\000\004\055\265\001\002\000\004\056" +
    "\266\001\002\000\056\004\021\005\ufff7\006\ufff7\011\023" +
    "\015\ufff7\017\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025" +
    "\ufff7\026\ufff7\027\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7" +
    "\046\ufff7\047\ufff7\054\ufff7\057\ufff7\065\022\001\002\000" +
    "\004\057\270\001\002\000\052\005\uffc6\006\uffc6\015\uffc6" +
    "\017\uffc6\020\271\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025" +
    "\uffc6\026\uffc6\027\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6" +
    "\046\uffc6\047\uffc6\054\uffc6\057\uffc6\001\002\000\004\056" +
    "\272\001\002\000\056\004\021\005\ufff7\006\ufff7\011\023" +
    "\015\ufff7\017\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025" +
    "\ufff7\026\ufff7\027\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7" +
    "\046\ufff7\047\ufff7\054\ufff7\057\ufff7\065\022\001\002\000" +
    "\004\057\274\001\002\000\050\005\uffc5\006\uffc5\015\uffc5" +
    "\017\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026" +
    "\uffc5\027\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\046\uffc5" +
    "\047\uffc5\054\uffc5\057\uffc5\001\002\000\050\005\uffc4\006" +
    "\uffc4\015\uffc4\017\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4" +
    "\025\uffc4\026\uffc4\027\uffc4\031\uffc4\032\uffc4\033\uffc4\034" +
    "\uffc4\046\uffc4\047\uffc4\054\uffc4\057\uffc4\001\002\000\004" +
    "\060\304\001\002\000\012\050\152\052\151\053\150\054" +
    "\300\001\002\000\034\005\101\006\102\015\103\023\072" +
    "\026\100\031\064\032\104\033\060\034\077\046\061\047" +
    "\066\054\105\055\uffba\001\002\000\004\055\302\001\002" +
    "\000\014\050\uff98\052\uff98\053\uff98\054\uff98\060\303\001" +
    "\002\000\050\005\uffbd\006\uffbd\015\uffbd\017\uffbd\021\uffbd" +
    "\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\031" +
    "\uffbd\032\uffbd\033\uffbd\034\uffbd\046\uffbd\047\uffbd\054\uffbd" +
    "\057\uffbd\001\002\000\050\005\uffbc\006\uffbc\015\uffbc\017" +
    "\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc" +
    "\027\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\046\uffbc\047" +
    "\uffbc\054\uffbc\057\uffbc\001\002\000\050\005\ufffa\006\ufffa" +
    "\015\ufffa\017\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025" +
    "\ufffa\026\ufffa\027\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa" +
    "\046\ufffa\047\ufffa\054\ufffa\057\ufffa\001\002\000\032\005" +
    "\101\006\102\015\103\023\072\026\100\031\064\032\104" +
    "\033\060\034\077\046\061\047\066\054\105\001\002\000" +
    "\004\055\310\001\002\000\004\060\311\001\002\000\050" +
    "\005\uffbf\006\uffbf\015\uffbf\017\uffbf\021\uffbf\022\uffbf\023" +
    "\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\031\uffbf\032\uffbf" +
    "\033\uffbf\034\uffbf\046\uffbf\047\uffbf\054\uffbf\057\uffbf\001" +
    "\002\000\004\060\313\001\002\000\050\005\uffbe\006\uffbe" +
    "\015\uffbe\017\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025" +
    "\uffbe\026\uffbe\027\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe" +
    "\046\uffbe\047\uffbe\054\uffbe\057\uffbe\001\002\000\004\002" +
    "\uffff\001\002\000\056\004\ufff6\005\ufff6\006\ufff6\011\ufff6" +
    "\015\ufff6\017\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025" +
    "\ufff6\026\ufff6\027\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6" +
    "\046\ufff6\047\ufff6\054\ufff6\057\ufff6\065\ufff6\001\002\000" +
    "\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\314\000\006\002\004\003\003\001\001\000\004\004" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\034" +
    "\013\040\016\041\017\042\014\050\024\051\025\053\015" +
    "\054\012\055\023\001\001\000\016\040\016\041\017\042" +
    "\014\050\024\051\025\055\314\001\001\000\002\001\001" +
    "\000\002\001\001\000\054\005\226\006\213\007\217\010" +
    "\221\011\225\012\227\013\224\014\207\015\211\016\206" +
    "\017\214\020\222\021\075\022\074\023\073\024\072\025" +
    "\070\026\066\027\064\030\062\031\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\035\170\036\044\037" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\040\016\041\017\042\014" +
    "\050\024\051\025\052\031\053\032\054\012\055\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\035\047\036\044\037\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\036\055\037\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\035\054\036\044\037\043\001\001\000\002\001\001\000" +
    "\010\035\051\036\044\037\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\020\067\021\075\022\074\023\073" +
    "\024\072\025\070\026\066\027\064\030\062\031\061\001" +
    "\001\000\010\027\166\030\062\031\061\001\001\000\010" +
    "\027\165\030\062\031\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\027\146\030\062\031\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\035\144\036\044" +
    "\037\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\027\111\030\062" +
    "\031\061\001\001\000\010\035\110\036\044\037\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\027\107\030\062\031\061\001\001\000\026\020" +
    "\105\021\075\022\074\023\073\024\072\025\070\026\066" +
    "\027\064\030\062\031\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\022\113\023\073\024\072\025\070\026" +
    "\066\027\064\030\062\031\061\001\001\000\002\001\001" +
    "\000\020\023\115\024\072\025\070\026\066\027\064\030" +
    "\062\031\061\001\001\000\002\001\001\000\016\024\143" +
    "\025\070\026\066\027\064\030\062\031\061\001\001\000" +
    "\016\024\142\025\070\026\066\027\064\030\062\031\061" +
    "\001\001\000\016\024\141\025\070\026\066\027\064\030" +
    "\062\031\061\001\001\000\016\024\140\025\070\026\066" +
    "\027\064\030\062\031\061\001\001\000\016\024\137\025" +
    "\070\026\066\027\064\030\062\031\061\001\001\000\016" +
    "\024\124\025\070\026\066\027\064\030\062\031\061\001" +
    "\001\000\002\001\001\000\014\025\136\026\066\027\064" +
    "\030\062\031\061\001\001\000\014\025\127\026\066\027" +
    "\064\030\062\031\061\001\001\000\002\001\001\000\012" +
    "\026\135\027\064\030\062\031\061\001\001\000\012\026" +
    "\134\027\064\030\062\031\061\001\001\000\012\026\133" +
    "\027\064\030\062\031\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\020\161\021\075\022\074\023\073\024\072\025\070" +
    "\026\066\027\064\030\062\031\061\001\001\000\032\020" +
    "\153\021\075\022\074\023\073\024\072\025\070\026\066" +
    "\027\064\030\062\031\061\032\155\033\154\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\020\160\021\075\022\074\023\073\024" +
    "\072\025\070\026\066\027\064\030\062\031\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\035\173\036\044\037\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\020\176\021\075\022" +
    "\074\023\073\024\072\025\070\026\066\027\064\030\062" +
    "\031\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\020\204\021\075\022\074\023\073\024\072\025\070\026" +
    "\066\027\064\030\062\031\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\020\311\021\075\022\074\023\073\024\072\025\070" +
    "\026\066\027\064\030\062\031\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\007\304\010\221\011\225" +
    "\012\227\013\224\014\207\015\211\016\206\017\214\020" +
    "\222\021\075\022\074\023\073\024\072\025\070\026\066" +
    "\027\064\030\062\031\061\001\001\000\002\001\001\000" +
    "\006\030\276\031\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\233\001\001\000\010\035\243\036\044\037\043" +
    "\001\001\000\026\020\234\021\075\022\074\023\073\024" +
    "\072\025\070\026\066\027\064\030\062\031\061\001\001" +
    "\000\002\001\001\000\030\010\236\020\222\021\075\022" +
    "\074\023\073\024\072\025\070\026\066\027\064\030\062" +
    "\031\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\034\241\040\016\041\017\042\014\050\024\051\025" +
    "\053\015\054\012\055\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\020\247\021\075\022\074\023\073\024" +
    "\072\025\070\026\066\027\064\030\062\031\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\020\253\021\075\022\074\023\073\024\072\025\070" +
    "\026\066\027\064\030\062\031\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\034\256\040\016\041\017" +
    "\042\014\050\024\051\025\053\015\054\012\055\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\020\263\021\075\022\074\023" +
    "\073\024\072\025\070\026\066\027\064\030\062\031\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\034" +
    "\266\040\016\041\017\042\014\050\024\051\025\053\015" +
    "\054\012\055\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\034\272\040\016\041\017" +
    "\042\014\050\024\051\025\053\015\054\012\055\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\020\153\021" +
    "\075\022\074\023\073\024\072\025\070\026\066\027\064" +
    "\030\062\031\061\032\300\033\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\020\306\021\075\022\074\023" +
    "\073\024\072\025\070\026\066\027\064\030\062\031\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructorASTExp$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructorASTExp$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructorASTExp$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConstructorASTExp$actions {
  private final ConstructorASTExp parser;

  /** Constructor */
  CUP$ConstructorASTExp$actions(ConstructorASTExp parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTExp$do_action_part00000000(
    int                        CUP$ConstructorASTExp$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTExp$parser,
    java.util.Stack            CUP$ConstructorASTExp$stack,
    int                        CUP$ConstructorASTExp$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructorASTExp$result;

      /* select the action based on the action number */
      switch (CUP$ConstructorASTExp$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programa ::= Declaraciones Main 
            {
              Program RESULT =null;
		ArrayList<Dec> decs = (ArrayList<Dec>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		DecMain m = (DecMain)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new Program(m.fila, m.columna, decs, m); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Programa",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		RESULT = start_val;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ConstructorASTExp$parser.done_parsing();
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Main ::= MAIN LLABRE Bloque LLCIERRA 
            {
              DecMain RESULT =null;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new DecMain(b.fila(), b.columna(), "main", new TypeFunVoid(new ArrayList<Dec> ()), new ArrayList<Dec> (), b); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Main",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Main ::= MAIN error LLCIERRA 
            {
              DecMain RESULT =null;
		TokenValue l = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 System.out.println("FILA " + l.fila + ", COLUMNA " + l.columna + ": Declaracion de main incorrecta."); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Main",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Bloque ::= Lista_Declaraciones_Vac Lista_Instrucciones_Vac 
            {
              Object RESULT =null;
		Object decs = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new Bloque(decs,ins); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Bloque",26, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Lista_Instrucciones_Vac ::= Lista_Instrucciones 
            {
              Object RESULT =null;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = ins; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Lista_Instrucciones_Vac",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Lista_Instrucciones_Vac ::= 
            {
              Object RESULT =null;
		 RESULT = new ArrayList<Ins>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Lista_Instrucciones_Vac",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Lista_Instrucciones ::= Lista_Instrucciones Instruccion 
            {
              Object RESULT =null;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 ins.add(i); RESULT = ins; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Lista_Instrucciones",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Lista_Instrucciones ::= Instruccion 
            {
              Object RESULT =null;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 ArrayList<Ins> ins = new ArrayList<Ins>(); ins.add(i); RESULT = ins; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Lista_Instrucciones",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Lista_Declaraciones_Vac ::= Lista_Declaraciones 
            {
              Object RESULT =null;
		Object decs = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = decs; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Lista_Declaraciones_Vac",41, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Lista_Declaraciones_Vac ::= 
            {
              Object RESULT =null;
		 RESULT = new ArrayList<Dec>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Lista_Declaraciones_Vac",41, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Lista_Declaraciones ::= Lista_Declaraciones Declaracion 
            {
              Object RESULT =null;
		Object decs = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 decs.add(d); RESULT = decs; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Lista_Declaraciones",42, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Lista_Declaraciones ::= Declaracion 
            {
              Object RESULT =null;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 ArrayList<Dec> decs = new ArrayList<Dec>(); decs.add(d); RESULT = decs; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Lista_Declaraciones",42, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Declaraciones_Ini ::= Declaraciones_Ini Inicial 
            {
              Object RESULT =null;
		Object decs = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 decs.add(ini); RESULT = decs; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Declaraciones_Ini",44, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Declaraciones_Ini ::= Inicial 
            {
              Object RESULT =null;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 ArrayList<Dec> decs = new ArrayList<Dec>(); decs.add(ini); RESULT = decs; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Declaraciones_Ini",44, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Inicial ::= Dec_Fun 
            {
              Object RESULT =null;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = d; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Inicial",45, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Inicial ::= Dec_Void 
            {
              Object RESULT =null;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = d; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Inicial",45, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Inicial ::= Declaracion 
            {
              Object RESULT =null;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = d; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Inicial",45, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Declaracion ::= Dec_Tipo 
            {
              Object RESULT =null;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = d; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Declaracion",43, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Declaracion ::= Dec_Struct 
            {
              Object RESULT =null;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = d; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Declaracion",43, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Declaracion ::= Dec_Var 
            {
              Object RESULT =null;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = d; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Declaracion",43, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Dec_Tipo ::= TYPE IDEN ASIGNACION T0 PUNTOYCOMA 
            {
              Object RESULT =null;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		Object t0 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new DecType(iden.fila, iden.columna, iden.lexema, t0); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Dec_Tipo",38, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Dec_Tipo ::= TYPE error PUNTOYCOMA 
            {
              Object RESULT =null;
		TokenValue p = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 System.out.println("FILA " + p.fila + ", COLUMNA " + p.columna + ": Declaracion de tipo incorrecta."); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Dec_Tipo",38, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Dec_Struct ::= STALINTRUCT IDEN LLABRE CuerpoStruct LLCIERRA 
            {
              Object RESULT =null;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		Object decs = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new DecStruct(iden.fila, iden.columna, iden.lexema, new TypeStruct(decs), decs); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Dec_Struct",39, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Dec_Struct ::= STALINTRUCT error LLCIERRA 
            {
              Object RESULT =null;
		TokenValue l = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 System.out.println("FILA " + l.fila + ", COLUMNA " + l.columna + ": Declaracion de struct incorrecta."); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Dec_Struct",39, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CuerpoStruct ::= Lista_Declaraciones_Vac 
            {
              Object RESULT =null;
		Object decs = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = decs; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("CuerpoStruct",40, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // T0 ::= POINTER T0 
            {
              Object RESULT =null;
		Object t0 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new TypePointer(t0); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("T0",27, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // T0 ::= T1 
            {
              Object RESULT =null;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = t1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("T0",27, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // T1 ::= GUEVARRAY T1 CABRE Expr CCIERRA 
            {
              Object RESULT =null;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new TypeArray(t1.fila(), t1.columna(), t1, e); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("T1",28, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // T1 ::= PABRE T0 PCIERRA 
            {
              Object RESULT =null;
		Object t0 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = t0; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("T1",28, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // T1 ::= IDEN 
            {
              Object RESULT =null;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new TypeIden(iden.fila, iden.columna, iden.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("T1",28, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // T1 ::= T2 
            {
              Object RESULT =null;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = t2; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("T1",28, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // T2 ::= LENINT 
            {
              Object RESULT =null;
		 RESULT = new TypeEnt(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("T2",29, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // T2 ::= BOOLSHEVIK 
            {
              Object RESULT =null;
		 RESULT = new TypeBool(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("T2",29, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Dec_Var ::= Dec_Var_Vacia 
            {
              Object RESULT =null;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = d; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Dec_Var",30, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Dec_Var ::= Dec_Var_Ini 
            {
              Object RESULT =null;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = d; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Dec_Var",30, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Dec_Var ::= VAR error PUNTOYCOMA 
            {
              Object RESULT =null;
		TokenValue p = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 System.out.println("FILA " + p.fila + ", COLUMNA " + p.columna + ": Declaracion de variable incorrecta."); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Dec_Var",30, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Dec_Var_Vacia ::= VAR T0 IDEN PUNTOYCOMA 
            {
              Object RESULT =null;
		Object t0 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new DecVar(t0.fila(), t0.columna(), iden.lexema, t0); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Dec_Var_Vacia",31, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Dec_Var_Ini ::= VAR T0 IDEN ASIGNACION Expr PUNTOYCOMA 
            {
              Object RESULT =null;
		Object t0 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new DecVarIni(t0.fila(), t0.columna(), iden.lexema, t0, 
   new InsAsig(iden.fila, iden.columna, new ExpIden(iden.fila, iden.columna, iden.lexema), e)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Dec_Var_Ini",32, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Dec_Var_Ini ::= VAR CONST T0 IDEN ASIGNACION Expr PUNTOYCOMA 
            {
              Object RESULT =null;
		Object t0 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new DecVarConst(t0.fila(), t0.columna(), iden.lexema, t0, 
   new InsAsig(iden.fila, iden.columna, new ExpIden(iden.fila, iden.columna, iden.lexema), e)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Dec_Var_Ini",32, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Dec_Void ::= FUN VOID IDEN PABRE Lista_Argumentos_Vac PCIERRA LLABRE Bloque LLCIERRA 
            {
              Object RESULT =null;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		Object list_args = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new DecFunVoid(iden.fila, iden.columna, iden.lexema, new TypeFunVoid(list_args), list_args, b); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Dec_Void",34, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Dec_Void ::= FUN VOID error LLCIERRA 
            {
              Object RESULT =null;
		TokenValue l = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 System.out.println("FILA " + l.fila + ", COLUMNA " + l.columna + ": Declaracion de funcion incorrecta."); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Dec_Void",34, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Dec_Fun ::= FUN T0 IDEN PABRE Lista_Argumentos_Vac PCIERRA LLABRE Bloque RETURN Expr PUNTOYCOMA LLCIERRA 
            {
              Object RESULT =null;
		Object t0 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-10)).value;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-9)).value;
		Object list_args = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-7)).value;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT = new DecFun(t0.fila(), t0.columna(), iden.lexema, new TypeFun(t0, list_args), t0, list_args, b, e); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Dec_Fun",33, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Dec_Fun ::= FUN error LLCIERRA 
            {
              Object RESULT =null;
		TokenValue l = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 System.out.println("FILA " + l.fila + ", COLUMNA " + l.columna + ": Declaracion de funcion incorrecta."); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Dec_Fun",33, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Lista_Argumentos_Vac ::= Lista_Argumentos 
            {
              Object RESULT =null;
		Object list_args = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = list_args; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Lista_Argumentos_Vac",35, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Lista_Argumentos_Vac ::= 
            {
              Object RESULT =null;
		 RESULT = new ArrayList<Dec> (); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Lista_Argumentos_Vac",35, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Lista_Argumentos ::= Lista_Argumentos COMA Argumento 
            {
              Object RESULT =null;
		Object list_args = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Object arg = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 list_args.add(arg); RESULT = list_args; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Lista_Argumentos",36, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Lista_Argumentos ::= Argumento 
            {
              Object RESULT =null;
		Object arg = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 ArrayList<Dec> list_args (); list_args.add(arg); RESULT = list_args; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Lista_Argumentos",36, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Argumento ::= T0 IDEN 
            {
              Object RESULT =null;
		Object t0 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new DecArg(t0.fila(), t0.columna(), iden.lexema, t0); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Argumento",37, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Argumento ::= T0 REF IDEN 
            {
              Object RESULT =null;
		Object t0 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new DecArg(t0.fila(), t0.columna(), iden.lexema, new TypeRef(t0)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Argumento",37, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Instruccion ::= InsAsig 
            {
              Object RESULT =null;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = i; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instruccion",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Instruccion ::= InsIf 
            {
              Object RESULT =null;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = i; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instruccion",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Instruccion ::= InsIfElse 
            {
              Object RESULT =null;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = i; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instruccion",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Instruccion ::= InsWhile 
            {
              Object RESULT =null;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = i; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instruccion",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Instruccion ::= InsFor 
            {
              Object RESULT =null;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = i; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instruccion",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Instruccion ::= InsWrite 
            {
              Object RESULT =null;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = i; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instruccion",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Instruccion ::= InsDelete 
            {
              Object RESULT =null;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = i; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instruccion",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Instruccion ::= InsCall 
            {
              Object RESULT =null;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = i; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instruccion",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // InsAsig ::= Expr ASIGNACION Expr PUNTOYCOMA 
            {
              Object RESULT =null;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new InsAsig(e1.getFila(),e1.getColumna(),e1,e2); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsAsig",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // InsIf ::= TROTSKIF PABRE Expr PCIERRA LLABRE Bloque LLCIERRA 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new InsIf(e.getFila(),e.getColumna(),e,b); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsIf",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // InsIfElse ::= TROTSKIF PABRE Expr PCIERRA LLABRE Bloque LLCIERRA FIDELSECASTRO LLABRE Bloque LLCIERRA 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-8)).value;
		Object b1 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		Object b2 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new InsIf_Else(e.getFila(),e.getColumna(),e,b1,b2); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsIfElse",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // InsIfElse ::= TROTSKIF error LLCIERRA 
            {
              Object RESULT =null;
		TokenValue l = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 System.out.println("FILA " + l.fila + ", COLUMNA " + l.columna + ": Instruccion condicional incorrecta."); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsIfElse",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // InsWhile ::= USSWHILE PABRE Expr PCIERRA LLABRE Bloque LLCIERRA 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new InsWhile(e.getFila(),e.getColumna(),e,b); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsWhile",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // InsWhile ::= USSWHILE error LLCIERRA 
            {
              Object RESULT =null;
		TokenValue l = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 System.out.println("FILA " + l.fila + ", COLUMNA " + l.columna + ": Instruccion USSWhile incorrecta."); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsWhile",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // InsFor ::= FORLETARIAT PABRE Dec_Var_Ini Expr PUNTOYCOMA InsAsig PCIERRA LLABRE Bloque LLCIERRA 
            {
              Object RESULT =null;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-7)).value;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new InsFor(dec.getFila(),dec.getColumna(),dec,e,asig,b); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsFor",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // InsFor ::= FORLETARIAT error LLCIERRA 
            {
              Object RESULT =null;
		TokenValue l = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 System.out.println("FILA " + l.fila + ", COLUMNA " + l.columna + ": Instruccion forLetariat incorrecta."); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsFor",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // InsWrite ::= WRITE PABRE Expr PCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT = new InsWrite(e.getFila(),e.getColumna(),e); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsWrite",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // InsDelete ::= DELETE Expr PUNTOYCOMA 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new InsDelete(e.getFila(),e.getColumna(),e); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsDelete",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // InsCall ::= CALL E7 PABRE Lista_Param_Vac PCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
		Object e7 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Object list_params = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT = new InsCall(e7.getFila(),e7.getColumna(), new ExpFun(e7.getFila(), e7.getColumna(), e7, list_params)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsCall",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // InsCall ::= CALL error PUNTOYCOMA 
            {
              Object RESULT =null;
		TokenValue p = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 System.out.println("FILA " + p.fila + ", COLUMNA " + p.columna + ": Llamada a funcion incorrecta."); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsCall",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Lista_Param_Vac ::= Lista_Param 
            {
              Object RESULT =null;
		Object list_params = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = list_params; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Lista_Param_Vac",24, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Lista_Param_Vac ::= 
            {
              Object RESULT =null;
		 RESULT = new ArrayList<Exp>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Lista_Param_Vac",24, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Lista_Param ::= Lista_Param COMA Expr 
            {
              Object RESULT =null;
		Object list_params = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 list_params.add(expr); RESULT = list_params; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Lista_Param",25, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Lista_Param ::= Expr 
            {
              Object RESULT =null;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 ArrayList<Exp> list_params = new ArrayList<Exp>(); list_params.add(expr);  RESULT = list_params; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Lista_Param",25, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= E0 
            {
              Object RESULT =null;
		Object e0 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = e0; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Expr",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E0 ::= E0 OR E1 
            {
              Object RESULT =null;
		Object e0 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ExpOr(e0.getFila(), e0.getColumna(), e0, e1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E0",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E0 ::= E1 
            {
              Object RESULT =null;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = e1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E0",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E1 ::= E1 AND E2 
            {
              Object RESULT =null;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ExpAnd(e1.getFila(), e1.getColumna(), e1, e2); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E1",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E1 ::= E2 
            {
              Object RESULT =null;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = e2; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E1",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E2 ::= E2 IGUAL E3 
            {
              Object RESULT =null;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ExpIgual(e2.getFila(), e2.getColumna(), e2, e3); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E2",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E2 ::= E2 DISTINTO E3 
            {
              Object RESULT =null;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ExpDistinto(e2.getFila(), e2.getColumna(), e2, e3); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E2",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E2 ::= E2 MENORIGUAL E3 
            {
              Object RESULT =null;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ExpMenIg(e2.getFila(), e2.getColumna(), e2, e3); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E2",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E2 ::= E2 MAYORIGUAL E3 
            {
              Object RESULT =null;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ExpMayIg(e2.getFila(), e2.getColumna(), e2, e3); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E2",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E2 ::= E2 MENOR E3 
            {
              Object RESULT =null;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ExpMenor(e2.getFila(), e2.getColumna(), e2, e3); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E2",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E2 ::= E2 MAYOR E3 
            {
              Object RESULT =null;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ExpMayor(e2.getFila(), e2.getColumna(), e2, e3); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E2",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E2 ::= E3 
            {
              Object RESULT =null;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = e3; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E2",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E3 ::= E3 MAS E4 
            {
              Object RESULT =null;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ExpSuma(e3.getFila(), e3.getColumna(), e3, e4); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E3",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E3 ::= E3 MENOS E4 
            {
              Object RESULT =null;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ExpResta(e3.getFila(), e3.getColumna(), e3, e4); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E3",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E3 ::= E4 
            {
              Object RESULT =null;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = e4; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E3",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E4 ::= E4 ASTERISCO E5 
            {
              Object RESULT =null;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ExpMult(e4.getFila(), e4.getColumna(), e4, e5); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E4",19, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E4 ::= E4 DIV E5 
            {
              Object RESULT =null;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ExpDiv(e4.getFila(), e4.getColumna(), e4, e5); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E4",19, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E4 ::= E4 RESTO E5 
            {
              Object RESULT =null;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ExpMod(e4.getFila(), e4.getColumna(), e4, e5); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E4",19, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // E4 ::= E5 
            {
              Object RESULT =null;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = e5; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E4",19, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // E5 ::= MAS E6 
            {
              Object RESULT =null;
		Object e6 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ExpPos(e6.getFila(), e6.getColumna(), e6); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E5",20, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // E5 ::= MENOS E6 
            {
              Object RESULT =null;
		Object e6 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ExpNeg(e6.getFila(), e6.getColumna(), e6); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E5",20, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // E5 ::= ASTERISCO E6 
            {
              Object RESULT =null;
		Object e6 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ExpValor(e6.getFila(), e6.getColumna(), e6); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E5",20, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // E5 ::= NEG E6 
            {
              Object RESULT =null;
		Object e6 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ExpNot(e6.getFila(), e6.getColumna(), e6); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E5",20, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // E5 ::= REF E6 
            {
              Object RESULT =null;
		Object e6 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ExpRef(e6.getFila(), e6.getColumna(), e6); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E5",20, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // E5 ::= E6 
            {
              Object RESULT =null;
		Object e6 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = e6; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E5",20, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // E6 ::= NEW T0 
            {
              Object RESULT =null;
		TokenValue n = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ExpNew(n.getFila(), n.getColumna(), tipo); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E6",21, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // E6 ::= RED T0 
            {
              Object RESULT =null;
		TokenValue r = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ExpRead(r.getFila(), r.getColumna(), tipo); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E6",21, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // E6 ::= E7 
            {
              Object RESULT =null;
		Object e7 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = e7; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E6",21, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // E7 ::= E7 CABRE Expr CCIERRA 
            {
              Object RESULT =null;
		Object e7 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new ExpCorchete(e7.getFila(), e7.getColumna(), e7, expr) 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E7",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // E7 ::= E7 PUNTO IDEN 
            {
              Object RESULT =null;
		Object e7 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ExpPunto(e7.getFila(), e7.getColumna(), e7, iden.lexema) 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E7",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // E7 ::= E7 FLECHA IDEN 
            {
              Object RESULT =null;
		Object e7 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ExpFlecha(e7.getFila(), e7.getColumna(), e7, iden.lexema);  
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E7",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // E7 ::= E7 PABRE Lista_Param_Vac PCIERRA 
            {
              Object RESULT =null;
		Object e7 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new ExpFun(e7.getFila(), e7.getColumna(), e7, params) 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E7",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // E7 ::= E8 
            {
              Object RESULT =null;
		Object e8 = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = e8; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E7",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // E8 ::= ENTPOS 
            {
              Object RESULT =null;
		TokenValue ent = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ExpEntero(ent.fila, ent.columna, ent.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E8",23, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // E8 ::= BOOL 
            {
              Object RESULT =null;
		TokenValue bool = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ExpBooleano(bool.fila, bool.columna, bool.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E8",23, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // E8 ::= NULL 
            {
              Object RESULT =null;
		 RESULT = new ExpNull(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E8",23, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // E8 ::= IDEN 
            {
              Object RESULT =null;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ExpIden(iden.fila, iden.columna, iden.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E8",23, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // E8 ::= PABRE Expr PCIERRA 
            {
              Object RESULT =null;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = exp; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E8",23, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructorASTExp$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTExp$do_action(
    int                        CUP$ConstructorASTExp$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTExp$parser,
    java.util.Stack            CUP$ConstructorASTExp$stack,
    int                        CUP$ConstructorASTExp$top)
    throws java.lang.Exception
    {
              return CUP$ConstructorASTExp$do_action_part00000000(
                               CUP$ConstructorASTExp$act_num,
                               CUP$ConstructorASTExp$parser,
                               CUP$ConstructorASTExp$stack,
                               CUP$ConstructorASTExp$top);
    }
}

