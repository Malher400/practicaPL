
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Tue Mar 26 03:21:53 CET 2024
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Tue Mar 26 03:21:53 CET 2024
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\003\000\002\002\004\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\005\006\000\002\006\007\000\002" +
    "\007\011\000\002\010\007\000\002\011\004\000\002\012" +
    "\005\000\002\013\005\000\002\014\010\000\002\031\004" +
    "\000\002\027\003\000\002\027\002\000\002\030\005\000" +
    "\002\030\003\000\002\015\003\000\002\016\005\000\002" +
    "\016\003\000\002\017\005\000\002\017\003\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\003\000" +
    "\002\021\005\000\002\021\005\000\002\021\003\000\002" +
    "\022\005\000\002\022\005\000\002\022\005\000\002\022" +
    "\003\000\002\023\004\000\002\023\004\000\002\023\004" +
    "\000\002\023\004\000\002\023\004\000\002\023\003\000" +
    "\002\024\004\000\002\024\004\000\002\024\004\000\002" +
    "\024\004\000\002\024\003\000\002\025\006\000\002\025" +
    "\005\000\002\025\005\000\002\025\006\000\002\025\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\164\000\046\005\015\006\035\015\025\017\017\021" +
    "\021\022\032\023\013\024\012\025\016\026\023\027\007" +
    "\031\033\032\051\033\024\034\005\046\031\047\006\054" +
    "\027\001\002\000\004\002\ufff9\001\002\000\020\005\015" +
    "\006\035\015\025\023\013\026\023\031\033\054\027\001" +
    "\002\000\020\005\015\006\035\015\025\023\013\026\023" +
    "\031\033\054\027\001\002\000\032\005\015\006\035\015" +
    "\025\023\013\026\023\031\033\032\051\033\024\034\005" +
    "\046\031\047\006\054\027\001\002\000\004\002\ufffb\001" +
    "\002\000\004\002\ufffa\001\002\000\032\005\015\006\035" +
    "\015\025\023\013\026\023\031\033\032\051\033\024\034" +
    "\005\046\031\047\006\054\027\001\002\000\006\013\160" +
    "\014\157\001\002\000\004\002\ufff8\001\002\000\054\032" +
    "\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6" +
    "\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\050\uffc6\051" +
    "\uffc6\052\uffc6\053\uffc6\055\uffc6\060\uffc6\061\uffc6\063\uffc6" +
    "\064\uffc6\001\002\000\004\031\152\001\002\000\004\054" +
    "\144\001\002\000\004\002\001\001\002\000\004\054\140" +
    "\001\002\000\004\002\uffff\001\002\000\006\013\137\014" +
    "\136\001\002\000\020\005\015\006\035\015\025\023\013" +
    "\026\023\031\033\054\027\001\002\000\054\032\uffc5\033" +
    "\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5" +
    "\042\uffc5\043\uffc5\044\uffc5\045\uffc5\050\uffc5\051\uffc5\052" +
    "\uffc5\053\uffc5\055\uffc5\060\uffc5\061\uffc5\063\uffc5\064\uffc5" +
    "\001\002\000\004\002\134\001\002\000\032\005\015\006" +
    "\035\015\025\023\013\026\023\031\033\032\051\033\024" +
    "\034\005\046\031\047\006\054\027\001\002\000\004\061" +
    "\127\001\002\000\020\005\015\006\035\015\025\023\013" +
    "\026\023\031\033\054\027\001\002\000\004\056\124\001" +
    "\002\000\056\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4" +
    "\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045" +
    "\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054\114\055\uffc4" +
    "\060\uffc4\061\uffc4\063\uffc4\064\uffc4\001\002\000\004\002" +
    "\ufffc\001\002\000\054\032\uffc7\033\uffc7\034\uffc7\035\uffc7" +
    "\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044" +
    "\uffc7\045\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\055\uffc7" +
    "\060\uffc7\061\uffc7\063\uffc7\064\uffc7\001\002\000\054\032" +
    "\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8" +
    "\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\050\uffc8\051" +
    "\uffc8\052\uffc8\053\uffc8\055\uffc8\060\uffc8\061\uffc8\063\uffc8" +
    "\064\uffc8\001\002\000\054\032\uffcd\033\uffcd\034\uffcd\035" +
    "\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd" +
    "\044\uffcd\045\uffcd\050\107\051\uffcd\052\106\053\105\055" +
    "\uffcd\060\uffcd\061\uffcd\063\uffcd\064\uffcd\001\002\000\046" +
    "\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040" +
    "\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\051\uffd2" +
    "\055\uffd2\060\uffd2\061\uffd2\063\uffd2\064\uffd2\001\002\000" +
    "\046\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8" +
    "\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\051" +
    "\uffd8\055\uffd8\060\uffd8\061\uffd8\063\uffd8\064\uffd8\001\002" +
    "\000\046\032\uffdc\033\uffdc\034\071\035\072\036\073\037" +
    "\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc" +
    "\051\uffdc\055\uffdc\060\uffdc\061\uffdc\063\uffdc\064\uffdc\001" +
    "\002\000\040\032\066\033\067\037\uffdf\040\uffdf\041\uffdf" +
    "\042\uffdf\043\uffdf\044\uffdf\045\uffdf\051\uffdf\055\uffdf\060" +
    "\uffdf\061\uffdf\063\uffdf\064\uffdf\001\002\000\034\037\061" +
    "\040\057\041\060\042\063\043\064\044\uffe6\045\uffe6\051" +
    "\uffe6\055\uffe6\060\uffe6\061\uffe6\063\uffe6\064\062\001\002" +
    "\000\004\002\ufffe\001\002\000\020\044\055\045\uffe8\051" +
    "\uffe8\055\uffe8\060\uffe8\061\uffe8\063\uffe8\001\002\000\016" +
    "\045\053\051\uffea\055\uffea\060\uffea\061\uffea\063\uffea\001" +
    "\002\000\004\002\ufffd\001\002\000\020\005\015\006\035" +
    "\015\025\023\013\026\023\031\033\054\027\001\002\000" +
    "\046\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7" +
    "\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\051" +
    "\uffd7\055\uffd7\060\uffd7\061\uffd7\063\uffd7\064\uffd7\001\002" +
    "\000\032\005\015\006\035\015\025\023\013\026\023\031" +
    "\033\032\051\033\024\034\005\046\031\047\006\054\027" +
    "\001\002\000\020\044\055\045\uffe9\051\uffe9\055\uffe9\060" +
    "\uffe9\061\uffe9\063\uffe9\001\002\000\032\005\015\006\035" +
    "\015\025\023\013\026\023\031\033\032\051\033\024\034" +
    "\005\046\031\047\006\054\027\001\002\000\034\037\061" +
    "\040\057\041\060\042\063\043\064\044\uffe7\045\uffe7\051" +
    "\uffe7\055\uffe7\060\uffe7\061\uffe7\063\uffe7\064\062\001\002" +
    "\000\032\005\015\006\035\015\025\023\013\026\023\031" +
    "\033\032\051\033\024\034\005\046\031\047\006\054\027" +
    "\001\002\000\032\005\015\006\035\015\025\023\013\026" +
    "\023\031\033\032\051\033\024\034\005\046\031\047\006" +
    "\054\027\001\002\000\032\005\015\006\035\015\025\023" +
    "\013\026\023\031\033\032\051\033\024\034\005\046\031" +
    "\047\006\054\027\001\002\000\032\005\015\006\035\015" +
    "\025\023\013\026\023\031\033\032\051\033\024\034\005" +
    "\046\031\047\006\054\027\001\002\000\032\005\015\006" +
    "\035\015\025\023\013\026\023\031\033\032\051\033\024" +
    "\034\005\046\031\047\006\054\027\001\002\000\032\005" +
    "\015\006\035\015\025\023\013\026\023\031\033\032\051" +
    "\033\024\034\005\046\031\047\006\054\027\001\002\000" +
    "\040\032\066\033\067\037\uffe0\040\uffe0\041\uffe0\042\uffe0" +
    "\043\uffe0\044\uffe0\045\uffe0\051\uffe0\055\uffe0\060\uffe0\061" +
    "\uffe0\063\uffe0\064\uffe0\001\002\000\032\005\015\006\035" +
    "\015\025\023\013\026\023\031\033\032\051\033\024\034" +
    "\005\046\031\047\006\054\027\001\002\000\032\005\015" +
    "\006\035\015\025\023\013\026\023\031\033\032\051\033" +
    "\024\034\005\046\031\047\006\054\027\001\002\000\046" +
    "\032\uffdd\033\uffdd\034\071\035\072\036\073\037\uffdd\040" +
    "\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\051\uffdd" +
    "\055\uffdd\060\uffdd\061\uffdd\063\uffdd\064\uffdd\001\002\000" +
    "\032\005\015\006\035\015\025\023\013\026\023\031\033" +
    "\032\051\033\024\034\005\046\031\047\006\054\027\001" +
    "\002\000\032\005\015\006\035\015\025\023\013\026\023" +
    "\031\033\032\051\033\024\034\005\046\031\047\006\054" +
    "\027\001\002\000\032\005\015\006\035\015\025\023\013" +
    "\026\023\031\033\032\051\033\024\034\005\046\031\047" +
    "\006\054\027\001\002\000\046\032\uffd9\033\uffd9\034\uffd9" +
    "\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043" +
    "\uffd9\044\uffd9\045\uffd9\051\uffd9\055\uffd9\060\uffd9\061\uffd9" +
    "\063\uffd9\064\uffd9\001\002\000\046\032\uffda\033\uffda\034" +
    "\uffda\035\uffda\036\uffda\037\uffda\040\uffda\041\uffda\042\uffda" +
    "\043\uffda\044\uffda\045\uffda\051\uffda\055\uffda\060\uffda\061" +
    "\uffda\063\uffda\064\uffda\001\002\000\046\032\uffdb\033\uffdb" +
    "\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042" +
    "\uffdb\043\uffdb\044\uffdb\045\uffdb\051\uffdb\055\uffdb\060\uffdb" +
    "\061\uffdb\063\uffdb\064\uffdb\001\002\000\046\032\uffde\033" +
    "\uffde\034\071\035\072\036\073\037\uffde\040\uffde\041\uffde" +
    "\042\uffde\043\uffde\044\uffde\045\uffde\051\uffde\055\uffde\060" +
    "\uffde\061\uffde\063\uffde\064\uffde\001\002\000\040\032\066" +
    "\033\067\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044" +
    "\uffe1\045\uffe1\051\uffe1\055\uffe1\060\uffe1\061\uffe1\063\uffe1" +
    "\064\uffe1\001\002\000\040\032\066\033\067\037\uffe4\040" +
    "\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4\051\uffe4" +
    "\055\uffe4\060\uffe4\061\uffe4\063\uffe4\064\uffe4\001\002\000" +
    "\040\032\066\033\067\037\uffe5\040\uffe5\041\uffe5\042\uffe5" +
    "\043\uffe5\044\uffe5\045\uffe5\051\uffe5\055\uffe5\060\uffe5\061" +
    "\uffe5\063\uffe5\064\uffe5\001\002\000\040\032\066\033\067" +
    "\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045" +
    "\uffe2\051\uffe2\055\uffe2\060\uffe2\061\uffe2\063\uffe2\064\uffe2" +
    "\001\002\000\040\032\066\033\067\037\uffe3\040\uffe3\041" +
    "\uffe3\042\uffe3\043\uffe3\044\uffe3\045\uffe3\051\uffe3\055\uffe3" +
    "\060\uffe3\061\uffe3\063\uffe3\064\uffe3\001\002\000\004\031" +
    "\113\001\002\000\004\031\112\001\002\000\032\005\015" +
    "\006\035\015\025\023\013\026\023\031\033\032\051\033" +
    "\024\034\005\046\031\047\006\054\027\001\002\000\004" +
    "\051\111\001\002\000\054\032\uffcc\033\uffcc\034\uffcc\035" +
    "\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc" +
    "\044\uffcc\045\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\055" +
    "\uffcc\060\uffcc\061\uffcc\063\uffcc\064\uffcc\001\002\000\054" +
    "\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040" +
    "\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\050\uffcb" +
    "\051\uffcb\052\uffcb\053\uffcb\055\uffcb\060\uffcb\061\uffcb\063" +
    "\uffcb\064\uffcb\001\002\000\054\032\uffca\033\uffca\034\uffca" +
    "\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043" +
    "\uffca\044\uffca\045\uffca\050\uffca\051\uffca\052\uffca\053\uffca" +
    "\055\uffca\060\uffca\061\uffca\063\uffca\064\uffca\001\002\000" +
    "\034\005\015\006\035\015\025\023\013\026\023\031\033" +
    "\032\051\033\024\034\005\046\031\047\006\054\027\055" +
    "\uffed\001\002\000\006\055\uffeb\063\uffeb\001\002\000\004" +
    "\055\122\001\002\000\006\055\uffee\063\120\001\002\000" +
    "\032\005\015\006\035\015\025\023\013\026\023\031\033" +
    "\032\051\033\024\034\005\046\031\047\006\054\027\001" +
    "\002\000\006\055\uffec\063\uffec\001\002\000\054\032\uffc9" +
    "\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041" +
    "\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\050\uffc9\051\uffc9" +
    "\052\uffc9\053\uffc9\055\uffc9\060\uffc9\061\uffc9\063\uffc9\064" +
    "\uffc9\001\002\000\004\002\ufff3\001\002\000\004\057\125" +
    "\001\002\000\006\002\uffef\020\uffef\001\002\000\046\032" +
    "\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4" +
    "\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\051\uffd4\055" +
    "\uffd4\060\uffd4\061\uffd4\063\uffd4\064\uffd4\001\002\000\032" +
    "\005\015\006\035\015\025\023\013\026\023\031\033\032" +
    "\051\033\024\034\005\046\031\047\006\054\027\001\002" +
    "\000\004\060\131\001\002\000\004\002\ufff7\001\002\000" +
    "\004\055\133\001\002\000\054\032\uffc3\033\uffc3\034\uffc3" +
    "\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043" +
    "\uffc3\044\uffc3\045\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3" +
    "\055\uffc3\060\uffc3\061\uffc3\063\uffc3\064\uffc3\001\002\000" +
    "\004\002\000\001\002\000\046\032\uffd6\033\uffd6\034\uffd6" +
    "\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043" +
    "\uffd6\044\uffd6\045\uffd6\051\uffd6\055\uffd6\060\uffd6\061\uffd6" +
    "\063\uffd6\064\uffd6\001\002\000\046\032\uffd0\033\uffd0\034" +
    "\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0" +
    "\043\uffd0\044\uffd0\045\uffd0\051\uffd0\055\uffd0\060\uffd0\061" +
    "\uffd0\063\uffd0\064\uffd0\001\002\000\046\032\uffd1\033\uffd1" +
    "\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042" +
    "\uffd1\043\uffd1\044\uffd1\045\uffd1\051\uffd1\055\uffd1\060\uffd1" +
    "\061\uffd1\063\uffd1\064\uffd1\001\002\000\032\005\015\006" +
    "\035\015\025\023\013\026\023\031\033\032\051\033\024" +
    "\034\005\046\031\047\006\054\027\001\002\000\004\055" +
    "\142\001\002\000\004\056\124\001\002\000\004\002\ufff4" +
    "\001\002\000\032\005\015\006\035\015\025\023\013\026" +
    "\023\031\033\032\051\033\024\034\005\046\031\047\006" +
    "\054\027\001\002\000\004\055\146\001\002\000\004\056" +
    "\124\001\002\000\006\002\ufff6\020\150\001\002\000\004" +
    "\056\124\001\002\000\004\002\ufff5\001\002\000\004\054" +
    "\153\001\002\000\034\005\015\006\035\015\025\023\013" +
    "\026\023\031\033\032\051\033\024\034\005\046\031\047" +
    "\006\054\027\055\uffed\001\002\000\004\055\155\001\002" +
    "\000\004\060\156\001\002\000\004\002\ufff0\001\002\000" +
    "\046\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce" +
    "\040\uffce\041\uffce\042\uffce\043\uffce\044\uffce\045\uffce\051" +
    "\uffce\055\uffce\060\uffce\061\uffce\063\uffce\064\uffce\001\002" +
    "\000\046\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037" +
    "\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf" +
    "\051\uffcf\055\uffcf\060\uffcf\061\uffcf\063\uffcf\064\uffcf\001" +
    "\002\000\004\060\162\001\002\000\004\002\ufff2\001\002" +
    "\000\004\060\164\001\002\000\004\002\ufff1\001\002\000" +
    "\046\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3" +
    "\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\051" +
    "\uffd3\055\uffd3\060\uffd3\061\uffd3\063\uffd3\064\uffd3\001\002" +
    "\000\046\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037" +
    "\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5" +
    "\051\uffd5\055\uffd5\060\uffd5\061\uffd5\063\uffd5\064\uffd5\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\164\000\052\002\025\004\017\005\021\006\044\007" +
    "\047\010\033\011\007\012\010\013\003\014\013\015\027" +
    "\016\046\017\045\020\043\021\042\022\041\023\040\024" +
    "\037\025\036\026\035\001\001\000\002\001\001\000\010" +
    "\024\165\025\036\026\035\001\001\000\010\024\164\025" +
    "\036\026\035\001\001\000\026\015\162\016\046\017\045" +
    "\020\043\021\042\022\041\023\040\024\037\025\036\026" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\015\160\016\046\017\045\020\043\021\042\022\041\023" +
    "\040\024\037\025\036\026\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\024\134\025\036\026" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\015\131\016\046\017\045\020\043\021\042\022\041\023" +
    "\040\024\037\025\036\026\035\001\001\000\002\001\001" +
    "\000\010\024\125\025\036\026\035\001\001\000\004\031" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\024\051\025\036" +
    "\026\035\001\001\000\002\001\001\000\022\017\053\020" +
    "\043\021\042\022\041\023\040\024\037\025\036\026\035" +
    "\001\001\000\002\001\001\000\020\020\055\021\042\022" +
    "\041\023\040\024\037\025\036\026\035\001\001\000\002" +
    "\001\001\000\016\021\103\022\041\023\040\024\037\025" +
    "\036\026\035\001\001\000\016\021\102\022\041\023\040" +
    "\024\037\025\036\026\035\001\001\000\016\021\101\022" +
    "\041\023\040\024\037\025\036\026\035\001\001\000\016" +
    "\021\100\022\041\023\040\024\037\025\036\026\035\001" +
    "\001\000\016\021\077\022\041\023\040\024\037\025\036" +
    "\026\035\001\001\000\016\021\064\022\041\023\040\024" +
    "\037\025\036\026\035\001\001\000\002\001\001\000\014" +
    "\022\076\023\040\024\037\025\036\026\035\001\001\000" +
    "\014\022\067\023\040\024\037\025\036\026\035\001\001" +
    "\000\002\001\001\000\012\023\075\024\037\025\036\026" +
    "\035\001\001\000\012\023\074\024\037\025\036\026\035" +
    "\001\001\000\012\023\073\024\037\025\036\026\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\015\107\016\046\017" +
    "\045\020\043\021\042\022\041\023\040\024\037\025\036" +
    "\026\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\015\114\016\046" +
    "\017\045\020\043\021\042\022\041\023\040\024\037\025" +
    "\036\026\035\027\115\030\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\015\120\016" +
    "\046\017\045\020\043\021\042\022\041\023\040\024\037" +
    "\025\036\026\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\015\127\016\046\017\045\020" +
    "\043\021\042\022\041\023\040\024\037\025\036\026\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\015\140\016" +
    "\046\017\045\020\043\021\042\022\041\023\040\024\037" +
    "\025\036\026\035\001\001\000\002\001\001\000\004\031" +
    "\142\001\001\000\002\001\001\000\026\015\144\016\046" +
    "\017\045\020\043\021\042\022\041\023\040\024\037\025" +
    "\036\026\035\001\001\000\002\001\001\000\004\031\146" +
    "\001\001\000\002\001\001\000\004\031\150\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\015\114\016\046" +
    "\017\045\020\043\021\042\022\041\023\040\024\037\025" +
    "\036\026\035\027\153\030\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programa ::= Instruccion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Programa",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Instruccion ::= InsAsig 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Instruccion ::= InsIf 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Instruccion ::= InsIfElse 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Instruccion ::= InsWhile 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Instruccion ::= InsFor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Instruccion ::= InsWrite 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Instruccion ::= InsDelete 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Instruccion ::= InsCall 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // InsAsig ::= Expr ASIGNACION Expr PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsAsig",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // InsIf ::= TROTSKIF PABRE Expr PCIERRA Bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsIf",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // InsIfElse ::= TROTSKIF PABRE Expr PCIERRA Bloque FIDELSECASTRO Bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsIfElse",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // InsWhile ::= USSWHILE PABRE Expr PCIERRA Bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsWhile",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // InsFor ::= FORLETARIAT Bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsFor",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // InsWrite ::= WRITE Expr PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsWrite",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // InsDelete ::= DELETE Expr PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsDelete",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // InsCall ::= CALL IDEN PABRE Lista_Param PCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsCall",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Bloque ::= LLABRE LLCIERRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Bloque",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Lista_Param ::= Param 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Lista_Param",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Lista_Param ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Lista_Param",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Param ::= Param COMA Expr 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Param",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Param ::= Expr 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Param",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Expr ::= E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Expr",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // E0 ::= E0 OR E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // E0 ::= E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // E1 ::= E1 AND E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // E1 ::= E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // E2 ::= E2 IGUAL E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // E2 ::= E2 DISTINTO E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // E2 ::= E2 MENORIGUAL E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // E2 ::= E2 MAYORIGUAL E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // E2 ::= E2 MENOR E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // E2 ::= E2 MAYOR E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // E2 ::= E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // E3 ::= E3 MAS E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // E3 ::= E3 MENOS E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // E3 ::= E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // E4 ::= E4 ASTERISCO E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // E4 ::= E4 DIV E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // E4 ::= E4 RESTO E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // E4 ::= E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // E5 ::= MAS E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // E5 ::= MENOS E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // E5 ::= ASTERISCO E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // E5 ::= NEG E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // E5 ::= REF E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // E5 ::= E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // E6 ::= NEW LENINT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E6 ::= NEW BOOLSHEVIK 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E6 ::= RED LENINT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E6 ::= RED BOOLSHEVIK 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E6 ::= E7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E7 ::= E7 CABRE Expr CCIERRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E7 ::= E7 PUNTO IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E7 ::= E7 FLECHA IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E7 ::= IDEN PABRE Lista_Param PCIERRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E7 ::= E8 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E8 ::= ENTPOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E8 ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E8 ::= NULL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E8 ::= IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E8 ::= PABRE Expr PCIERRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

