
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Thu Mar 28 01:37:54 CET 2024
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Thu Mar 28 01:37:54 CET 2024
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\152\000\002\002\004\000\002\002\004\000\002\057" +
    "\006\000\002\032\004\000\002\003\003\000\002\003\002" +
    "\000\002\004\004\000\002\004\003\000\002\051\003\000" +
    "\002\051\002\000\002\052\004\000\002\052\003\000\002" +
    "\054\003\000\002\054\002\000\002\055\004\000\002\055" +
    "\003\000\002\056\003\000\002\056\003\000\002\056\003" +
    "\000\002\053\003\000\002\053\003\000\002\053\003\000" +
    "\002\046\007\000\002\047\007\000\002\050\003\000\002" +
    "\033\004\000\002\033\003\000\002\034\007\000\002\034" +
    "\005\000\002\034\003\000\002\034\003\000\002\035\003" +
    "\000\002\035\003\000\002\036\003\000\002\036\003\000" +
    "\002\037\006\000\002\040\010\000\002\040\011\000\002" +
    "\042\013\000\002\041\016\000\002\043\003\000\002\043" +
    "\002\000\002\044\005\000\002\044\003\000\002\045\004" +
    "\000\002\045\005\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\006" +
    "\006\000\002\007\011\000\002\010\015\000\002\011\011" +
    "\000\002\012\014\000\002\013\007\000\002\014\005\000" +
    "\002\015\010\000\002\030\003\000\002\030\002\000\002" +
    "\031\005\000\002\031\003\000\002\016\003\000\002\017" +
    "\005\000\002\017\003\000\002\020\005\000\002\020\003" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\021\003\000\002\022\005\000\002\022\005\000\002\022" +
    "\003\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\023\003\000\002\024\004\000\002\024\004\000" +
    "\002\024\004\000\002\024\004\000\002\024\004\000\002" +
    "\024\003\000\002\025\004\000\002\025\004\000\002\025" +
    "\004\000\002\025\004\000\002\025\003\000\002\026\006" +
    "\000\002\026\005\000\002\026\005\000\002\026\006\000" +
    "\002\026\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\340\000\014\004\013\011\016\012\ufff4\016\010\065" +
    "\015\001\002\000\014\004\ufff2\011\ufff2\012\ufff2\016\ufff2" +
    "\065\ufff2\001\002\000\064\004\uffdf\005\uffdf\006\uffdf\011" +
    "\uffdf\012\uffdf\015\uffdf\016\uffdf\017\uffdf\021\uffdf\022\uffdf" +
    "\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\031\uffdf\032" +
    "\uffdf\033\uffdf\034\uffdf\046\uffdf\047\uffdf\054\uffdf\057\uffdf" +
    "\062\uffdf\065\uffdf\001\002\000\014\004\ufff1\011\ufff1\012" +
    "\ufff1\016\ufff1\065\ufff1\001\002\000\004\012\336\001\002" +
    "\000\020\007\042\010\047\013\040\014\045\031\041\054" +
    "\050\066\205\001\002\000\064\004\uffec\005\uffec\006\uffec" +
    "\011\uffec\012\uffec\015\uffec\016\uffec\017\uffec\021\uffec\022" +
    "\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec\031\uffec" +
    "\032\uffec\033\uffec\034\uffec\046\uffec\047\uffec\054\uffec\057" +
    "\uffec\062\uffec\065\uffec\001\002\000\064\004\uffe0\005\uffe0" +
    "\006\uffe0\011\uffe0\012\uffe0\015\uffe0\016\uffe0\017\uffe0\021" +
    "\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0" +
    "\031\uffe0\032\uffe0\033\uffe0\034\uffe0\046\uffe0\047\uffe0\054" +
    "\uffe0\057\uffe0\062\uffe0\065\uffe0\001\002\000\020\007\042" +
    "\010\047\013\040\014\045\030\172\031\041\054\050\001" +
    "\002\000\014\004\ufff0\011\ufff0\012\ufff0\016\ufff0\065\ufff0" +
    "\001\002\000\004\031\036\001\002\000\004\031\026\001" +
    "\002\000\004\002\025\001\002\000\014\004\013\011\016" +
    "\012\ufff5\016\010\065\015\001\002\000\014\004\uffef\011" +
    "\uffef\012\uffef\016\uffef\065\uffef\001\002\000\064\004\uffee" +
    "\005\uffee\006\uffee\011\uffee\012\uffee\015\uffee\016\uffee\017" +
    "\uffee\021\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee" +
    "\027\uffee\031\uffee\032\uffee\033\uffee\034\uffee\046\uffee\047" +
    "\uffee\054\uffee\057\uffee\062\uffee\065\uffee\001\002\000\064" +
    "\004\uffed\005\uffed\006\uffed\011\uffed\012\uffed\015\uffed\016" +
    "\uffed\017\uffed\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed" +
    "\026\uffed\027\uffed\031\uffed\032\uffed\033\uffed\034\uffed\046" +
    "\uffed\047\uffed\054\uffed\057\uffed\062\uffed\065\uffed\001\002" +
    "\000\014\004\ufff3\011\ufff3\012\ufff3\016\ufff3\065\ufff3\001" +
    "\002\000\004\002\000\001\002\000\004\056\027\001\002" +
    "\000\012\004\013\011\016\057\ufff8\065\015\001\002\000" +
    "\004\057\035\001\002\000\060\004\013\005\ufff9\006\ufff9" +
    "\011\016\015\ufff9\017\ufff9\021\ufff9\022\ufff9\023\ufff9\024" +
    "\ufff9\025\ufff9\026\ufff9\027\ufff9\031\ufff9\032\ufff9\033\ufff9" +
    "\034\ufff9\046\ufff9\047\ufff9\054\ufff9\057\ufff9\062\ufff9\065" +
    "\015\001\002\000\004\057\uffe9\001\002\000\060\004\ufff6" +
    "\005\ufff6\006\ufff6\011\ufff6\015\ufff6\017\ufff6\021\ufff6\022" +
    "\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\031\ufff6" +
    "\032\ufff6\033\ufff6\034\ufff6\046\ufff6\047\ufff6\054\ufff6\057" +
    "\ufff6\062\ufff6\065\ufff6\001\002\000\060\004\ufff7\005\ufff7" +
    "\006\ufff7\011\ufff7\015\ufff7\017\ufff7\021\ufff7\022\ufff7\023" +
    "\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\031\ufff7\032\ufff7" +
    "\033\ufff7\034\ufff7\046\ufff7\047\ufff7\054\ufff7\057\ufff7\062" +
    "\ufff7\065\ufff7\001\002\000\064\004\uffea\005\uffea\006\uffea" +
    "\011\uffea\012\uffea\015\uffea\016\uffea\017\uffea\021\uffea\022" +
    "\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\031\uffea" +
    "\032\uffea\033\uffea\034\uffea\046\uffea\047\uffea\054\uffea\057" +
    "\uffea\062\uffea\065\uffea\001\002\000\004\061\037\001\002" +
    "\000\016\007\042\010\047\013\040\014\045\031\041\054" +
    "\050\001\002\000\014\031\uffe2\047\uffe2\050\uffe2\055\uffe2" +
    "\060\uffe2\001\002\000\014\031\uffe4\047\uffe4\050\uffe4\055" +
    "\uffe4\060\uffe4\001\002\000\014\007\042\013\040\014\045" +
    "\031\041\054\050\001\002\000\014\031\uffe3\047\uffe3\050" +
    "\uffe3\055\uffe3\060\uffe3\001\002\000\012\031\uffe7\047\uffe7" +
    "\055\uffe7\060\uffe7\001\002\000\014\031\uffe1\047\uffe1\050" +
    "\uffe1\055\uffe1\060\uffe1\001\002\000\004\060\054\001\002" +
    "\000\016\007\042\010\047\013\040\014\045\031\041\054" +
    "\050\001\002\000\016\007\042\010\047\013\040\014\045" +
    "\031\041\054\050\001\002\000\004\055\052\001\002\000" +
    "\014\031\uffe5\047\uffe5\050\uffe5\055\uffe5\060\uffe5\001\002" +
    "\000\012\031\uffe8\047\uffe8\055\uffe8\060\uffe8\001\002\000" +
    "\064\004\uffeb\005\uffeb\006\uffeb\011\uffeb\012\uffeb\015\uffeb" +
    "\016\uffeb\017\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025" +
    "\uffeb\026\uffeb\027\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb" +
    "\046\uffeb\047\uffeb\054\uffeb\057\uffeb\062\uffeb\065\uffeb\001" +
    "\002\000\004\050\056\001\002\000\032\005\100\006\101" +
    "\015\102\023\071\026\077\031\062\032\103\033\057\034" +
    "\076\046\060\047\066\054\104\001\002\000\020\005\100" +
    "\006\101\015\102\023\071\026\077\031\062\054\104\001" +
    "\002\000\020\005\100\006\101\015\102\023\071\026\077" +
    "\031\062\054\104\001\002\000\054\032\uff9d\033\uff9d\034" +
    "\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d" +
    "\043\uff9d\044\uff9d\045\uff9d\050\uff9d\051\uff9d\052\uff9d\053" +
    "\uff9d\055\uff9d\060\uff9d\061\uff9d\063\uff9d\064\uff9d\001\002" +
    "\000\056\032\uff99\033\uff99\034\uff99\035\uff99\036\uff99\037" +
    "\uff99\040\uff99\041\uff99\042\uff99\043\uff99\044\uff99\045\uff99" +
    "\050\uff99\051\uff99\052\uff99\053\uff99\054\160\055\uff99\060" +
    "\uff99\061\uff99\063\uff99\064\uff99\001\002\000\054\032\uffa2" +
    "\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2\041" +
    "\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2\050\153\051\uffa2" +
    "\052\152\053\151\055\uffa2\060\uffa2\061\uffa2\063\uffa2\064" +
    "\uffa2\001\002\000\046\032\uffa7\033\uffa7\034\uffa7\035\uffa7" +
    "\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044" +
    "\uffa7\045\uffa7\051\uffa7\055\uffa7\060\uffa7\061\uffa7\063\uffa7" +
    "\064\uffa7\001\002\000\004\051\150\001\002\000\020\005" +
    "\100\006\101\015\102\023\071\026\077\031\062\054\104" +
    "\001\002\000\046\032\uffad\033\uffad\034\uffad\035\uffad\036" +
    "\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad" +
    "\045\uffad\051\uffad\055\uffad\060\uffad\061\uffad\063\uffad\064" +
    "\uffad\001\002\000\046\032\uffb1\033\uffb1\034\131\035\132" +
    "\036\133\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044" +
    "\uffb1\045\uffb1\051\uffb1\055\uffb1\060\uffb1\061\uffb1\063\uffb1" +
    "\064\uffb1\001\002\000\006\013\146\014\145\001\002\000" +
    "\040\032\126\033\127\037\uffb4\040\uffb4\041\uffb4\042\uffb4" +
    "\043\uffb4\044\uffb4\045\uffb4\051\uffb4\055\uffb4\060\uffb4\061" +
    "\uffb4\063\uffb4\064\uffb4\001\002\000\034\037\121\040\120" +
    "\041\117\042\123\043\124\044\uffbb\045\uffbb\051\uffbb\055" +
    "\uffbb\060\uffbb\061\uffbb\063\uffbb\064\122\001\002\000\020" +
    "\044\115\045\uffbd\051\uffbd\055\uffbd\060\uffbd\061\uffbd\063" +
    "\uffbd\001\002\000\016\045\113\051\uffbf\055\uffbf\060\uffbf" +
    "\061\uffbf\063\uffbf\001\002\000\020\005\100\006\101\015" +
    "\102\023\071\026\077\031\062\054\104\001\002\000\006" +
    "\013\111\014\110\001\002\000\054\032\uff9b\033\uff9b\034" +
    "\uff9b\035\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b" +
    "\043\uff9b\044\uff9b\045\uff9b\050\uff9b\051\uff9b\052\uff9b\053" +
    "\uff9b\055\uff9b\060\uff9b\061\uff9b\063\uff9b\064\uff9b\001\002" +
    "\000\054\032\uff9c\033\uff9c\034\uff9c\035\uff9c\036\uff9c\037" +
    "\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c" +
    "\050\uff9c\051\uff9c\052\uff9c\053\uff9c\055\uff9c\060\uff9c\061" +
    "\uff9c\063\uff9c\064\uff9c\001\002\000\054\032\uff9a\033\uff9a" +
    "\034\uff9a\035\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a\042" +
    "\uff9a\043\uff9a\044\uff9a\045\uff9a\050\uff9a\051\uff9a\052\uff9a" +
    "\053\uff9a\055\uff9a\060\uff9a\061\uff9a\063\uff9a\064\uff9a\001" +
    "\002\000\020\005\100\006\101\015\102\023\071\026\077" +
    "\031\062\054\104\001\002\000\032\005\100\006\101\015" +
    "\102\023\071\026\077\031\062\032\103\033\057\034\076" +
    "\046\060\047\066\054\104\001\002\000\004\055\106\001" +
    "\002\000\054\032\uff98\033\uff98\034\uff98\035\uff98\036\uff98" +
    "\037\uff98\040\uff98\041\uff98\042\uff98\043\uff98\044\uff98\045" +
    "\uff98\050\uff98\051\uff98\052\uff98\053\uff98\055\uff98\060\uff98" +
    "\061\uff98\063\uff98\064\uff98\001\002\000\046\032\uffac\033" +
    "\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac" +
    "\042\uffac\043\uffac\044\uffac\045\uffac\051\uffac\055\uffac\060" +
    "\uffac\061\uffac\063\uffac\064\uffac\001\002\000\046\032\uffa5" +
    "\033\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041" +
    "\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5\051\uffa5\055\uffa5" +
    "\060\uffa5\061\uffa5\063\uffa5\064\uffa5\001\002\000\046\032" +
    "\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6" +
    "\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\051\uffa6\055" +
    "\uffa6\060\uffa6\061\uffa6\063\uffa6\064\uffa6\001\002\000\046" +
    "\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040" +
    "\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\051\uffaa" +
    "\055\uffaa\060\uffaa\061\uffaa\063\uffaa\064\uffaa\001\002\000" +
    "\032\005\100\006\101\015\102\023\071\026\077\031\062" +
    "\032\103\033\057\034\076\046\060\047\066\054\104\001" +
    "\002\000\020\044\115\045\uffbe\051\uffbe\055\uffbe\060\uffbe" +
    "\061\uffbe\063\uffbe\001\002\000\032\005\100\006\101\015" +
    "\102\023\071\026\077\031\062\032\103\033\057\034\076" +
    "\046\060\047\066\054\104\001\002\000\034\037\121\040" +
    "\120\041\117\042\123\043\124\044\uffbc\045\uffbc\051\uffbc" +
    "\055\uffbc\060\uffbc\061\uffbc\063\uffbc\064\122\001\002\000" +
    "\032\005\100\006\101\015\102\023\071\026\077\031\062" +
    "\032\103\033\057\034\076\046\060\047\066\054\104\001" +
    "\002\000\032\005\100\006\101\015\102\023\071\026\077" +
    "\031\062\032\103\033\057\034\076\046\060\047\066\054" +
    "\104\001\002\000\032\005\100\006\101\015\102\023\071" +
    "\026\077\031\062\032\103\033\057\034\076\046\060\047" +
    "\066\054\104\001\002\000\032\005\100\006\101\015\102" +
    "\023\071\026\077\031\062\032\103\033\057\034\076\046" +
    "\060\047\066\054\104\001\002\000\032\005\100\006\101" +
    "\015\102\023\071\026\077\031\062\032\103\033\057\034" +
    "\076\046\060\047\066\054\104\001\002\000\032\005\100" +
    "\006\101\015\102\023\071\026\077\031\062\032\103\033" +
    "\057\034\076\046\060\047\066\054\104\001\002\000\040" +
    "\032\126\033\127\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043" +
    "\uffb5\044\uffb5\045\uffb5\051\uffb5\055\uffb5\060\uffb5\061\uffb5" +
    "\063\uffb5\064\uffb5\001\002\000\032\005\100\006\101\015" +
    "\102\023\071\026\077\031\062\032\103\033\057\034\076" +
    "\046\060\047\066\054\104\001\002\000\032\005\100\006" +
    "\101\015\102\023\071\026\077\031\062\032\103\033\057" +
    "\034\076\046\060\047\066\054\104\001\002\000\046\032" +
    "\uffb2\033\uffb2\034\131\035\132\036\133\037\uffb2\040\uffb2" +
    "\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\051\uffb2\055" +
    "\uffb2\060\uffb2\061\uffb2\063\uffb2\064\uffb2\001\002\000\032" +
    "\005\100\006\101\015\102\023\071\026\077\031\062\032" +
    "\103\033\057\034\076\046\060\047\066\054\104\001\002" +
    "\000\032\005\100\006\101\015\102\023\071\026\077\031" +
    "\062\032\103\033\057\034\076\046\060\047\066\054\104" +
    "\001\002\000\032\005\100\006\101\015\102\023\071\026" +
    "\077\031\062\032\103\033\057\034\076\046\060\047\066" +
    "\054\104\001\002\000\046\032\uffae\033\uffae\034\uffae\035" +
    "\uffae\036\uffae\037\uffae\040\uffae\041\uffae\042\uffae\043\uffae" +
    "\044\uffae\045\uffae\051\uffae\055\uffae\060\uffae\061\uffae\063" +
    "\uffae\064\uffae\001\002\000\046\032\uffaf\033\uffaf\034\uffaf" +
    "\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043" +
    "\uffaf\044\uffaf\045\uffaf\051\uffaf\055\uffaf\060\uffaf\061\uffaf" +
    "\063\uffaf\064\uffaf\001\002\000\046\032\uffb0\033\uffb0\034" +
    "\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0" +
    "\043\uffb0\044\uffb0\045\uffb0\051\uffb0\055\uffb0\060\uffb0\061" +
    "\uffb0\063\uffb0\064\uffb0\001\002\000\046\032\uffb3\033\uffb3" +
    "\034\131\035\132\036\133\037\uffb3\040\uffb3\041\uffb3\042" +
    "\uffb3\043\uffb3\044\uffb3\045\uffb3\051\uffb3\055\uffb3\060\uffb3" +
    "\061\uffb3\063\uffb3\064\uffb3\001\002\000\040\032\126\033" +
    "\127\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6" +
    "\045\uffb6\051\uffb6\055\uffb6\060\uffb6\061\uffb6\063\uffb6\064" +
    "\uffb6\001\002\000\040\032\126\033\127\037\uffb9\040\uffb9" +
    "\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\051\uffb9\055" +
    "\uffb9\060\uffb9\061\uffb9\063\uffb9\064\uffb9\001\002\000\040" +
    "\032\126\033\127\037\uffba\040\uffba\041\uffba\042\uffba\043" +
    "\uffba\044\uffba\045\uffba\051\uffba\055\uffba\060\uffba\061\uffba" +
    "\063\uffba\064\uffba\001\002\000\040\032\126\033\127\037" +
    "\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8" +
    "\051\uffb8\055\uffb8\060\uffb8\061\uffb8\063\uffb8\064\uffb8\001" +
    "\002\000\040\032\126\033\127\037\uffb7\040\uffb7\041\uffb7" +
    "\042\uffb7\043\uffb7\044\uffb7\045\uffb7\051\uffb7\055\uffb7\060" +
    "\uffb7\061\uffb7\063\uffb7\064\uffb7\001\002\000\046\032\uffa3" +
    "\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3\041" +
    "\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3\051\uffa3\055\uffa3" +
    "\060\uffa3\061\uffa3\063\uffa3\064\uffa3\001\002\000\046\032" +
    "\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4" +
    "\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4\051\uffa4\055" +
    "\uffa4\060\uffa4\061\uffa4\063\uffa4\064\uffa4\001\002\000\046" +
    "\032\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040" +
    "\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\051\uffa8" +
    "\055\uffa8\060\uffa8\061\uffa8\063\uffa8\064\uffa8\001\002\000" +
    "\014\031\uffe6\047\uffe6\050\uffe6\055\uffe6\060\uffe6\001\002" +
    "\000\004\031\157\001\002\000\004\031\156\001\002\000" +
    "\032\005\100\006\101\015\102\023\071\026\077\031\062" +
    "\032\103\033\057\034\076\046\060\047\066\054\104\001" +
    "\002\000\004\051\155\001\002\000\054\032\uffa1\033\uffa1" +
    "\034\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042" +
    "\uffa1\043\uffa1\044\uffa1\045\uffa1\050\uffa1\051\uffa1\052\uffa1" +
    "\053\uffa1\055\uffa1\060\uffa1\061\uffa1\063\uffa1\064\uffa1\001" +
    "\002\000\054\032\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0" +
    "\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0\044\uffa0\045" +
    "\uffa0\050\uffa0\051\uffa0\052\uffa0\053\uffa0\055\uffa0\060\uffa0" +
    "\061\uffa0\063\uffa0\064\uffa0\001\002\000\054\032\uff9f\033" +
    "\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f" +
    "\042\uff9f\043\uff9f\044\uff9f\045\uff9f\050\uff9f\051\uff9f\052" +
    "\uff9f\053\uff9f\055\uff9f\060\uff9f\061\uff9f\063\uff9f\064\uff9f" +
    "\001\002\000\034\005\100\006\101\015\102\023\071\026" +
    "\077\031\062\032\103\033\057\034\076\046\060\047\066" +
    "\054\104\055\uffc2\001\002\000\006\055\uffc0\063\uffc0\001" +
    "\002\000\006\055\uffc3\063\165\001\002\000\004\055\164" +
    "\001\002\000\054\032\uff9e\033\uff9e\034\uff9e\035\uff9e\036" +
    "\uff9e\037\uff9e\040\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e" +
    "\045\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e\055\uff9e\060" +
    "\uff9e\061\uff9e\063\uff9e\064\uff9e\001\002\000\032\005\100" +
    "\006\101\015\102\023\071\026\077\031\062\032\103\033" +
    "\057\034\076\046\060\047\066\054\104\001\002\000\006" +
    "\055\uffc1\063\uffc1\001\002\000\046\032\uffa9\033\uffa9\034" +
    "\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9" +
    "\043\uffa9\044\uffa9\045\uffa9\051\uffa9\055\uffa9\060\uffa9\061" +
    "\uffa9\063\uffa9\064\uffa9\001\002\000\046\032\uffab\033\uffab" +
    "\034\uffab\035\uffab\036\uffab\037\uffab\040\uffab\041\uffab\042" +
    "\uffab\043\uffab\044\uffab\045\uffab\051\uffab\055\uffab\060\uffab" +
    "\061\uffab\063\uffab\064\uffab\001\002\000\004\031\200\001" +
    "\002\000\016\007\042\010\047\013\040\014\045\031\041" +
    "\054\050\001\002\000\004\031\174\001\002\000\004\061" +
    "\175\001\002\000\032\005\100\006\101\015\102\023\071" +
    "\026\077\031\062\032\103\033\057\034\076\046\060\047" +
    "\066\054\104\001\002\000\004\060\177\001\002\000\064" +
    "\004\uffdc\005\uffdc\006\uffdc\011\uffdc\012\uffdc\015\uffdc\016" +
    "\uffdc\017\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc" +
    "\026\uffdc\027\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\046" +
    "\uffdc\047\uffdc\054\uffdc\057\uffdc\062\uffdc\065\uffdc\001\002" +
    "\000\006\060\201\061\202\001\002\000\064\004\uffde\005" +
    "\uffde\006\uffde\011\uffde\012\uffde\015\uffde\016\uffde\017\uffde" +
    "\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027" +
    "\uffde\031\uffde\032\uffde\033\uffde\034\uffde\046\uffde\047\uffde" +
    "\054\uffde\057\uffde\062\uffde\065\uffde\001\002\000\032\005" +
    "\100\006\101\015\102\023\071\026\077\031\062\032\103" +
    "\033\057\034\076\046\060\047\066\054\104\001\002\000" +
    "\004\060\204\001\002\000\064\004\uffdd\005\uffdd\006\uffdd" +
    "\011\uffdd\012\uffdd\015\uffdd\016\uffdd\017\uffdd\021\uffdd\022" +
    "\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\031\uffdd" +
    "\032\uffdd\033\uffdd\034\uffdd\046\uffdd\047\uffdd\054\uffdd\057" +
    "\uffdd\062\uffdd\065\uffdd\001\002\000\004\031\327\001\002" +
    "\000\004\031\207\001\002\000\004\054\210\001\002\000" +
    "\020\007\042\010\047\013\040\014\045\031\041\054\050" +
    "\055\uffd8\001\002\000\006\055\uffd6\063\uffd6\001\002\000" +
    "\006\055\uffd9\063\325\001\002\000\004\055\220\001\002" +
    "\000\006\031\216\047\215\001\002\000\004\031\217\001" +
    "\002\000\006\055\uffd5\063\uffd5\001\002\000\006\055\uffd4" +
    "\063\uffd4\001\002\000\004\056\221\001\002\000\056\004" +
    "\013\005\ufff8\006\ufff8\011\016\015\ufff8\017\ufff8\021\ufff8" +
    "\022\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\031" +
    "\ufff8\032\ufff8\033\ufff8\034\ufff8\046\ufff8\047\ufff8\054\ufff8" +
    "\062\ufff8\065\015\001\002\000\004\062\321\001\002\000" +
    "\052\005\100\006\101\015\102\017\234\021\236\022\241" +
    "\023\071\024\230\025\233\026\077\027\225\031\062\032" +
    "\103\033\057\034\076\046\060\047\066\054\104\057\ufffc" +
    "\062\ufffc\001\002\000\052\005\uffcd\006\uffcd\015\uffcd\017" +
    "\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd" +
    "\027\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\046\uffcd\047" +
    "\uffcd\054\uffcd\057\uffcd\062\uffcd\001\002\000\032\005\100" +
    "\006\101\015\102\023\071\026\077\031\062\032\103\033" +
    "\057\034\076\046\060\047\066\054\104\001\002\000\052" +
    "\005\uffcf\006\uffcf\015\uffcf\017\uffcf\021\uffcf\022\uffcf\023" +
    "\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\031\uffcf\032\uffcf" +
    "\033\uffcf\034\uffcf\046\uffcf\047\uffcf\054\uffcf\057\uffcf\062" +
    "\uffcf\001\002\000\052\005\uffce\006\uffce\015\uffce\017\uffce" +
    "\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027" +
    "\uffce\031\uffce\032\uffce\033\uffce\034\uffce\046\uffce\047\uffce" +
    "\054\uffce\057\uffce\062\uffce\001\002\000\004\054\313\001" +
    "\002\000\052\005\100\006\101\015\102\017\234\021\236" +
    "\022\241\023\071\024\230\025\233\026\077\027\225\031" +
    "\062\032\103\033\057\034\076\046\060\047\066\054\104" +
    "\057\ufffd\062\ufffd\001\002\000\052\005\uffcc\006\uffcc\015" +
    "\uffcc\017\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc" +
    "\026\uffcc\027\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\046" +
    "\uffcc\047\uffcc\054\uffcc\057\uffcc\062\uffcc\001\002\000\004" +
    "\031\305\001\002\000\004\054\273\001\002\000\052\005" +
    "\ufffa\006\ufffa\015\ufffa\017\ufffa\021\ufffa\022\ufffa\023\ufffa" +
    "\024\ufffa\025\ufffa\026\ufffa\027\ufffa\031\ufffa\032\ufffa\033" +
    "\ufffa\034\ufffa\046\ufffa\047\ufffa\054\ufffa\057\ufffa\062\ufffa" +
    "\001\002\000\004\054\265\001\002\000\052\005\uffd3\006" +
    "\uffd3\015\uffd3\017\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3" +
    "\025\uffd3\026\uffd3\027\uffd3\031\uffd3\032\uffd3\033\uffd3\034" +
    "\uffd3\046\uffd3\047\uffd3\054\uffd3\057\uffd3\062\uffd3\001\002" +
    "\000\004\061\262\001\002\000\004\054\246\001\002\000" +
    "\052\005\uffd0\006\uffd0\015\uffd0\017\uffd0\021\uffd0\022\uffd0" +
    "\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\031\uffd0\032" +
    "\uffd0\033\uffd0\034\uffd0\046\uffd0\047\uffd0\054\uffd0\057\uffd0" +
    "\062\uffd0\001\002\000\052\005\uffd2\006\uffd2\015\uffd2\017" +
    "\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2" +
    "\027\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\046\uffd2\047" +
    "\uffd2\054\uffd2\057\uffd2\062\uffd2\001\002\000\052\005\uffd1" +
    "\006\uffd1\015\uffd1\017\uffd1\021\uffd1\022\uffd1\023\uffd1\024" +
    "\uffd1\025\uffd1\026\uffd1\027\uffd1\031\uffd1\032\uffd1\033\uffd1" +
    "\034\uffd1\046\uffd1\047\uffd1\054\uffd1\057\uffd1\062\uffd1\001" +
    "\002\000\006\057\ufffe\062\ufffe\001\002\000\004\004\247" +
    "\001\002\000\020\007\042\010\047\013\040\014\045\030" +
    "\172\031\041\054\050\001\002\000\032\005\100\006\101" +
    "\015\102\023\071\026\077\031\062\032\103\033\057\034" +
    "\076\046\060\047\066\054\104\001\002\000\004\060\252" +
    "\001\002\000\032\005\100\006\101\015\102\023\071\026" +
    "\077\031\062\032\103\033\057\034\076\046\060\047\066" +
    "\054\104\001\002\000\004\055\254\001\002\000\004\056" +
    "\255\001\002\000\056\004\013\005\ufff8\006\ufff8\011\016" +
    "\015\ufff8\017\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025" +
    "\ufff8\026\ufff8\027\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8" +
    "\046\ufff8\047\ufff8\054\ufff8\057\ufff8\065\015\001\002\000" +
    "\004\057\257\001\002\000\052\005\uffc7\006\uffc7\015\uffc7" +
    "\017\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026" +
    "\uffc7\027\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\046\uffc7" +
    "\047\uffc7\054\uffc7\057\uffc7\062\uffc7\001\002\000\004\031" +
    "\261\001\002\000\004\061\202\001\002\000\032\005\100" +
    "\006\101\015\102\023\071\026\077\031\062\032\103\033" +
    "\057\034\076\046\060\047\066\054\104\001\002\000\004" +
    "\060\264\001\002\000\054\005\uffcb\006\uffcb\015\uffcb\017" +
    "\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb" +
    "\027\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\046\uffcb\047" +
    "\uffcb\054\uffcb\055\uffcb\057\uffcb\062\uffcb\001\002\000\032" +
    "\005\100\006\101\015\102\023\071\026\077\031\062\032" +
    "\103\033\057\034\076\046\060\047\066\054\104\001\002" +
    "\000\004\055\267\001\002\000\004\056\270\001\002\000" +
    "\056\004\013\005\ufff8\006\ufff8\011\016\015\ufff8\017\ufff8" +
    "\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027" +
    "\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\046\ufff8\047\ufff8" +
    "\054\ufff8\057\ufff8\065\015\001\002\000\004\057\272\001" +
    "\002\000\052\005\uffc8\006\uffc8\015\uffc8\017\uffc8\021\uffc8" +
    "\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\031" +
    "\uffc8\032\uffc8\033\uffc8\034\uffc8\046\uffc8\047\uffc8\054\uffc8" +
    "\057\uffc8\062\uffc8\001\002\000\032\005\100\006\101\015" +
    "\102\023\071\026\077\031\062\032\103\033\057\034\076" +
    "\046\060\047\066\054\104\001\002\000\004\055\275\001" +
    "\002\000\004\056\276\001\002\000\056\004\013\005\ufff8" +
    "\006\ufff8\011\016\015\ufff8\017\ufff8\021\ufff8\022\ufff8\023" +
    "\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\031\ufff8\032\ufff8" +
    "\033\ufff8\034\ufff8\046\ufff8\047\ufff8\054\ufff8\057\ufff8\065" +
    "\015\001\002\000\004\057\300\001\002\000\054\005\uffca" +
    "\006\uffca\015\uffca\017\uffca\020\301\021\uffca\022\uffca\023" +
    "\uffca\024\uffca\025\uffca\026\uffca\027\uffca\031\uffca\032\uffca" +
    "\033\uffca\034\uffca\046\uffca\047\uffca\054\uffca\057\uffca\062" +
    "\uffca\001\002\000\004\056\302\001\002\000\056\004\013" +
    "\005\ufff8\006\ufff8\011\016\015\ufff8\017\ufff8\021\ufff8\022" +
    "\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\031\ufff8" +
    "\032\ufff8\033\ufff8\034\ufff8\046\ufff8\047\ufff8\054\ufff8\057" +
    "\ufff8\065\015\001\002\000\004\057\304\001\002\000\052" +
    "\005\uffc9\006\uffc9\015\uffc9\017\uffc9\021\uffc9\022\uffc9\023" +
    "\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\031\uffc9\032\uffc9" +
    "\033\uffc9\034\uffc9\046\uffc9\047\uffc9\054\uffc9\057\uffc9\062" +
    "\uffc9\001\002\000\004\054\306\001\002\000\034\005\100" +
    "\006\101\015\102\023\071\026\077\031\062\032\103\033" +
    "\057\034\076\046\060\047\066\054\104\055\uffc2\001\002" +
    "\000\004\055\310\001\002\000\004\060\311\001\002\000" +
    "\052\005\uffc4\006\uffc4\015\uffc4\017\uffc4\021\uffc4\022\uffc4" +
    "\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\031\uffc4\032" +
    "\uffc4\033\uffc4\034\uffc4\046\uffc4\047\uffc4\054\uffc4\057\uffc4" +
    "\062\uffc4\001\002\000\052\005\ufffb\006\ufffb\015\ufffb\017" +
    "\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb" +
    "\027\ufffb\031\ufffb\032\ufffb\033\ufffb\034\ufffb\046\ufffb\047" +
    "\ufffb\054\ufffb\057\ufffb\062\ufffb\001\002\000\032\005\100" +
    "\006\101\015\102\023\071\026\077\031\062\032\103\033" +
    "\057\034\076\046\060\047\066\054\104\001\002\000\004" +
    "\055\315\001\002\000\004\060\316\001\002\000\052\005" +
    "\uffc6\006\uffc6\015\uffc6\017\uffc6\021\uffc6\022\uffc6\023\uffc6" +
    "\024\uffc6\025\uffc6\026\uffc6\027\uffc6\031\uffc6\032\uffc6\033" +
    "\uffc6\034\uffc6\046\uffc6\047\uffc6\054\uffc6\057\uffc6\062\uffc6" +
    "\001\002\000\004\060\320\001\002\000\052\005\uffc5\006" +
    "\uffc5\015\uffc5\017\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5" +
    "\025\uffc5\026\uffc5\027\uffc5\031\uffc5\032\uffc5\033\uffc5\034" +
    "\uffc5\046\uffc5\047\uffc5\054\uffc5\057\uffc5\062\uffc5\001\002" +
    "\000\032\005\100\006\101\015\102\023\071\026\077\031" +
    "\062\032\103\033\057\034\076\046\060\047\066\054\104" +
    "\001\002\000\004\060\323\001\002\000\004\057\324\001" +
    "\002\000\014\004\uffda\011\uffda\012\uffda\016\uffda\065\uffda" +
    "\001\002\000\016\007\042\010\047\013\040\014\045\031" +
    "\041\054\050\001\002\000\006\055\uffd7\063\uffd7\001\002" +
    "\000\004\054\330\001\002\000\020\007\042\010\047\013" +
    "\040\014\045\031\041\054\050\055\uffd8\001\002\000\004" +
    "\055\332\001\002\000\004\056\333\001\002\000\056\004" +
    "\013\005\ufff8\006\ufff8\011\016\015\ufff8\017\ufff8\021\ufff8" +
    "\022\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\031" +
    "\ufff8\032\ufff8\033\ufff8\034\ufff8\046\ufff8\047\ufff8\054\ufff8" +
    "\057\ufff8\065\015\001\002\000\004\057\335\001\002\000" +
    "\014\004\uffdb\011\uffdb\012\uffdb\016\uffdb\065\uffdb\001\002" +
    "\000\004\056\340\001\002\000\004\002\001\001\002\000" +
    "\056\004\013\005\ufff8\006\ufff8\011\016\015\ufff8\017\ufff8" +
    "\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027" +
    "\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\046\ufff8\047\ufff8" +
    "\054\ufff8\057\ufff8\065\015\001\002\000\004\057\342\001" +
    "\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\340\000\032\002\016\036\010\037\011\040\004\041" +
    "\005\042\013\046\021\047\022\053\020\054\006\055\017" +
    "\056\003\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\057\336\001\001\000\010\033\205" +
    "\034\043\035\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\033\170\034\043\035\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\036\010\037\011\040\004\041\005\042\013" +
    "\046\021\047\022\053\020\056\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\036\010\037" +
    "\011\040\004\046\021\047\022\050\027\051\031\052\030" +
    "\053\032\001\001\000\002\001\001\000\016\036\010\037" +
    "\011\040\004\046\021\047\022\053\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\033\045\034\043\035\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\034" +
    "\054\035\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\033\052\034" +
    "\043\035\042\001\001\000\010\033\050\034\043\035\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\016\064" +
    "\017\074\020\073\021\072\022\071\023\067\024\066\025" +
    "\063\026\062\027\060\001\001\000\010\025\167\026\062" +
    "\027\060\001\001\000\010\025\166\026\062\027\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\025\146\026" +
    "\062\027\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\025\111\026\062" +
    "\027\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\025\106\026\062" +
    "\027\060\001\001\000\026\016\104\017\074\020\073\021" +
    "\072\022\071\023\067\024\066\025\063\026\062\027\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\020\113\021\072\022\071\023\067\024\066\025" +
    "\063\026\062\027\060\001\001\000\002\001\001\000\020" +
    "\021\115\022\071\023\067\024\066\025\063\026\062\027" +
    "\060\001\001\000\002\001\001\000\016\022\143\023\067" +
    "\024\066\025\063\026\062\027\060\001\001\000\016\022" +
    "\142\023\067\024\066\025\063\026\062\027\060\001\001" +
    "\000\016\022\141\023\067\024\066\025\063\026\062\027" +
    "\060\001\001\000\016\022\140\023\067\024\066\025\063" +
    "\026\062\027\060\001\001\000\016\022\137\023\067\024" +
    "\066\025\063\026\062\027\060\001\001\000\016\022\124" +
    "\023\067\024\066\025\063\026\062\027\060\001\001\000" +
    "\002\001\001\000\014\023\136\024\066\025\063\026\062" +
    "\027\060\001\001\000\014\023\127\024\066\025\063\026" +
    "\062\027\060\001\001\000\002\001\001\000\012\024\135" +
    "\025\063\026\062\027\060\001\001\000\012\024\134\025" +
    "\063\026\062\027\060\001\001\000\012\024\133\025\063" +
    "\026\062\027\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\016\153\017\074\020\073\021\072\022\071" +
    "\023\067\024\066\025\063\026\062\027\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\016\160\017\074\020\073\021\072\022" +
    "\071\023\067\024\066\025\063\026\062\027\060\030\162" +
    "\031\161\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\016\165\017\074" +
    "\020\073\021\072\022\071\023\067\024\066\025\063\026" +
    "\062\027\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\033\172\034" +
    "\043\035\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\016\175\017\074\020\073\021\072\022\071\023" +
    "\067\024\066\025\063\026\062\027\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\016\202\017\074\020\073\021\072\022\071" +
    "\023\067\024\066\025\063\026\062\027\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\033\213\034\043\035" +
    "\042\043\212\044\211\045\210\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\032\221\036\010\037\011\040\004\046" +
    "\021\047\022\051\222\052\030\053\032\001\001\000\002" +
    "\001\001\000\054\003\244\004\230\005\234\006\236\007" +
    "\242\010\243\011\241\012\225\013\226\014\223\015\231" +
    "\016\237\017\074\020\073\021\072\022\071\023\067\024" +
    "\066\025\063\026\062\027\060\001\001\000\002\001\001" +
    "\000\026\016\316\017\074\020\073\021\072\022\071\023" +
    "\067\024\066\025\063\026\062\027\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\005" +
    "\311\006\236\007\242\010\243\011\241\012\225\013\226" +
    "\014\223\015\231\016\237\017\074\020\073\021\072\022" +
    "\071\023\067\024\066\025\063\026\062\027\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\247" +
    "\001\001\000\010\033\257\034\043\035\042\001\001\000" +
    "\026\016\250\017\074\020\073\021\072\022\071\023\067" +
    "\024\066\025\063\026\062\027\060\001\001\000\002\001" +
    "\001\000\030\006\252\016\237\017\074\020\073\021\072" +
    "\022\071\023\067\024\066\025\063\026\062\027\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\032\255" +
    "\036\010\037\011\040\004\046\021\047\022\051\222\052" +
    "\030\053\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\016\262\017" +
    "\074\020\073\021\072\022\071\023\067\024\066\025\063" +
    "\026\062\027\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\016\265\017\074\020\073\021\072\022\071" +
    "\023\067\024\066\025\063\026\062\027\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\032\270\036\010" +
    "\037\011\040\004\046\021\047\022\051\222\052\030\053" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\016\273\017\074\020\073\021\072\022\071\023\067\024" +
    "\066\025\063\026\062\027\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\032\276\036\010\037\011\040" +
    "\004\046\021\047\022\051\222\052\030\053\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\032\302\036\010\037\011\040\004\046\021\047\022" +
    "\051\222\052\030\053\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\016\160\017\074" +
    "\020\073\021\072\022\071\023\067\024\066\025\063\026" +
    "\062\027\060\030\306\031\161\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\016\313\017\074\020\073\021\072\022\071\023\067" +
    "\024\066\025\063\026\062\027\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\016\321\017\074\020\073\021" +
    "\072\022\071\023\067\024\066\025\063\026\062\027\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\033\213\034\043\035\042\045\325\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\033\213\034" +
    "\043\035\042\043\330\044\211\045\210\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\032\333\036\010\037" +
    "\011\040\004\046\021\047\022\051\222\052\030\053\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\032\340\036\010\037\011" +
    "\040\004\046\021\047\022\051\222\052\030\053\032\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programa ::= Declaraciones_Ini_Vac Main 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Programa",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Main ::= MAIN LLABRE Bloque LLCIERRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Main",45, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Bloque ::= Lista_Declaraciones_Vac Lista_Instrucciones_Vac 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Bloque",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Lista_Instrucciones_Vac ::= Lista_Instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Lista_Instrucciones_Vac",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Lista_Instrucciones_Vac ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Lista_Instrucciones_Vac",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Lista_Instrucciones ::= Lista_Instrucciones Instruccion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Lista_Instrucciones",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Lista_Instrucciones ::= Instruccion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Lista_Instrucciones",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Lista_Declaraciones_Vac ::= Lista_Declaraciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Lista_Declaraciones_Vac",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Lista_Declaraciones_Vac ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Lista_Declaraciones_Vac",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Lista_Declaraciones ::= Lista_Declaraciones Declaracion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Lista_Declaraciones",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Lista_Declaraciones ::= Declaracion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Lista_Declaraciones",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Declaraciones_Ini_Vac ::= Declaraciones_Ini 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaraciones_Ini_Vac",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Declaraciones_Ini_Vac ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaraciones_Ini_Vac",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Declaraciones_Ini ::= Declaraciones_Ini Iniciales 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaraciones_Ini",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Declaraciones_Ini ::= Iniciales 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaraciones_Ini",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Iniciales ::= Dec_Fun 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Iniciales",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Iniciales ::= Dec_Void 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Iniciales",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Iniciales ::= Declaracion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Iniciales",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Declaracion ::= Dec_Tipo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaracion",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Declaracion ::= Dec_Struct 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaracion",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Declaracion ::= Dec_Var 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaracion",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Dec_Tipo ::= TYPE IDEN ASIGNACION T0 PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Dec_Tipo",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Dec_Struct ::= STALINTRUCT IDEN LLABRE CuerpoStruct LLCIERRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Dec_Struct",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CuerpoStruct ::= Lista_Declaraciones_Vac 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CuerpoStruct",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // T0 ::= POINTER T0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("T0",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // T0 ::= T1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("T0",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // T1 ::= GUEVARRAY T1 CABRE Expr CCIERRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("T1",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // T1 ::= PABRE T0 PCIERRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("T1",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // T1 ::= IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("T1",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // T1 ::= T2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("T1",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // T2 ::= LENINT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("T2",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // T2 ::= BOOLSHEVIK 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("T2",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Dec_Var ::= Dec_Var_Vacia 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Dec_Var",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Dec_Var ::= Dec_Var_Ini 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Dec_Var",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Dec_Var_Vacia ::= VAR T0 IDEN PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Dec_Var_Vacia",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Dec_Var_Ini ::= VAR T0 IDEN ASIGNACION Expr PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Dec_Var_Ini",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Dec_Var_Ini ::= VAR CONST T0 IDEN ASIGNACION Expr PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Dec_Var_Ini",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Dec_Void ::= FUN VOID IDEN PABRE Lista_Argumentos_Vac PCIERRA LLABRE Bloque LLCIERRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Dec_Void",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Dec_Fun ::= FUN T0 IDEN PABRE Lista_Argumentos_Vac PCIERRA LLABRE Bloque RETURN Expr PUNTOYCOMA LLCIERRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Dec_Fun",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Lista_Argumentos_Vac ::= Lista_Argumentos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Lista_Argumentos_Vac",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Lista_Argumentos_Vac ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Lista_Argumentos_Vac",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Lista_Argumentos ::= Lista_Argumentos COMA Argumento 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Lista_Argumentos",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Lista_Argumentos ::= Argumento 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Lista_Argumentos",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Argumento ::= T0 IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Argumento",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Argumento ::= T0 REF IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Argumento",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Instruccion ::= InsAsig 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Instruccion ::= InsIf 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Instruccion ::= InsIfElse 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Instruccion ::= InsWhile 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Instruccion ::= InsFor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Instruccion ::= InsWrite 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Instruccion ::= InsDelete 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Instruccion ::= InsCall 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // InsAsig ::= Expr ASIGNACION Expr PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsAsig",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // InsIf ::= TROTSKIF PABRE Expr PCIERRA LLABRE Bloque LLCIERRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsIf",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // InsIfElse ::= TROTSKIF PABRE Expr PCIERRA LLABRE Bloque LLCIERRA FIDELSECASTRO LLABRE Bloque LLCIERRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsIfElse",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // InsWhile ::= USSWHILE PABRE Expr PCIERRA LLABRE Bloque LLCIERRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsWhile",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // InsFor ::= FORLETARIAT PABRE Dec_Var_Ini Expr PUNTOYCOMA InsAsig PCIERRA LLABRE Bloque LLCIERRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsFor",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // InsWrite ::= WRITE PABRE Expr PCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsWrite",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // InsDelete ::= DELETE Expr PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsDelete",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // InsCall ::= CALL IDEN PABRE Lista_Param_Vac PCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsCall",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Lista_Param_Vac ::= Lista_Param 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Lista_Param_Vac",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Lista_Param_Vac ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Lista_Param_Vac",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Lista_Param ::= Lista_Param COMA Expr 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Lista_Param",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Lista_Param ::= Expr 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Lista_Param",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr ::= E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Expr",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E0 ::= E0 OR E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E0 ::= E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E1 ::= E1 AND E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E1 ::= E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E2 ::= E2 IGUAL E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E2 ::= E2 DISTINTO E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E2 ::= E2 MENORIGUAL E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E2 ::= E2 MAYORIGUAL E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E2 ::= E2 MENOR E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E2 ::= E2 MAYOR E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E2 ::= E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E3 ::= E3 MAS E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E3 ::= E3 MENOS E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E3 ::= E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E4 ::= E4 ASTERISCO E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E4 ::= E4 DIV E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E4 ::= E4 RESTO E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E4 ::= E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E5 ::= MAS E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E5 ::= MENOS E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E5 ::= ASTERISCO E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E5 ::= NEG E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E5 ::= REF E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E5 ::= E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E6 ::= NEW LENINT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // E6 ::= NEW BOOLSHEVIK 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // E6 ::= RED LENINT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // E6 ::= RED BOOLSHEVIK 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // E6 ::= E7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // E7 ::= E7 CABRE Expr CCIERRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // E7 ::= E7 PUNTO IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // E7 ::= E7 FLECHA IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // E7 ::= IDEN PABRE Lista_Param_Vac PCIERRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // E7 ::= E8 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // E8 ::= ENTPOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // E8 ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // E8 ::= NULL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // E8 ::= IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // E8 ::= PABRE Expr PCIERRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

