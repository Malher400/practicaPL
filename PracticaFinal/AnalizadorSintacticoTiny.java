
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Mon Mar 25 02:25:43 CET 2024
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Mon Mar 25 02:25:43 CET 2024
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\055\000\002\002\003\000\002\002\004\000\002\003" +
    "\005\000\002\003\003\000\002\004\005\000\002\004\003" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\003\000\002\006\005\000\002\006\005\000\002\006" +
    "\003\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\003\000\002\010\004\000\002\010\004\000" +
    "\002\010\004\000\002\010\004\000\002\010\004\000\002" +
    "\010\003\000\002\011\004\000\002\011\004\000\002\011" +
    "\004\000\002\011\004\000\002\011\003\000\002\012\006" +
    "\000\002\012\005\000\002\012\005\000\002\012\006\000" +
    "\002\014\003\000\002\014\002\000\002\015\005\000\002" +
    "\015\003\000\002\012\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\113\000\032\005\025\006\026\015\027\023\016\026" +
    "\024\031\010\032\030\033\004\034\023\046\005\047\012" +
    "\054\031\001\002\000\020\005\025\006\026\015\027\023" +
    "\016\026\024\031\010\054\031\001\002\000\020\005\025" +
    "\006\026\015\027\023\016\026\024\031\010\054\031\001" +
    "\002\000\054\002\uffda\032\uffda\033\uffda\034\uffda\035\uffda" +
    "\036\uffda\037\uffda\040\uffda\041\uffda\042\uffda\043\uffda\044" +
    "\uffda\045\uffda\050\uffda\051\uffda\052\uffda\053\uffda\054\uffda" +
    "\055\uffda\063\uffda\064\uffda\001\002\000\054\002\uffe3\032" +
    "\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3" +
    "\041\uffe3\042\uffe3\043\uffe3\044\uffe3\045\uffe3\050\100\051" +
    "\uffe3\052\077\053\076\054\101\055\uffe3\063\uffe3\064\uffe3" +
    "\001\002\000\054\002\uffd6\032\uffd6\033\uffd6\034\uffd6\035" +
    "\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6" +
    "\044\uffd6\045\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\054" +
    "\uffd6\055\uffd6\063\uffd6\064\uffd6\001\002\000\044\002\uffe8" +
    "\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040" +
    "\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8\051\uffe8" +
    "\055\uffe8\063\uffe8\064\uffe8\001\002\000\020\005\025\006" +
    "\026\015\027\023\016\026\024\031\010\054\031\001\002" +
    "\000\044\002\uffee\032\uffee\033\uffee\034\uffee\035\uffee\036" +
    "\uffee\037\uffee\040\uffee\041\uffee\042\uffee\043\uffee\044\uffee" +
    "\045\uffee\051\uffee\055\uffee\063\uffee\064\uffee\001\002\000" +
    "\004\002\074\001\002\000\044\002\ufff2\032\ufff2\033\ufff2" +
    "\034\056\035\057\036\060\037\ufff2\040\ufff2\041\ufff2\042" +
    "\ufff2\043\ufff2\044\ufff2\045\ufff2\051\ufff2\055\ufff2\063\ufff2" +
    "\064\ufff2\001\002\000\006\013\073\014\072\001\002\000" +
    "\036\002\ufff5\032\053\033\054\037\ufff5\040\ufff5\041\ufff5" +
    "\042\ufff5\043\ufff5\044\ufff5\045\ufff5\051\ufff5\055\ufff5\063" +
    "\ufff5\064\ufff5\001\002\000\032\002\ufffc\037\046\040\044" +
    "\041\045\042\050\043\051\044\ufffc\045\ufffc\051\ufffc\055" +
    "\ufffc\063\ufffc\064\047\001\002\000\016\002\ufffe\044\042" +
    "\045\ufffe\051\ufffe\055\ufffe\063\ufffe\001\002\000\014\002" +
    "\001\045\040\051\001\055\001\063\001\001\002\000\020" +
    "\005\025\006\026\015\027\023\016\026\024\031\010\054" +
    "\031\001\002\000\006\013\036\014\035\001\002\000\054" +
    "\002\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037" +
    "\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8" +
    "\050\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8\055\uffd8\063" +
    "\uffd8\064\uffd8\001\002\000\054\002\uffd9\032\uffd9\033\uffd9" +
    "\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042" +
    "\uffd9\043\uffd9\044\uffd9\045\uffd9\050\uffd9\051\uffd9\052\uffd9" +
    "\053\uffd9\054\uffd9\055\uffd9\063\uffd9\064\uffd9\001\002\000" +
    "\054\002\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7" +
    "\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7\045" +
    "\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7" +
    "\063\uffd7\064\uffd7\001\002\000\020\005\025\006\026\015" +
    "\027\023\016\026\024\031\010\054\031\001\002\000\032" +
    "\005\025\006\026\015\027\023\016\026\024\031\010\032" +
    "\030\033\004\034\023\046\005\047\012\054\031\001\002" +
    "\000\004\055\033\001\002\000\054\002\uffd5\032\uffd5\033" +
    "\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5" +
    "\042\uffd5\043\uffd5\044\uffd5\045\uffd5\050\uffd5\051\uffd5\052" +
    "\uffd5\053\uffd5\054\uffd5\055\uffd5\063\uffd5\064\uffd5\001\002" +
    "\000\044\002\uffed\032\uffed\033\uffed\034\uffed\035\uffed\036" +
    "\uffed\037\uffed\040\uffed\041\uffed\042\uffed\043\uffed\044\uffed" +
    "\045\uffed\051\uffed\055\uffed\063\uffed\064\uffed\001\002\000" +
    "\044\002\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6" +
    "\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\045" +
    "\uffe6\051\uffe6\055\uffe6\063\uffe6\064\uffe6\001\002\000\044" +
    "\002\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037" +
    "\uffe7\040\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7" +
    "\051\uffe7\055\uffe7\063\uffe7\064\uffe7\001\002\000\044\002" +
    "\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb" +
    "\040\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb\051" +
    "\uffeb\055\uffeb\063\uffeb\064\uffeb\001\002\000\032\005\025" +
    "\006\026\015\027\023\016\026\024\031\010\032\030\033" +
    "\004\034\023\046\005\047\012\054\031\001\002\000\016" +
    "\002\uffff\044\042\045\uffff\051\uffff\055\uffff\063\uffff\001" +
    "\002\000\032\005\025\006\026\015\027\023\016\026\024" +
    "\031\010\032\030\033\004\034\023\046\005\047\012\054" +
    "\031\001\002\000\032\002\ufffd\037\046\040\044\041\045" +
    "\042\050\043\051\044\ufffd\045\ufffd\051\ufffd\055\ufffd\063" +
    "\ufffd\064\047\001\002\000\032\005\025\006\026\015\027" +
    "\023\016\026\024\031\010\032\030\033\004\034\023\046" +
    "\005\047\012\054\031\001\002\000\032\005\025\006\026" +
    "\015\027\023\016\026\024\031\010\032\030\033\004\034" +
    "\023\046\005\047\012\054\031\001\002\000\032\005\025" +
    "\006\026\015\027\023\016\026\024\031\010\032\030\033" +
    "\004\034\023\046\005\047\012\054\031\001\002\000\032" +
    "\005\025\006\026\015\027\023\016\026\024\031\010\032" +
    "\030\033\004\034\023\046\005\047\012\054\031\001\002" +
    "\000\032\005\025\006\026\015\027\023\016\026\024\031" +
    "\010\032\030\033\004\034\023\046\005\047\012\054\031" +
    "\001\002\000\032\005\025\006\026\015\027\023\016\026" +
    "\024\031\010\032\030\033\004\034\023\046\005\047\012" +
    "\054\031\001\002\000\036\002\ufff6\032\053\033\054\037" +
    "\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6\045\ufff6" +
    "\051\ufff6\055\ufff6\063\ufff6\064\ufff6\001\002\000\032\005" +
    "\025\006\026\015\027\023\016\026\024\031\010\032\030" +
    "\033\004\034\023\046\005\047\012\054\031\001\002\000" +
    "\032\005\025\006\026\015\027\023\016\026\024\031\010" +
    "\032\030\033\004\034\023\046\005\047\012\054\031\001" +
    "\002\000\044\002\ufff3\032\ufff3\033\ufff3\034\056\035\057" +
    "\036\060\037\ufff3\040\ufff3\041\ufff3\042\ufff3\043\ufff3\044" +
    "\ufff3\045\ufff3\051\ufff3\055\ufff3\063\ufff3\064\ufff3\001\002" +
    "\000\032\005\025\006\026\015\027\023\016\026\024\031" +
    "\010\032\030\033\004\034\023\046\005\047\012\054\031" +
    "\001\002\000\032\005\025\006\026\015\027\023\016\026" +
    "\024\031\010\032\030\033\004\034\023\046\005\047\012" +
    "\054\031\001\002\000\032\005\025\006\026\015\027\023" +
    "\016\026\024\031\010\032\030\033\004\034\023\046\005" +
    "\047\012\054\031\001\002\000\044\002\uffef\032\uffef\033" +
    "\uffef\034\uffef\035\uffef\036\uffef\037\uffef\040\uffef\041\uffef" +
    "\042\uffef\043\uffef\044\uffef\045\uffef\051\uffef\055\uffef\063" +
    "\uffef\064\uffef\001\002\000\044\002\ufff0\032\ufff0\033\ufff0" +
    "\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\042" +
    "\ufff0\043\ufff0\044\ufff0\045\ufff0\051\ufff0\055\ufff0\063\ufff0" +
    "\064\ufff0\001\002\000\044\002\ufff1\032\ufff1\033\ufff1\034" +
    "\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1\042\ufff1" +
    "\043\ufff1\044\ufff1\045\ufff1\051\ufff1\055\ufff1\063\ufff1\064" +
    "\ufff1\001\002\000\044\002\ufff4\032\ufff4\033\ufff4\034\056" +
    "\035\057\036\060\037\ufff4\040\ufff4\041\ufff4\042\ufff4\043" +
    "\ufff4\044\ufff4\045\ufff4\051\ufff4\055\ufff4\063\ufff4\064\ufff4" +
    "\001\002\000\036\002\ufff7\032\053\033\054\037\ufff7\040" +
    "\ufff7\041\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\051\ufff7" +
    "\055\ufff7\063\ufff7\064\ufff7\001\002\000\036\002\ufffa\032" +
    "\053\033\054\037\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa" +
    "\044\ufffa\045\ufffa\051\ufffa\055\ufffa\063\ufffa\064\ufffa\001" +
    "\002\000\036\002\ufffb\032\053\033\054\037\ufffb\040\ufffb" +
    "\041\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\051\ufffb\055" +
    "\ufffb\063\ufffb\064\ufffb\001\002\000\036\002\ufff8\032\053" +
    "\033\054\037\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8\044" +
    "\ufff8\045\ufff8\051\ufff8\055\ufff8\063\ufff8\064\ufff8\001\002" +
    "\000\036\002\ufff9\032\053\033\054\037\ufff9\040\ufff9\041" +
    "\ufff9\042\ufff9\043\ufff9\044\ufff9\045\ufff9\051\ufff9\055\ufff9" +
    "\063\ufff9\064\ufff9\001\002\000\044\002\uffe4\032\uffe4\033" +
    "\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4" +
    "\042\uffe4\043\uffe4\044\uffe4\045\uffe4\051\uffe4\055\uffe4\063" +
    "\uffe4\064\uffe4\001\002\000\044\002\uffe5\032\uffe5\033\uffe5" +
    "\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042" +
    "\uffe5\043\uffe5\044\uffe5\045\uffe5\051\uffe5\055\uffe5\063\uffe5" +
    "\064\uffe5\001\002\000\004\002\000\001\002\000\044\002" +
    "\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9" +
    "\040\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9\045\uffe9\051" +
    "\uffe9\055\uffe9\063\uffe9\064\uffe9\001\002\000\004\031\113" +
    "\001\002\000\004\031\112\001\002\000\032\005\025\006" +
    "\026\015\027\023\016\026\024\031\010\032\030\033\004" +
    "\034\023\046\005\047\012\054\031\001\002\000\034\005" +
    "\025\006\026\015\027\023\016\026\024\031\010\032\030" +
    "\033\004\034\023\046\005\047\012\054\031\055\uffdd\001" +
    "\002\000\006\055\uffdb\063\uffdb\001\002\000\004\055\107" +
    "\001\002\000\006\055\uffde\063\105\001\002\000\032\005" +
    "\025\006\026\015\027\023\016\026\024\031\010\032\030" +
    "\033\004\034\023\046\005\047\012\054\031\001\002\000" +
    "\006\055\uffdc\063\uffdc\001\002\000\054\002\uffdf\032\uffdf" +
    "\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041" +
    "\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\050\uffdf\051\uffdf" +
    "\052\uffdf\053\uffdf\054\uffdf\055\uffdf\063\uffdf\064\uffdf\001" +
    "\002\000\004\051\111\001\002\000\054\002\uffe2\032\uffe2" +
    "\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041" +
    "\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2\050\uffe2\051\uffe2" +
    "\052\uffe2\053\uffe2\054\uffe2\055\uffe2\063\uffe2\064\uffe2\001" +
    "\002\000\054\002\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1" +
    "\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044" +
    "\uffe1\045\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1" +
    "\055\uffe1\063\uffe1\064\uffe1\001\002\000\054\002\uffe0\032" +
    "\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0" +
    "\041\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0\050\uffe0\051" +
    "\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0\063\uffe0\064\uffe0" +
    "\001\002\000\044\002\uffea\032\uffea\033\uffea\034\uffea\035" +
    "\uffea\036\uffea\037\uffea\040\uffea\041\uffea\042\uffea\043\uffea" +
    "\044\uffea\045\uffea\051\uffea\055\uffea\063\uffea\064\uffea\001" +
    "\002\000\044\002\uffec\032\uffec\033\uffec\034\uffec\035\uffec" +
    "\036\uffec\037\uffec\040\uffec\041\uffec\042\uffec\043\uffec\044" +
    "\uffec\045\uffec\051\uffec\055\uffec\063\uffec\064\uffec\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\113\000\026\002\013\003\021\004\020\005\017\006" +
    "\016\007\014\010\012\011\010\012\006\013\005\001\001" +
    "\000\010\011\114\012\006\013\005\001\001\000\010\011" +
    "\113\012\006\013\005\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\011" +
    "\074\012\006\013\005\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\011\036\012\006\013\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\011\033\012\006\013\005\001\001\000\026\002" +
    "\031\003\021\004\020\005\017\006\016\007\014\010\012" +
    "\011\010\012\006\013\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\004\040\005\017\006" +
    "\016\007\014\010\012\011\010\012\006\013\005\001\001" +
    "\000\002\001\001\000\020\005\042\006\016\007\014\010" +
    "\012\011\010\012\006\013\005\001\001\000\002\001\001" +
    "\000\016\006\070\007\014\010\012\011\010\012\006\013" +
    "\005\001\001\000\016\006\067\007\014\010\012\011\010" +
    "\012\006\013\005\001\001\000\016\006\066\007\014\010" +
    "\012\011\010\012\006\013\005\001\001\000\016\006\065" +
    "\007\014\010\012\011\010\012\006\013\005\001\001\000" +
    "\016\006\064\007\014\010\012\011\010\012\006\013\005" +
    "\001\001\000\016\006\051\007\014\010\012\011\010\012" +
    "\006\013\005\001\001\000\002\001\001\000\014\007\063" +
    "\010\012\011\010\012\006\013\005\001\001\000\014\007" +
    "\054\010\012\011\010\012\006\013\005\001\001\000\002" +
    "\001\001\000\012\010\062\011\010\012\006\013\005\001" +
    "\001\000\012\010\061\011\010\012\006\013\005\001\001" +
    "\000\012\010\060\011\010\012\006\013\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\002\107\003\021" +
    "\004\020\005\017\006\016\007\014\010\012\011\010\012" +
    "\006\013\005\001\001\000\032\002\101\003\021\004\020" +
    "\005\017\006\016\007\014\010\012\011\010\012\006\013" +
    "\005\014\102\015\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\002\105\003\021\004" +
    "\020\005\017\006\016\007\014\010\012\011\010\012\006" +
    "\013\005\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Expr ::= E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Expr",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Expr EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // E0 ::= E0 OR E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // E0 ::= E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // E1 ::= E1 AND E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // E1 ::= E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // E2 ::= E2 IGUAL E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // E2 ::= E2 DISTINTO E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // E2 ::= E2 MENORIGUAL E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // E2 ::= E2 MAYORIGUAL E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // E2 ::= E2 MENOR E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // E2 ::= E2 MAYOR E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // E2 ::= E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // E3 ::= E3 MAS E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // E3 ::= E3 MENOS E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // E3 ::= E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // E4 ::= E4 ASTERISCO E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // E4 ::= E4 DIV E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // E4 ::= E4 RESTO E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // E4 ::= E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // E5 ::= MAS E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // E5 ::= MENOS E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // E5 ::= ASTERISCO E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // E5 ::= NEG E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // E5 ::= REF E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // E5 ::= E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // E6 ::= NEW LENINT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // E6 ::= NEW BOOLSHEVIK 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // E6 ::= RED LENINT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // E6 ::= RED BOOLSHEVIK 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // E6 ::= E7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // E7 ::= E7 CABRE Expr CCIERRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // E7 ::= E7 PUNTO IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // E7 ::= E7 FLECHA IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // E7 ::= E7 PABRE Lista_Param PCIERRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Lista_Param ::= Param 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Lista_Param",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Lista_Param ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Lista_Param",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Param ::= Param COMA Expr 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Param",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Param ::= Expr 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Param",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // E7 ::= E8 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // E8 ::= ENTPOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // E8 ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // E8 ::= NULL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // E8 ::= IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // E8 ::= PABRE Expr PCIERRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

